### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Core.LinearAlgebra
  commentId: T:GeometrySharp.Core.LinearAlgebra
  id: LinearAlgebra
  parent: GeometrySharp.Core
  children:
  - GeometrySharp.Core.LinearAlgebra.GetBinomial(System.Int32,System.Int32)
  - GeometrySharp.Core.LinearAlgebra.GetRotationAxis(GeometrySharp.Core.Transform)
  - GeometrySharp.Core.LinearAlgebra.GetWeights(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  - GeometrySharp.Core.LinearAlgebra.GetWeights2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}})
  - GeometrySharp.Core.LinearAlgebra.GetYawPitchRoll(GeometrySharp.Core.Transform)
  - GeometrySharp.Core.LinearAlgebra.Orientation(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Core.LinearAlgebra.PointDehomogenizer(GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Core.LinearAlgebra.PointDehomogenizer1d(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  - GeometrySharp.Core.LinearAlgebra.PointDehomogenizer2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}})
  - GeometrySharp.Core.LinearAlgebra.PointsHomogeniser(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Collections.Generic.List{System.Double})
  - GeometrySharp.Core.LinearAlgebra.PointsHomogeniser2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}},System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})
  - GeometrySharp.Core.LinearAlgebra.Rational2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}})
  - GeometrySharp.Core.LinearAlgebra.RationalPoints(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  langs:
  - csharp
  - vb
  name: LinearAlgebra
  nameWithType: LinearAlgebra
  fullName: GeometrySharp.Core.LinearAlgebra
  type: Class
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: LinearAlgebra
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 10
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nProvides linear algebra utility functions.\n"
  example: []
  syntax:
    content: public class LinearAlgebra
    content.vb: Public Class LinearAlgebra
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Core.LinearAlgebra.PointsHomogeniser(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Collections.Generic.List{System.Double})
  commentId: M:GeometrySharp.Core.LinearAlgebra.PointsHomogeniser(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Collections.Generic.List{System.Double})
  id: PointsHomogeniser(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Collections.Generic.List{System.Double})
  parent: GeometrySharp.Core.LinearAlgebra
  langs:
  - csharp
  - vb
  name: PointsHomogeniser(List<Vector3>, List<Double>)
  nameWithType: LinearAlgebra.PointsHomogeniser(List<Vector3>, List<Double>)
  fullName: GeometrySharp.Core.LinearAlgebra.PointsHomogeniser(System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>, System.Collections.Generic.List<System.Double>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: PointsHomogeniser
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 19
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nTransform a collection of points into their homogeneous equivalents.\nhttp://deltaorange.com/2012/03/08/the-truth-behind-homogenous-coordinates/\n"
  example: []
  syntax:
    content: public static List<Vector3> PointsHomogeniser(List<Vector3> controlPoints, List<double> weights = null)
    parameters:
    - id: controlPoints
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
      description: Control points, a set of size (points count x points dimension).
    - id: weights
      type: System.Collections.Generic.List{System.Double}
      description: Control point weights, the same size as the set of control points (points count x 1).
    return:
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
      description: A set of control points where each point is (wi*pi, wi) where wi the ith control point weight and pi is the ith control point, hence the dimension of the point is dim + 1.
    content.vb: Public Shared Function PointsHomogeniser(controlPoints As List(Of Vector3), weights As List(Of Double) = Nothing) As List(Of Vector3)
  overload: GeometrySharp.Core.LinearAlgebra.PointsHomogeniser*
  nameWithType.vb: LinearAlgebra.PointsHomogeniser(List(Of Vector3), List(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Core.LinearAlgebra.PointsHomogeniser(System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3), System.Collections.Generic.List(Of System.Double))
  name.vb: PointsHomogeniser(List(Of Vector3), List(Of Double))
- uid: GeometrySharp.Core.LinearAlgebra.PointsHomogeniser2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}},System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})
  commentId: M:GeometrySharp.Core.LinearAlgebra.PointsHomogeniser2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}},System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})
  id: PointsHomogeniser2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}},System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})
  parent: GeometrySharp.Core.LinearAlgebra
  langs:
  - csharp
  - vb
  name: PointsHomogeniser2d(List<List<Vector3>>, List<List<Double>>)
  nameWithType: LinearAlgebra.PointsHomogeniser2d(List<List<Vector3>>, List<List<Double>>)
  fullName: GeometrySharp.Core.LinearAlgebra.PointsHomogeniser2d(System.Collections.Generic.List<System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>>, System.Collections.Generic.List<System.Collections.Generic.List<System.Double>>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: PointsHomogeniser2d
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 65
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nTransform a two-dimension collection of points into their homogeneous equivalents.\nhttp://deltaorange.com/2012/03/08/the-truth-behind-homogenous-coordinates/\n"
  example: []
  syntax:
    content: public static List<List<Vector3>> PointsHomogeniser2d(List<List<Vector3>> controlPoints, List<List<double>> weights = null)
    parameters:
    - id: controlPoints
      type: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
      description: Control points, a two-dimensional set of size (points count x points dimension).
    - id: weights
      type: System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}
      description: Control point weights, the same size as the set of control points (points count x 1).
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
      description: A two-dimensional set of control points where each point is (wi*pi, wi) where wi the ith control point weight and pi is the ith control point, hence the dimension of the point is dim + 1.
    content.vb: Public Shared Function PointsHomogeniser2d(controlPoints As List(Of List(Of Vector3)), weights As List(Of List(Of Double)) = Nothing) As List(Of List(Of Vector3))
  overload: GeometrySharp.Core.LinearAlgebra.PointsHomogeniser2d*
  nameWithType.vb: LinearAlgebra.PointsHomogeniser2d(List(Of List(Of Vector3)), List(Of List(Of Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Core.LinearAlgebra.PointsHomogeniser2d(System.Collections.Generic.List(Of System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3)), System.Collections.Generic.List(Of System.Collections.Generic.List(Of System.Double)))
  name.vb: PointsHomogeniser2d(List(Of List(Of Vector3)), List(Of List(Of Double)))
- uid: GeometrySharp.Core.LinearAlgebra.GetWeights(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  commentId: M:GeometrySharp.Core.LinearAlgebra.GetWeights(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  id: GetWeights(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  parent: GeometrySharp.Core.LinearAlgebra
  langs:
  - csharp
  - vb
  name: GetWeights(List<Vector3>)
  nameWithType: LinearAlgebra.GetWeights(List<Vector3>)
  fullName: GeometrySharp.Core.LinearAlgebra.GetWeights(System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: GetWeights
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 96
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nObtain the weight from a collection of points in homogeneous space, assuming all are the same dimension.\n"
  example: []
  syntax:
    content: public static List<double> GetWeights(List<Vector3> homoPts)
    parameters:
    - id: homoPts
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
      description: Points represented by an array (wi*pi, wi) with length (dim+1).
    return:
      type: System.Collections.Generic.List{System.Double}
      description: A set of values, represented by a set pi with length (dim).
    content.vb: Public Shared Function GetWeights(homoPts As List(Of Vector3)) As List(Of Double)
  overload: GeometrySharp.Core.LinearAlgebra.GetWeights*
  nameWithType.vb: LinearAlgebra.GetWeights(List(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Core.LinearAlgebra.GetWeights(System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3))
  name.vb: GetWeights(List(Of Vector3))
- uid: GeometrySharp.Core.LinearAlgebra.GetWeights2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}})
  commentId: M:GeometrySharp.Core.LinearAlgebra.GetWeights2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}})
  id: GetWeights2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}})
  parent: GeometrySharp.Core.LinearAlgebra
  langs:
  - csharp
  - vb
  name: GetWeights2d(List<List<Vector3>>)
  nameWithType: LinearAlgebra.GetWeights2d(List<List<Vector3>>)
  fullName: GeometrySharp.Core.LinearAlgebra.GetWeights2d(System.Collections.Generic.List<System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: GetWeights2d
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 111
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nObtain the weight from a two-dimensional collection of points in homogeneous space, assuming all are the same dimension.\n"
  example: []
  syntax:
    content: public static List<List<double>> GetWeights2d(List<List<Vector3>> homoPts)
    parameters:
    - id: homoPts
      type: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
      description: Two-dimensional set of points represented by an array (wi*pi, wi) with length (dim+1)
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}
      description: Two-dimensional set of values, each represented by an array pi with length (dim)
    content.vb: Public Shared Function GetWeights2d(homoPts As List(Of List(Of Vector3))) As List(Of List(Of Double))
  overload: GeometrySharp.Core.LinearAlgebra.GetWeights2d*
  nameWithType.vb: LinearAlgebra.GetWeights2d(List(Of List(Of Vector3)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Core.LinearAlgebra.GetWeights2d(System.Collections.Generic.List(Of System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3)))
  name.vb: GetWeights2d(List(Of List(Of Vector3)))
- uid: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer(GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Core.LinearAlgebra.PointDehomogenizer(GeometrySharp.Geometry.Vector3)
  id: PointDehomogenizer(GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Core.LinearAlgebra
  langs:
  - csharp
  - vb
  name: PointDehomogenizer(Vector3)
  nameWithType: LinearAlgebra.PointDehomogenizer(Vector3)
  fullName: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer(GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: PointDehomogenizer
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 121
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nGets a dehomogenized point.\n"
  example: []
  syntax:
    content: public static Vector3 PointDehomogenizer(Vector3 homoPt)
    parameters:
    - id: homoPt
      type: GeometrySharp.Geometry.Vector3
      description: A point represented by an array (wi*pi, wi) with length (dim+1).
    return:
      type: GeometrySharp.Geometry.Vector3
      description: A dehomogenized point.
    content.vb: Public Shared Function PointDehomogenizer(homoPt As Vector3) As Vector3
  overload: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer1d(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  commentId: M:GeometrySharp.Core.LinearAlgebra.PointDehomogenizer1d(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  id: PointDehomogenizer1d(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  parent: GeometrySharp.Core.LinearAlgebra
  langs:
  - csharp
  - vb
  name: PointDehomogenizer1d(List<Vector3>)
  nameWithType: LinearAlgebra.PointDehomogenizer1d(List<Vector3>)
  fullName: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer1d(System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: PointDehomogenizer1d
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 140
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nGets a set of dehomogenized points.\n"
  example: []
  syntax:
    content: public static List<Vector3> PointDehomogenizer1d(List<Vector3> homoPts)
    parameters:
    - id: homoPts
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
      description: A collection of points represented by an array (wi*pi, wi) with length (dim+1).
    return:
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
      description: Set of dehomogenized points.
    content.vb: Public Shared Function PointDehomogenizer1d(homoPts As List(Of Vector3)) As List(Of Vector3)
  overload: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer1d*
  nameWithType.vb: LinearAlgebra.PointDehomogenizer1d(List(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer1d(System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3))
  name.vb: PointDehomogenizer1d(List(Of Vector3))
- uid: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}})
  commentId: M:GeometrySharp.Core.LinearAlgebra.PointDehomogenizer2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}})
  id: PointDehomogenizer2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}})
  parent: GeometrySharp.Core.LinearAlgebra
  langs:
  - csharp
  - vb
  name: PointDehomogenizer2d(List<List<Vector3>>)
  nameWithType: LinearAlgebra.PointDehomogenizer2d(List<List<Vector3>>)
  fullName: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer2d(System.Collections.Generic.List<System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: PointDehomogenizer2d
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 150
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nGets a two-dimensional set of dehomogenized points.\n"
  example: []
  syntax:
    content: public static List<List<Vector3>> PointDehomogenizer2d(List<List<Vector3>> homoPts)
    parameters:
    - id: homoPts
      type: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
      description: Two-dimensional set of points represented by an array (wi*pi, wi) with length (dim+1)
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
      description: Two-dimensional set of dehomogenized points.
    content.vb: Public Shared Function PointDehomogenizer2d(homoPts As List(Of List(Of Vector3))) As List(Of List(Of Vector3))
  overload: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer2d*
  nameWithType.vb: LinearAlgebra.PointDehomogenizer2d(List(Of List(Of Vector3)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer2d(System.Collections.Generic.List(Of System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3)))
  name.vb: PointDehomogenizer2d(List(Of List(Of Vector3)))
- uid: GeometrySharp.Core.LinearAlgebra.RationalPoints(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  commentId: M:GeometrySharp.Core.LinearAlgebra.RationalPoints(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  id: RationalPoints(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  parent: GeometrySharp.Core.LinearAlgebra
  langs:
  - csharp
  - vb
  name: RationalPoints(List<Vector3>)
  nameWithType: LinearAlgebra.RationalPoints(List<Vector3>)
  fullName: GeometrySharp.Core.LinearAlgebra.RationalPoints(System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: RationalPoints
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 160
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nObtain the point from homogeneous point without dehomogenization, assuming all are the same length.\n"
  example: []
  syntax:
    content: public static List<Vector3> RationalPoints(List<Vector3> homoPts)
    parameters:
    - id: homoPts
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
      description: Sets of points represented by an array (wi*pi, wi) with length (dim+1).
    return:
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
      description: Set of rational points.
    content.vb: Public Shared Function RationalPoints(homoPts As List(Of Vector3)) As List(Of Vector3)
  overload: GeometrySharp.Core.LinearAlgebra.RationalPoints*
  nameWithType.vb: LinearAlgebra.RationalPoints(List(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Core.LinearAlgebra.RationalPoints(System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3))
  name.vb: RationalPoints(List(Of Vector3))
- uid: GeometrySharp.Core.LinearAlgebra.Rational2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}})
  commentId: M:GeometrySharp.Core.LinearAlgebra.Rational2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}})
  id: Rational2d(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}})
  parent: GeometrySharp.Core.LinearAlgebra
  langs:
  - csharp
  - vb
  name: Rational2d(List<List<Vector3>>)
  nameWithType: LinearAlgebra.Rational2d(List<List<Vector3>>)
  fullName: GeometrySharp.Core.LinearAlgebra.Rational2d(System.Collections.Generic.List<System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Rational2d
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 171
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nObtain the point from a two-dimensional set of homogeneous points without dehomogenization, assuming all are the same length.\n"
  example: []
  syntax:
    content: public static List<List<Vector3>> Rational2d(List<List<Vector3>> homoLstPts)
    parameters:
    - id: homoLstPts
      type: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
      description: Two-dimensional set of rational points.
    content.vb: Public Shared Function Rational2d(homoLstPts As List(Of List(Of Vector3))) As List(Of List(Of Vector3))
  overload: GeometrySharp.Core.LinearAlgebra.Rational2d*
  nameWithType.vb: LinearAlgebra.Rational2d(List(Of List(Of Vector3)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Core.LinearAlgebra.Rational2d(System.Collections.Generic.List(Of System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3)))
  name.vb: Rational2d(List(Of List(Of Vector3)))
- uid: GeometrySharp.Core.LinearAlgebra.GetYawPitchRoll(GeometrySharp.Core.Transform)
  commentId: M:GeometrySharp.Core.LinearAlgebra.GetYawPitchRoll(GeometrySharp.Core.Transform)
  id: GetYawPitchRoll(GeometrySharp.Core.Transform)
  parent: GeometrySharp.Core.LinearAlgebra
  langs:
  - csharp
  - vb
  name: GetYawPitchRoll(Transform)
  nameWithType: LinearAlgebra.GetYawPitchRoll(Transform)
  fullName: GeometrySharp.Core.LinearAlgebra.GetYawPitchRoll(GeometrySharp.Core.Transform)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: GetYawPitchRoll
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 184
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nFind the Tait-Byran angles (also loosely called Euler angles) for a rotation transformation.\nyaw - angle (in radians) to rotate about the Z axis.\npitch -  angle(in radians) to rotate about the Y axis.\nroll - angle(in radians) to rotate about the X axis.\n"
  example: []
  syntax:
    content: public static Dictionary<string, double> GetYawPitchRoll(Transform transform)
    parameters:
    - id: transform
      type: GeometrySharp.Core.Transform
      description: Transformation to check.
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Double}
      description: A dictionary collecting the 3 values.
    content.vb: Public Shared Function GetYawPitchRoll(transform As Transform) As Dictionary(Of String, Double)
  overload: GeometrySharp.Core.LinearAlgebra.GetYawPitchRoll*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.LinearAlgebra.GetRotationAxis(GeometrySharp.Core.Transform)
  commentId: M:GeometrySharp.Core.LinearAlgebra.GetRotationAxis(GeometrySharp.Core.Transform)
  id: GetRotationAxis(GeometrySharp.Core.Transform)
  parent: GeometrySharp.Core.LinearAlgebra
  langs:
  - csharp
  - vb
  name: GetRotationAxis(Transform)
  nameWithType: LinearAlgebra.GetRotationAxis(Transform)
  fullName: GeometrySharp.Core.LinearAlgebra.GetRotationAxis(GeometrySharp.Core.Transform)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: GetRotationAxis
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 211
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nFind the rotation axis used in the transformation.\nhttps://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n"
  example: []
  syntax:
    content: public static Vector3 GetRotationAxis(Transform transform)
    parameters:
    - id: transform
      type: GeometrySharp.Core.Transform
      description: Transformation to check.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: The rotation axis used for the transformation.
    content.vb: Public Shared Function GetRotationAxis(transform As Transform) As Vector3
  overload: GeometrySharp.Core.LinearAlgebra.GetRotationAxis*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.LinearAlgebra.Orientation(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Core.LinearAlgebra.Orientation(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  id: Orientation(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Core.LinearAlgebra
  langs:
  - csharp
  - vb
  name: Orientation(Vector3, Vector3, Vector3)
  nameWithType: LinearAlgebra.Orientation(Vector3, Vector3, Vector3)
  fullName: GeometrySharp.Core.LinearAlgebra.Orientation(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Orientation
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 291
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nGet the orientation between tree points in the plane.\nThe order can be: collinear (result 0), clockwise (result 1), counterclockwise (result 2)\nhttps://www.geeksforgeeks.org/orientation-3-ordered-points/\n"
  example: []
  syntax:
    content: public static int Orientation(Vector3 pt1, Vector3 pt2, Vector3 pt3)
    parameters:
    - id: pt1
      type: GeometrySharp.Geometry.Vector3
      description: First point.
    - id: pt2
      type: GeometrySharp.Geometry.Vector3
      description: Second point.
    - id: pt3
      type: GeometrySharp.Geometry.Vector3
      description: Third point.
    return:
      type: System.Int32
      description: The result expressed as a value between 0 and 2.
    content.vb: Public Shared Function Orientation(pt1 As Vector3, pt2 As Vector3, pt3 As Vector3) As Integer
  overload: GeometrySharp.Core.LinearAlgebra.Orientation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.LinearAlgebra.GetBinomial(System.Int32,System.Int32)
  commentId: M:GeometrySharp.Core.LinearAlgebra.GetBinomial(System.Int32,System.Int32)
  id: GetBinomial(System.Int32,System.Int32)
  parent: GeometrySharp.Core.LinearAlgebra
  langs:
  - csharp
  - vb
  name: GetBinomial(Int32, Int32)
  nameWithType: LinearAlgebra.GetBinomial(Int32, Int32)
  fullName: GeometrySharp.Core.LinearAlgebra.GetBinomial(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/LinearAlgebra.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: GetBinomial
    path: ../GeometrySharp/Core/LinearAlgebra.cs
    startLine: 310
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nComputes the binomial coefficient (denoted by n choose k).\nPlease see the following website for details: http://mathworld.wolfram.com/BinomialCoefficient.html\n"
  example: []
  syntax:
    content: public static double GetBinomial(int n, int k)
    parameters:
    - id: n
      type: System.Int32
      description: Size of the set of distinct elements.
    - id: k
      type: System.Int32
      description: Size of the subsets.
    return:
      type: System.Double
      description: Combination of k and n
    content.vb: Public Shared Function GetBinomial(n As Integer, k As Integer) As Double
  overload: GeometrySharp.Core.LinearAlgebra.GetBinomial*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: GeometrySharp.Core
  commentId: N:GeometrySharp.Core
  name: GeometrySharp.Core
  nameWithType: GeometrySharp.Core
  fullName: GeometrySharp.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GeometrySharp.Core.LinearAlgebra.PointsHomogeniser*
  commentId: Overload:GeometrySharp.Core.LinearAlgebra.PointsHomogeniser
  name: PointsHomogeniser
  nameWithType: LinearAlgebra.PointsHomogeniser
  fullName: GeometrySharp.Core.LinearAlgebra.PointsHomogeniser
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  commentId: T:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector3>
  nameWithType: List<Vector3>
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: List(Of Vector3)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3)
  name.vb: List(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double>
  nameWithType: List<Double>
  fullName: System.Collections.Generic.List<System.Double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: GeometrySharp.Core.LinearAlgebra.PointsHomogeniser2d*
  commentId: Overload:GeometrySharp.Core.LinearAlgebra.PointsHomogeniser2d
  name: PointsHomogeniser2d
  nameWithType: LinearAlgebra.PointsHomogeniser2d
  fullName: GeometrySharp.Core.LinearAlgebra.PointsHomogeniser2d
- uid: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<List<Vector3>>
  nameWithType: List<List<Vector3>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>>
  nameWithType.vb: List(Of List(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3))
  name.vb: List(Of List(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<List<Double>>
  nameWithType: List<List<Double>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.List<System.Double>>
  nameWithType.vb: List(Of List(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.List(Of System.Double))
  name.vb: List(Of List(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Core.LinearAlgebra.GetWeights*
  commentId: Overload:GeometrySharp.Core.LinearAlgebra.GetWeights
  name: GetWeights
  nameWithType: LinearAlgebra.GetWeights
  fullName: GeometrySharp.Core.LinearAlgebra.GetWeights
- uid: GeometrySharp.Core.LinearAlgebra.GetWeights2d*
  commentId: Overload:GeometrySharp.Core.LinearAlgebra.GetWeights2d
  name: GetWeights2d
  nameWithType: LinearAlgebra.GetWeights2d
  fullName: GeometrySharp.Core.LinearAlgebra.GetWeights2d
- uid: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer*
  commentId: Overload:GeometrySharp.Core.LinearAlgebra.PointDehomogenizer
  name: PointDehomogenizer
  nameWithType: LinearAlgebra.PointDehomogenizer
  fullName: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer
- uid: GeometrySharp.Geometry.Vector3
  commentId: T:GeometrySharp.Geometry.Vector3
  parent: GeometrySharp.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: GeometrySharp.Geometry.Vector3
- uid: GeometrySharp.Geometry
  commentId: N:GeometrySharp.Geometry
  name: GeometrySharp.Geometry
  nameWithType: GeometrySharp.Geometry
  fullName: GeometrySharp.Geometry
- uid: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer1d*
  commentId: Overload:GeometrySharp.Core.LinearAlgebra.PointDehomogenizer1d
  name: PointDehomogenizer1d
  nameWithType: LinearAlgebra.PointDehomogenizer1d
  fullName: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer1d
- uid: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer2d*
  commentId: Overload:GeometrySharp.Core.LinearAlgebra.PointDehomogenizer2d
  name: PointDehomogenizer2d
  nameWithType: LinearAlgebra.PointDehomogenizer2d
  fullName: GeometrySharp.Core.LinearAlgebra.PointDehomogenizer2d
- uid: GeometrySharp.Core.LinearAlgebra.RationalPoints*
  commentId: Overload:GeometrySharp.Core.LinearAlgebra.RationalPoints
  name: RationalPoints
  nameWithType: LinearAlgebra.RationalPoints
  fullName: GeometrySharp.Core.LinearAlgebra.RationalPoints
- uid: GeometrySharp.Core.LinearAlgebra.Rational2d*
  commentId: Overload:GeometrySharp.Core.LinearAlgebra.Rational2d
  name: Rational2d
  nameWithType: LinearAlgebra.Rational2d
  fullName: GeometrySharp.Core.LinearAlgebra.Rational2d
- uid: GeometrySharp.Core.LinearAlgebra.GetYawPitchRoll*
  commentId: Overload:GeometrySharp.Core.LinearAlgebra.GetYawPitchRoll
  name: GetYawPitchRoll
  nameWithType: LinearAlgebra.GetYawPitchRoll
  fullName: GeometrySharp.Core.LinearAlgebra.GetYawPitchRoll
- uid: GeometrySharp.Core.Transform
  commentId: T:GeometrySharp.Core.Transform
  parent: GeometrySharp.Core
  name: Transform
  nameWithType: Transform
  fullName: GeometrySharp.Core.Transform
- uid: System.Collections.Generic.Dictionary{System.String,System.Double}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Double>
  nameWithType: Dictionary<String, Double>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Double>
  nameWithType.vb: Dictionary(Of String, Double)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Double)
  name.vb: Dictionary(Of String, Double)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Core.LinearAlgebra.GetRotationAxis*
  commentId: Overload:GeometrySharp.Core.LinearAlgebra.GetRotationAxis
  name: GetRotationAxis
  nameWithType: LinearAlgebra.GetRotationAxis
  fullName: GeometrySharp.Core.LinearAlgebra.GetRotationAxis
- uid: GeometrySharp.Core.LinearAlgebra.Orientation*
  commentId: Overload:GeometrySharp.Core.LinearAlgebra.Orientation
  name: Orientation
  nameWithType: LinearAlgebra.Orientation
  fullName: GeometrySharp.Core.LinearAlgebra.Orientation
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: GeometrySharp.Core.LinearAlgebra.GetBinomial*
  commentId: Overload:GeometrySharp.Core.LinearAlgebra.GetBinomial
  name: GetBinomial
  nameWithType: LinearAlgebra.GetBinomial
  fullName: GeometrySharp.Core.LinearAlgebra.GetBinomial
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
