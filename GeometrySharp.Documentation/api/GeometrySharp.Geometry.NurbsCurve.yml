### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Geometry.NurbsCurve
  commentId: T:GeometrySharp.Geometry.NurbsCurve
  id: NurbsCurve
  parent: GeometrySharp.Geometry
  children:
  - GeometrySharp.Geometry.NurbsCurve.#ctor
  - GeometrySharp.Geometry.NurbsCurve.#ctor(GeometrySharp.Geometry.NurbsCurve)
  - GeometrySharp.Geometry.NurbsCurve.#ctor(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Int32)
  - GeometrySharp.Geometry.NurbsCurve.#ctor(System.Int32,GeometrySharp.Core.Knot,System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Collections.Generic.List{System.Double})
  - GeometrySharp.Geometry.NurbsCurve.Clone
  - GeometrySharp.Geometry.NurbsCurve.ClosestPoint(GeometrySharp.Geometry.Vector3,System.Double@)
  - GeometrySharp.Geometry.NurbsCurve.ControlPoints
  - GeometrySharp.Geometry.NurbsCurve.Degree
  - GeometrySharp.Geometry.NurbsCurve.Derivatives(System.Double,System.Int32)
  - GeometrySharp.Geometry.NurbsCurve.DividedByCount(System.Int32)
  - GeometrySharp.Geometry.NurbsCurve.DividedByLength(System.Double)
  - GeometrySharp.Geometry.NurbsCurve.Domain
  - GeometrySharp.Geometry.NurbsCurve.Equals(GeometrySharp.Geometry.NurbsCurve)
  - GeometrySharp.Geometry.NurbsCurve.HomogenizedPoints
  - GeometrySharp.Geometry.NurbsCurve.Knots
  - GeometrySharp.Geometry.NurbsCurve.Length
  - GeometrySharp.Geometry.NurbsCurve.LengthParameter(System.Double)
  - GeometrySharp.Geometry.NurbsCurve.ParameterAtLength(System.Double,System.Double)
  - GeometrySharp.Geometry.NurbsCurve.PointAt(System.Double)
  - GeometrySharp.Geometry.NurbsCurve.Reverse
  - GeometrySharp.Geometry.NurbsCurve.Split(System.Double)
  - GeometrySharp.Geometry.NurbsCurve.Tangent(System.Double)
  - GeometrySharp.Geometry.NurbsCurve.ToString
  - GeometrySharp.Geometry.NurbsCurve.Transform(GeometrySharp.Core.Matrix)
  - GeometrySharp.Geometry.NurbsCurve.Weights
  langs:
  - csharp
  - vb
  name: NurbsCurve
  nameWithType: NurbsCurve
  fullName: GeometrySharp.Geometry.NurbsCurve
  type: Class
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: NurbsCurve
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 15
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nA NURBS curve - this class represents the base class of many curve types and provides tools for analysis and evaluation.\nThis object is deliberately constrained to be immutable. The methods deliberately return copies.\n/// "
  example: []
  syntax:
    content: 'public class NurbsCurve : IEquatable<NurbsCurve>'
    content.vb: >-
      Public Class NurbsCurve

          Implements IEquatable(Of NurbsCurve)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{GeometrySharp.Geometry.NurbsCurve}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Geometry.NurbsCurve.#ctor
  commentId: M:GeometrySharp.Geometry.NurbsCurve.#ctor
  id: '#ctor'
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: NurbsCurve()
  nameWithType: NurbsCurve.NurbsCurve()
  fullName: GeometrySharp.Geometry.NurbsCurve.NurbsCurve()
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 20
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nBasic constructor.\n"
  example: []
  syntax:
    content: public NurbsCurve()
    content.vb: Public Sub New
  overload: GeometrySharp.Geometry.NurbsCurve.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.#ctor(System.Int32,GeometrySharp.Core.Knot,System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Collections.Generic.List{System.Double})
  commentId: M:GeometrySharp.Geometry.NurbsCurve.#ctor(System.Int32,GeometrySharp.Core.Knot,System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Collections.Generic.List{System.Double})
  id: '#ctor(System.Int32,GeometrySharp.Core.Knot,System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Collections.Generic.List{System.Double})'
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: NurbsCurve(Int32, Knot, List<Vector3>, List<Double>)
  nameWithType: NurbsCurve.NurbsCurve(Int32, Knot, List<Vector3>, List<Double>)
  fullName: GeometrySharp.Geometry.NurbsCurve.NurbsCurve(System.Int32, GeometrySharp.Core.Knot, System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>, System.Collections.Generic.List<System.Double>)
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 31
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCreates a Nurbs curve object.\n"
  example: []
  syntax:
    content: public NurbsCurve(int degree, Knot knots, List<Vector3> controlPoints, List<double> weights = null)
    parameters:
    - id: degree
      type: System.Int32
      description: Curve degree.
    - id: knots
      type: GeometrySharp.Core.Knot
      description: Knot defining the curve.
    - id: controlPoints
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
      description: Control points, as a collection of Vector3.
    - id: weights
      type: System.Collections.Generic.List{System.Double}
      description: Weight values, as a collection of doubles.
    content.vb: Public Sub New(degree As Integer, knots As Knot, controlPoints As List(Of Vector3), weights As List(Of Double) = Nothing)
  overload: GeometrySharp.Geometry.NurbsCurve.#ctor*
  nameWithType.vb: NurbsCurve.NurbsCurve(Int32, Knot, List(Of Vector3), List(Of Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GeometrySharp.Geometry.NurbsCurve.NurbsCurve(System.Int32, GeometrySharp.Core.Knot, System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3), System.Collections.Generic.List(Of System.Double))
  name.vb: NurbsCurve(Int32, Knot, List(Of Vector3), List(Of Double))
- uid: GeometrySharp.Geometry.NurbsCurve.#ctor(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Int32)
  commentId: M:GeometrySharp.Geometry.NurbsCurve.#ctor(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Int32)
  id: '#ctor(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Int32)'
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: NurbsCurve(List<Vector3>, Int32)
  nameWithType: NurbsCurve.NurbsCurve(List<Vector3>, Int32)
  fullName: GeometrySharp.Geometry.NurbsCurve.NurbsCurve(System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>, System.Int32)
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 52
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCreates a Nurbs curve object.\n"
  example: []
  syntax:
    content: public NurbsCurve(List<Vector3> controlPoints, int degree)
    parameters:
    - id: controlPoints
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
      description: Control points, as a collection of Vector3.
    - id: degree
      type: System.Int32
      description: Curve degree.
    content.vb: Public Sub New(controlPoints As List(Of Vector3), degree As Integer)
  overload: GeometrySharp.Geometry.NurbsCurve.#ctor*
  nameWithType.vb: NurbsCurve.NurbsCurve(List(Of Vector3), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GeometrySharp.Geometry.NurbsCurve.NurbsCurve(System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3), System.Int32)
  name.vb: NurbsCurve(List(Of Vector3), Int32)
- uid: GeometrySharp.Geometry.NurbsCurve.#ctor(GeometrySharp.Geometry.NurbsCurve)
  commentId: M:GeometrySharp.Geometry.NurbsCurve.#ctor(GeometrySharp.Geometry.NurbsCurve)
  id: '#ctor(GeometrySharp.Geometry.NurbsCurve)'
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: NurbsCurve(NurbsCurve)
  nameWithType: NurbsCurve.NurbsCurve(NurbsCurve)
  fullName: GeometrySharp.Geometry.NurbsCurve.NurbsCurve(GeometrySharp.Geometry.NurbsCurve)
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 61
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nConstruct a NurbsCurve by a NurbsCurve object.\n"
  example: []
  syntax:
    content: public NurbsCurve(NurbsCurve curve)
    parameters:
    - id: curve
      type: GeometrySharp.Geometry.NurbsCurve
      description: The curve object
    content.vb: Public Sub New(curve As NurbsCurve)
  overload: GeometrySharp.Geometry.NurbsCurve.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.Degree
  commentId: P:GeometrySharp.Geometry.NurbsCurve.Degree
  id: Degree
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: Degree
  nameWithType: NurbsCurve.Degree
  fullName: GeometrySharp.Geometry.NurbsCurve.Degree
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Degree
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 72
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nInteger degree of curve.\n"
  example: []
  syntax:
    content: public int Degree { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Degree As Integer
  overload: GeometrySharp.Geometry.NurbsCurve.Degree*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsCurve.ControlPoints
  commentId: P:GeometrySharp.Geometry.NurbsCurve.ControlPoints
  id: ControlPoints
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: ControlPoints
  nameWithType: NurbsCurve.ControlPoints
  fullName: GeometrySharp.Geometry.NurbsCurve.ControlPoints
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ControlPoints
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 77
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\n2d list of control points, where each control point is a list like (x,y,z) of length (dim).\n"
  example: []
  syntax:
    content: public List<Vector3> ControlPoints { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
    content.vb: Public ReadOnly Property ControlPoints As List(Of Vector3)
  overload: GeometrySharp.Geometry.NurbsCurve.ControlPoints*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsCurve.HomogenizedPoints
  commentId: P:GeometrySharp.Geometry.NurbsCurve.HomogenizedPoints
  id: HomogenizedPoints
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: HomogenizedPoints
  nameWithType: NurbsCurve.HomogenizedPoints
  fullName: GeometrySharp.Geometry.NurbsCurve.HomogenizedPoints
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: HomogenizedPoints
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 82
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\n2d list of points, where represented a set (wi*pi, wi) with length (dim+1).\n"
  example: []
  syntax:
    content: public List<Vector3> HomogenizedPoints { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
    content.vb: Public ReadOnly Property HomogenizedPoints As List(Of Vector3)
  overload: GeometrySharp.Geometry.NurbsCurve.HomogenizedPoints*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsCurve.Weights
  commentId: P:GeometrySharp.Geometry.NurbsCurve.Weights
  id: Weights
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: Weights
  nameWithType: NurbsCurve.Weights
  fullName: GeometrySharp.Geometry.NurbsCurve.Weights
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Weights
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 87
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nList of weight values.\n"
  example: []
  syntax:
    content: public List<double> Weights { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Double}
    content.vb: Public ReadOnly Property Weights As List(Of Double)
  overload: GeometrySharp.Geometry.NurbsCurve.Weights*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsCurve.Knots
  commentId: P:GeometrySharp.Geometry.NurbsCurve.Knots
  id: Knots
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: Knots
  nameWithType: NurbsCurve.Knots
  fullName: GeometrySharp.Geometry.NurbsCurve.Knots
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Knots
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 92
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nList of non-decreasing knot values.\n"
  example: []
  syntax:
    content: public Knot Knots { get; }
    parameters: []
    return:
      type: GeometrySharp.Core.Knot
    content.vb: Public ReadOnly Property Knots As Knot
  overload: GeometrySharp.Geometry.NurbsCurve.Knots*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsCurve.Clone
  commentId: M:GeometrySharp.Geometry.NurbsCurve.Clone
  id: Clone
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: NurbsCurve.Clone()
  fullName: GeometrySharp.Geometry.NurbsCurve.Clone()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Clone
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 98
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nObtain a copy of the NurbsCurve.\n"
  example: []
  syntax:
    content: public NurbsCurve Clone()
    return:
      type: GeometrySharp.Geometry.NurbsCurve
      description: The copied curve.
    content.vb: Public Function Clone As NurbsCurve
  overload: GeometrySharp.Geometry.NurbsCurve.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.Domain
  commentId: M:GeometrySharp.Geometry.NurbsCurve.Domain
  id: Domain
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: Domain()
  nameWithType: NurbsCurve.Domain()
  fullName: GeometrySharp.Geometry.NurbsCurve.Domain()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Domain
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 104
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nDetermine the valid domain of the curve.\n"
  example: []
  syntax:
    content: public Interval Domain()
    return:
      type: GeometrySharp.Core.Interval
      description: representing the high and end point of the domain of the curve.
    content.vb: Public Function Domain As Interval
  overload: GeometrySharp.Geometry.NurbsCurve.Domain*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.Transform(GeometrySharp.Core.Matrix)
  commentId: M:GeometrySharp.Geometry.NurbsCurve.Transform(GeometrySharp.Core.Matrix)
  id: Transform(GeometrySharp.Core.Matrix)
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: Transform(Matrix)
  nameWithType: NurbsCurve.Transform(Matrix)
  fullName: GeometrySharp.Geometry.NurbsCurve.Transform(GeometrySharp.Core.Matrix)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Transform
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 112
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nTransform a curve with the given matrix.\n"
  example: []
  syntax:
    content: public NurbsCurve Transform(Matrix mat)
    parameters:
    - id: mat
      type: GeometrySharp.Core.Matrix
      description: 4d set representing the transform.
    return:
      type: GeometrySharp.Geometry.NurbsCurve
      description: A new NurbsCurve transformed.
    content.vb: Public Function Transform(mat As Matrix) As NurbsCurve
  overload: GeometrySharp.Geometry.NurbsCurve.Transform*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.Split(System.Double)
  commentId: M:GeometrySharp.Geometry.NurbsCurve.Split(System.Double)
  id: Split(System.Double)
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: Split(Double)
  nameWithType: NurbsCurve.Split(Double)
  fullName: GeometrySharp.Geometry.NurbsCurve.Split(System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Split
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 120
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nSplit the curve at the give parameter.\n"
  example: []
  syntax:
    content: public List<NurbsCurve> Split(double t)
    parameters:
    - id: t
      type: System.Double
      description: The parameter at which to split the curve
    return:
      type: System.Collections.Generic.List{GeometrySharp.Geometry.NurbsCurve}
      description: Two curves - one at the lower end of the parameter range and one at the higher end.
    content.vb: Public Function Split(t As Double) As List(Of NurbsCurve)
  overload: GeometrySharp.Geometry.NurbsCurve.Split*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.PointAt(System.Double)
  commentId: M:GeometrySharp.Geometry.NurbsCurve.PointAt(System.Double)
  id: PointAt(System.Double)
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: PointAt(Double)
  nameWithType: NurbsCurve.PointAt(Double)
  fullName: GeometrySharp.Geometry.NurbsCurve.PointAt(System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: PointAt
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 128
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nSample a point at the given parameter.\n"
  example: []
  syntax:
    content: public Vector3 PointAt(double t)
    parameters:
    - id: t
      type: System.Double
      description: The parameter to sample the curve.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: A point at the given parameter.
    content.vb: Public Function PointAt(t As Double) As Vector3
  overload: GeometrySharp.Geometry.NurbsCurve.PointAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.Tangent(System.Double)
  commentId: M:GeometrySharp.Geometry.NurbsCurve.Tangent(System.Double)
  id: Tangent(System.Double)
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: Tangent(Double)
  nameWithType: NurbsCurve.Tangent(Double)
  fullName: GeometrySharp.Geometry.NurbsCurve.Tangent(System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Tangent
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 136
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nObtain the curve tangent at the given parameter.\n"
  example: []
  syntax:
    content: public Vector3 Tangent(double t)
    parameters:
    - id: t
      type: System.Double
      description: The parameter to sample the curve.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: The vector at the given parameter.
    content.vb: Public Function Tangent(t As Double) As Vector3
  overload: GeometrySharp.Geometry.NurbsCurve.Tangent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.Length
  commentId: M:GeometrySharp.Geometry.NurbsCurve.Length
  id: Length
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: NurbsCurve.Length()
  fullName: GeometrySharp.Geometry.NurbsCurve.Length()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Length
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 143
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nDetermine the arc length of the curve.\n"
  example: []
  syntax:
    content: public double Length()
    return:
      type: System.Double
      description: The length of the curve.
    content.vb: Public Function Length As Double
  overload: GeometrySharp.Geometry.NurbsCurve.Length*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.Derivatives(System.Double,System.Int32)
  commentId: M:GeometrySharp.Geometry.NurbsCurve.Derivatives(System.Double,System.Int32)
  id: Derivatives(System.Double,System.Int32)
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: Derivatives(Double, Int32)
  nameWithType: NurbsCurve.Derivatives(Double, Int32)
  fullName: GeometrySharp.Geometry.NurbsCurve.Derivatives(System.Double, System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Derivatives
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 153
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGet the derivatives at a given parameter.\n"
  example: []
  syntax:
    content: public List<Vector3> Derivatives(double parameter, int numberDerivs = 1)
    parameters:
    - id: parameter
      type: System.Double
      description: The parameter to sample the curve.
    - id: numberDerivs
      type: System.Int32
      description: The number of derivatives to obtain.
    return:
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
      description: A point represented by an array of length (dim).
    content.vb: Public Function Derivatives(parameter As Double, numberDerivs As Integer = 1) As List(Of Vector3)
  overload: GeometrySharp.Geometry.NurbsCurve.Derivatives*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.Reverse
  commentId: M:GeometrySharp.Geometry.NurbsCurve.Reverse
  id: Reverse
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: Reverse()
  nameWithType: NurbsCurve.Reverse()
  fullName: GeometrySharp.Geometry.NurbsCurve.Reverse()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Reverse
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 161
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nReverse the parametrization of the curve.\n"
  example: []
  syntax:
    content: public NurbsCurve Reverse()
    return:
      type: GeometrySharp.Geometry.NurbsCurve
      description: A reversed curve.
    content.vb: Public Function Reverse As NurbsCurve
  overload: GeometrySharp.Geometry.NurbsCurve.Reverse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.DividedByCount(System.Int32)
  commentId: M:GeometrySharp.Geometry.NurbsCurve.DividedByCount(System.Int32)
  id: DividedByCount(System.Int32)
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: DividedByCount(Int32)
  nameWithType: NurbsCurve.DividedByCount(Int32)
  fullName: GeometrySharp.Geometry.NurbsCurve.DividedByCount(System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: DividedByCount
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 169
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nDivide a curve into equal length segments.\n"
  example: []
  syntax:
    content: public (List<double> tValues, List<double> lengths) DividedByCount(int divisions)
    parameters:
    - id: divisions
      type: System.Int32
      description: Number of divisions of the curve.
    return:
      type: System.ValueTuple{System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double}}
      description: A tuple define the t values where the curve is divided and the lengths between each division.
    content.vb: Public Function DividedByCount(divisions As Integer) As(tValues As List(Of Double), lengths As List(Of Double))
  overload: GeometrySharp.Geometry.NurbsCurve.DividedByCount*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.DividedByLength(System.Double)
  commentId: M:GeometrySharp.Geometry.NurbsCurve.DividedByLength(System.Double)
  id: DividedByLength(System.Double)
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: DividedByLength(Double)
  nameWithType: NurbsCurve.DividedByLength(Double)
  fullName: GeometrySharp.Geometry.NurbsCurve.DividedByLength(System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: DividedByLength
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 178
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nDivide a curve into segments with a preset length.\n"
  example: []
  syntax:
    content: public (List<double> tValues, List<double> lengths) DividedByLength(double length)
    parameters:
    - id: length
      type: System.Double
    return:
      type: System.ValueTuple{System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double}}
      description: A tuple define the t values where the curve is divided and the lengths between each division.
    content.vb: Public Function DividedByLength(length As Double) As(tValues As List(Of Double), lengths As List(Of Double))
  overload: GeometrySharp.Geometry.NurbsCurve.DividedByLength*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.ClosestPoint(GeometrySharp.Geometry.Vector3,System.Double@)
  commentId: M:GeometrySharp.Geometry.NurbsCurve.ClosestPoint(GeometrySharp.Geometry.Vector3,System.Double@)
  id: ClosestPoint(GeometrySharp.Geometry.Vector3,System.Double@)
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: ClosestPoint(Vector3, out Double)
  nameWithType: NurbsCurve.ClosestPoint(Vector3, out Double)
  fullName: GeometrySharp.Geometry.NurbsCurve.ClosestPoint(GeometrySharp.Geometry.Vector3, out System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ClosestPoint
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 188
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCompute the closest point on the curve to the given point.\n"
  example: []
  syntax:
    content: public Vector3 ClosestPoint(Vector3 point, out double t)
    parameters:
    - id: point
      type: GeometrySharp.Geometry.Vector3
      description: Point to analyze.
    - id: t
      type: System.Double
      description: Parameter of local closest point.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: The closest point on the curve.
    content.vb: Public Function ClosestPoint(point As Vector3, ByRef t As Double) As Vector3
  overload: GeometrySharp.Geometry.NurbsCurve.ClosestPoint*
  nameWithType.vb: NurbsCurve.ClosestPoint(Vector3, ByRef Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GeometrySharp.Geometry.NurbsCurve.ClosestPoint(GeometrySharp.Geometry.Vector3, ByRef System.Double)
  name.vb: ClosestPoint(Vector3, ByRef Double)
- uid: GeometrySharp.Geometry.NurbsCurve.ParameterAtLength(System.Double,System.Double)
  commentId: M:GeometrySharp.Geometry.NurbsCurve.ParameterAtLength(System.Double,System.Double)
  id: ParameterAtLength(System.Double,System.Double)
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: ParameterAtLength(Double, Double)
  nameWithType: NurbsCurve.ParameterAtLength(Double, Double)
  fullName: GeometrySharp.Geometry.NurbsCurve.ParameterAtLength(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ParameterAtLength
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 197
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets the parameter along the curve which coincides with a given length along the curve.\n"
  example: []
  syntax:
    content: public double ParameterAtLength(double segmentLength, double tolerance = -1)
    parameters:
    - id: segmentLength
      type: System.Double
      description: Length of segment to measure. Must be less than or equal to the length of the curve.
    - id: tolerance
      type: System.Double
      description: If set less or equal 0.0, the tolerance used is 1e-10.
    return:
      type: System.Double
      description: ''
    content.vb: Public Function ParameterAtLength(segmentLength As Double, tolerance As Double = -1) As Double
  overload: GeometrySharp.Geometry.NurbsCurve.ParameterAtLength*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.LengthParameter(System.Double)
  commentId: M:GeometrySharp.Geometry.NurbsCurve.LengthParameter(System.Double)
  id: LengthParameter(System.Double)
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: LengthParameter(Double)
  nameWithType: NurbsCurve.LengthParameter(Double)
  fullName: GeometrySharp.Geometry.NurbsCurve.LengthParameter(System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: LengthParameter
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 205
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGet the length curve which coincides with a given parameter t.\n"
  example: []
  syntax:
    content: public double LengthParameter(double t)
    parameters:
    - id: t
      type: System.Double
      description: The parameter at which to evaluate.
    return:
      type: System.Double
      description: The length of the curve at the give parameter t.
    content.vb: Public Function LengthParameter(t As Double) As Double
  overload: GeometrySharp.Geometry.NurbsCurve.LengthParameter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.Equals(GeometrySharp.Geometry.NurbsCurve)
  commentId: M:GeometrySharp.Geometry.NurbsCurve.Equals(GeometrySharp.Geometry.NurbsCurve)
  id: Equals(GeometrySharp.Geometry.NurbsCurve)
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: Equals(NurbsCurve)
  nameWithType: NurbsCurve.Equals(NurbsCurve)
  fullName: GeometrySharp.Geometry.NurbsCurve.Equals(GeometrySharp.Geometry.NurbsCurve)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Equals
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 213
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCompare if two NurbsCurves are the same.\nTwo NurbsCurve are equal when the have same degree, same control points order and dimension, and same knots.\n"
  example: []
  syntax:
    content: public bool Equals(NurbsCurve other)
    parameters:
    - id: other
      type: GeometrySharp.Geometry.NurbsCurve
      description: ''
    return:
      type: System.Boolean
      description: Return true if the NurbsCurves are equal.
    content.vb: Public Function Equals(other As NurbsCurve) As Boolean
  overload: GeometrySharp.Geometry.NurbsCurve.Equals*
  implements:
  - System.IEquatable{GeometrySharp.Geometry.NurbsCurve}.Equals(GeometrySharp.Geometry.NurbsCurve)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsCurve.ToString
  commentId: M:GeometrySharp.Geometry.NurbsCurve.ToString
  id: ToString
  parent: GeometrySharp.Geometry.NurbsCurve
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: NurbsCurve.ToString()
  fullName: GeometrySharp.Geometry.NurbsCurve.ToString()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsCurve.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ToString
    path: ../GeometrySharp/Geometry/NurbsCurve.cs
    startLine: 233
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nImplement the override method to string.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The representation of a NurbsCurve in string.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: GeometrySharp.Geometry.NurbsCurve.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: GeometrySharp.Geometry
  commentId: N:GeometrySharp.Geometry
  name: GeometrySharp.Geometry
  nameWithType: GeometrySharp.Geometry
  fullName: GeometrySharp.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{GeometrySharp.Geometry.NurbsCurve}
  commentId: T:System.IEquatable{GeometrySharp.Geometry.NurbsCurve}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<NurbsCurve>
  nameWithType: IEquatable<NurbsCurve>
  fullName: System.IEquatable<GeometrySharp.Geometry.NurbsCurve>
  nameWithType.vb: IEquatable(Of NurbsCurve)
  fullName.vb: System.IEquatable(Of GeometrySharp.Geometry.NurbsCurve)
  name.vb: IEquatable(Of NurbsCurve)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.NurbsCurve
    name: NurbsCurve
    nameWithType: NurbsCurve
    fullName: GeometrySharp.Geometry.NurbsCurve
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.NurbsCurve
    name: NurbsCurve
    nameWithType: NurbsCurve
    fullName: GeometrySharp.Geometry.NurbsCurve
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.NurbsCurve.#ctor*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.#ctor
  name: NurbsCurve
  nameWithType: NurbsCurve.NurbsCurve
  fullName: GeometrySharp.Geometry.NurbsCurve.NurbsCurve
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: GeometrySharp.Core.Knot
  commentId: T:GeometrySharp.Core.Knot
  parent: GeometrySharp.Core
  name: Knot
  nameWithType: Knot
  fullName: GeometrySharp.Core.Knot
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  commentId: T:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector3>
  nameWithType: List<Vector3>
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: List(Of Vector3)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3)
  name.vb: List(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double>
  nameWithType: List<Double>
  fullName: System.Collections.Generic.List<System.Double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Core
  commentId: N:GeometrySharp.Core
  name: GeometrySharp.Core
  nameWithType: GeometrySharp.Core
  fullName: GeometrySharp.Core
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: GeometrySharp.Geometry.NurbsCurve
  commentId: T:GeometrySharp.Geometry.NurbsCurve
  parent: GeometrySharp.Geometry
  name: NurbsCurve
  nameWithType: NurbsCurve
  fullName: GeometrySharp.Geometry.NurbsCurve
- uid: GeometrySharp.Geometry.NurbsCurve.Degree*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.Degree
  name: Degree
  nameWithType: NurbsCurve.Degree
  fullName: GeometrySharp.Geometry.NurbsCurve.Degree
- uid: GeometrySharp.Geometry.NurbsCurve.ControlPoints*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.ControlPoints
  name: ControlPoints
  nameWithType: NurbsCurve.ControlPoints
  fullName: GeometrySharp.Geometry.NurbsCurve.ControlPoints
- uid: GeometrySharp.Geometry.NurbsCurve.HomogenizedPoints*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.HomogenizedPoints
  name: HomogenizedPoints
  nameWithType: NurbsCurve.HomogenizedPoints
  fullName: GeometrySharp.Geometry.NurbsCurve.HomogenizedPoints
- uid: GeometrySharp.Geometry.NurbsCurve.Weights*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.Weights
  name: Weights
  nameWithType: NurbsCurve.Weights
  fullName: GeometrySharp.Geometry.NurbsCurve.Weights
- uid: GeometrySharp.Geometry.NurbsCurve.Knots*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.Knots
  name: Knots
  nameWithType: NurbsCurve.Knots
  fullName: GeometrySharp.Geometry.NurbsCurve.Knots
- uid: GeometrySharp.Geometry.NurbsCurve.Clone*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.Clone
  name: Clone
  nameWithType: NurbsCurve.Clone
  fullName: GeometrySharp.Geometry.NurbsCurve.Clone
- uid: GeometrySharp.Geometry.NurbsCurve.Domain*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.Domain
  name: Domain
  nameWithType: NurbsCurve.Domain
  fullName: GeometrySharp.Geometry.NurbsCurve.Domain
- uid: GeometrySharp.Core.Interval
  commentId: T:GeometrySharp.Core.Interval
  parent: GeometrySharp.Core
  name: Interval
  nameWithType: Interval
  fullName: GeometrySharp.Core.Interval
- uid: GeometrySharp.Geometry.NurbsCurve.Transform*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.Transform
  name: Transform
  nameWithType: NurbsCurve.Transform
  fullName: GeometrySharp.Geometry.NurbsCurve.Transform
- uid: GeometrySharp.Core.Matrix
  commentId: T:GeometrySharp.Core.Matrix
  parent: GeometrySharp.Core
  name: Matrix
  nameWithType: Matrix
  fullName: GeometrySharp.Core.Matrix
- uid: GeometrySharp.Geometry.NurbsCurve.Split*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.Split
  name: Split
  nameWithType: NurbsCurve.Split
  fullName: GeometrySharp.Geometry.NurbsCurve.Split
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.NurbsCurve}
  commentId: T:System.Collections.Generic.List{GeometrySharp.Geometry.NurbsCurve}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<NurbsCurve>
  nameWithType: List<NurbsCurve>
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.NurbsCurve>
  nameWithType.vb: List(Of NurbsCurve)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.NurbsCurve)
  name.vb: List(Of NurbsCurve)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.NurbsCurve
    name: NurbsCurve
    nameWithType: NurbsCurve
    fullName: GeometrySharp.Geometry.NurbsCurve
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.NurbsCurve
    name: NurbsCurve
    nameWithType: NurbsCurve
    fullName: GeometrySharp.Geometry.NurbsCurve
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.NurbsCurve.PointAt*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.PointAt
  name: PointAt
  nameWithType: NurbsCurve.PointAt
  fullName: GeometrySharp.Geometry.NurbsCurve.PointAt
- uid: GeometrySharp.Geometry.Vector3
  commentId: T:GeometrySharp.Geometry.Vector3
  parent: GeometrySharp.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: GeometrySharp.Geometry.Vector3
- uid: GeometrySharp.Geometry.NurbsCurve.Tangent*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.Tangent
  name: Tangent
  nameWithType: NurbsCurve.Tangent
  fullName: GeometrySharp.Geometry.NurbsCurve.Tangent
- uid: GeometrySharp.Geometry.NurbsCurve.Length*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.Length
  name: Length
  nameWithType: NurbsCurve.Length
  fullName: GeometrySharp.Geometry.NurbsCurve.Length
- uid: GeometrySharp.Geometry.NurbsCurve.Derivatives*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.Derivatives
  name: Derivatives
  nameWithType: NurbsCurve.Derivatives
  fullName: GeometrySharp.Geometry.NurbsCurve.Derivatives
- uid: GeometrySharp.Geometry.NurbsCurve.Reverse*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.Reverse
  name: Reverse
  nameWithType: NurbsCurve.Reverse
  fullName: GeometrySharp.Geometry.NurbsCurve.Reverse
- uid: GeometrySharp.Geometry.NurbsCurve.DividedByCount*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.DividedByCount
  name: DividedByCount
  nameWithType: NurbsCurve.DividedByCount
  fullName: GeometrySharp.Geometry.NurbsCurve.DividedByCount
- uid: System.ValueTuple{System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double}}
  commentId: T:System.ValueTuple{System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double}}
  parent: System
  isExternal: true
  name: ValueTuple<List<Double>, List<Double>>
  nameWithType: ValueTuple<List<Double>, List<Double>>
  fullName: System.ValueTuple<System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<System.Double>>
  nameWithType.vb: ValueTuple(Of List(Of Double), List(Of Double))
  fullName.vb: System.ValueTuple(Of System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of System.Double))
  name.vb: ValueTuple(Of List(Of Double), List(Of Double))
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.NurbsCurve.DividedByLength*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.DividedByLength
  name: DividedByLength
  nameWithType: NurbsCurve.DividedByLength
  fullName: GeometrySharp.Geometry.NurbsCurve.DividedByLength
- uid: GeometrySharp.Geometry.NurbsCurve.ClosestPoint*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.ClosestPoint
  name: ClosestPoint
  nameWithType: NurbsCurve.ClosestPoint
  fullName: GeometrySharp.Geometry.NurbsCurve.ClosestPoint
- uid: GeometrySharp.Geometry.NurbsCurve.ParameterAtLength*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.ParameterAtLength
  name: ParameterAtLength
  nameWithType: NurbsCurve.ParameterAtLength
  fullName: GeometrySharp.Geometry.NurbsCurve.ParameterAtLength
- uid: GeometrySharp.Geometry.NurbsCurve.LengthParameter*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.LengthParameter
  name: LengthParameter
  nameWithType: NurbsCurve.LengthParameter
  fullName: GeometrySharp.Geometry.NurbsCurve.LengthParameter
- uid: GeometrySharp.Geometry.NurbsCurve.Equals*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.Equals
  name: Equals
  nameWithType: NurbsCurve.Equals
  fullName: GeometrySharp.Geometry.NurbsCurve.Equals
- uid: System.IEquatable{GeometrySharp.Geometry.NurbsCurve}.Equals(GeometrySharp.Geometry.NurbsCurve)
  commentId: M:System.IEquatable{GeometrySharp.Geometry.NurbsCurve}.Equals(GeometrySharp.Geometry.NurbsCurve)
  parent: System.IEquatable{GeometrySharp.Geometry.NurbsCurve}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(NurbsCurve)
  nameWithType: IEquatable<NurbsCurve>.Equals(NurbsCurve)
  fullName: System.IEquatable<GeometrySharp.Geometry.NurbsCurve>.Equals(GeometrySharp.Geometry.NurbsCurve)
  nameWithType.vb: IEquatable(Of NurbsCurve).Equals(NurbsCurve)
  fullName.vb: System.IEquatable(Of GeometrySharp.Geometry.NurbsCurve).Equals(GeometrySharp.Geometry.NurbsCurve)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<NurbsCurve>.Equals
    fullName: System.IEquatable<GeometrySharp.Geometry.NurbsCurve>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.NurbsCurve
    name: NurbsCurve
    nameWithType: NurbsCurve
    fullName: GeometrySharp.Geometry.NurbsCurve
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of NurbsCurve).Equals
    fullName: System.IEquatable(Of GeometrySharp.Geometry.NurbsCurve).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.NurbsCurve
    name: NurbsCurve
    nameWithType: NurbsCurve
    fullName: GeometrySharp.Geometry.NurbsCurve
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.NurbsCurve.ToString*
  commentId: Overload:GeometrySharp.Geometry.NurbsCurve.ToString
  name: ToString
  nameWithType: NurbsCurve.ToString
  fullName: GeometrySharp.Geometry.NurbsCurve.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
