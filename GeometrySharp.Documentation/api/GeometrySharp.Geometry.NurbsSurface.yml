### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Geometry.NurbsSurface
  commentId: T:GeometrySharp.Geometry.NurbsSurface
  id: NurbsSurface
  parent: GeometrySharp.Geometry
  children:
  - GeometrySharp.Geometry.NurbsSurface.#ctor(GeometrySharp.Geometry.NurbsSurface)
  - GeometrySharp.Geometry.NurbsSurface.#ctor(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}},System.Int32,System.Int32)
  - GeometrySharp.Geometry.NurbsSurface.#ctor(System.Int32,System.Int32,GeometrySharp.Core.Knot,GeometrySharp.Core.Knot,System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}},System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})
  - GeometrySharp.Geometry.NurbsSurface.ByFourPoints(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.NurbsSurface.Clone
  - GeometrySharp.Geometry.NurbsSurface.ControlPoints
  - GeometrySharp.Geometry.NurbsSurface.DegreeU
  - GeometrySharp.Geometry.NurbsSurface.DegreeV
  - GeometrySharp.Geometry.NurbsSurface.DomainU
  - GeometrySharp.Geometry.NurbsSurface.DomainV
  - GeometrySharp.Geometry.NurbsSurface.Equals(GeometrySharp.Geometry.NurbsSurface)
  - GeometrySharp.Geometry.NurbsSurface.FromJson(System.String)
  - GeometrySharp.Geometry.NurbsSurface.HomogenizedPoints
  - GeometrySharp.Geometry.NurbsSurface.KnotsU
  - GeometrySharp.Geometry.NurbsSurface.KnotsV
  - GeometrySharp.Geometry.NurbsSurface.Normal(System.Double,System.Double)
  - GeometrySharp.Geometry.NurbsSurface.TangentAtU(System.Double,System.Double)
  - GeometrySharp.Geometry.NurbsSurface.TangentAtV(System.Double,System.Double)
  - GeometrySharp.Geometry.NurbsSurface.ToJson
  - GeometrySharp.Geometry.NurbsSurface.Weights
  langs:
  - csharp
  - vb
  name: NurbsSurface
  nameWithType: NurbsSurface
  fullName: GeometrySharp.Geometry.NurbsSurface
  type: Class
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: NurbsSurface
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 17
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nA simple data structure representing a NURBS surface.\nNurbsSurfaceData does no checks for legality. You can use <see cref=\"!:GeometrySharp.Evaluation.Check\"></see> for that.\n"
  example: []
  syntax:
    content: 'public class NurbsSurface : Serializable<NurbsSurface>, IEquatable<NurbsSurface>'
    content.vb: >-
      Public Class NurbsSurface

          Inherits Serializable(Of NurbsSurface)

          Implements IEquatable(Of NurbsSurface)
  inheritance:
  - System.Object
  - GeometrySharp.Core.Serializable{GeometrySharp.Geometry.NurbsSurface}
  implements:
  - System.IEquatable{GeometrySharp.Geometry.NurbsSurface}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Geometry.NurbsSurface.#ctor(System.Int32,System.Int32,GeometrySharp.Core.Knot,GeometrySharp.Core.Knot,System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}},System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})
  commentId: M:GeometrySharp.Geometry.NurbsSurface.#ctor(System.Int32,System.Int32,GeometrySharp.Core.Knot,GeometrySharp.Core.Knot,System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}},System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})
  id: '#ctor(System.Int32,System.Int32,GeometrySharp.Core.Knot,GeometrySharp.Core.Knot,System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}},System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})'
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: NurbsSurface(Int32, Int32, Knot, Knot, List<List<Vector3>>, List<List<Double>>)
  nameWithType: NurbsSurface.NurbsSurface(Int32, Int32, Knot, Knot, List<List<Vector3>>, List<List<Double>>)
  fullName: GeometrySharp.Geometry.NurbsSurface.NurbsSurface(System.Int32, System.Int32, GeometrySharp.Core.Knot, GeometrySharp.Core.Knot, System.Collections.Generic.List<System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>>, System.Collections.Generic.List<System.Collections.Generic.List<System.Double>>)
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 29
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nConstruct a NurbsSurface by degree, knots, control points, weights\n"
  example: []
  syntax:
    content: public NurbsSurface(int degreeU, int degreeV, Knot knotsU, Knot knotsV, List<List<Vector3>> controlPoints, List<List<double>> weights = null)
    parameters:
    - id: degreeU
      type: System.Int32
      description: The degree in the U direction
    - id: degreeV
      type: System.Int32
      description: The degree in the V direction
    - id: knotsU
      type: GeometrySharp.Core.Knot
      description: The knot array in the U direction
    - id: knotsV
      type: GeometrySharp.Core.Knot
      description: The knot array in the V direction
    - id: controlPoints
      type: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
      description: Two dimensional array of points
    - id: weights
      type: System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}
      description: Two dimensional array of weight values
    content.vb: Public Sub New(degreeU As Integer, degreeV As Integer, knotsU As Knot, knotsV As Knot, controlPoints As List(Of List(Of Vector3)), weights As List(Of List(Of Double)) = Nothing)
  overload: GeometrySharp.Geometry.NurbsSurface.#ctor*
  nameWithType.vb: NurbsSurface.NurbsSurface(Int32, Int32, Knot, Knot, List(Of List(Of Vector3)), List(Of List(Of Double)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GeometrySharp.Geometry.NurbsSurface.NurbsSurface(System.Int32, System.Int32, GeometrySharp.Core.Knot, GeometrySharp.Core.Knot, System.Collections.Generic.List(Of System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3)), System.Collections.Generic.List(Of System.Collections.Generic.List(Of System.Double)))
  name.vb: NurbsSurface(Int32, Int32, Knot, Knot, List(Of List(Of Vector3)), List(Of List(Of Double)))
- uid: GeometrySharp.Geometry.NurbsSurface.#ctor(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}},System.Int32,System.Int32)
  commentId: M:GeometrySharp.Geometry.NurbsSurface.#ctor(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}},System.Int32,System.Int32)
  id: '#ctor(System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}},System.Int32,System.Int32)'
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: NurbsSurface(List<List<Vector3>>, Int32, Int32)
  nameWithType: NurbsSurface.NurbsSurface(List<List<Vector3>>, Int32, Int32)
  fullName: GeometrySharp.Geometry.NurbsSurface.NurbsSurface(System.Collections.Generic.List<System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>>, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 61
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCreates a Nurbs surface object.\n"
  example: []
  syntax:
    content: public NurbsSurface(List<List<Vector3>> controlPoints, int degreeU, int degreeV)
    parameters:
    - id: controlPoints
      type: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
      description: Control points, as a 2d collection of Vector3.
    - id: degreeU
      type: System.Int32
      description: Surface degree u
    - id: degreeV
      type: System.Int32
      description: Surface degree v
    content.vb: Public Sub New(controlPoints As List(Of List(Of Vector3)), degreeU As Integer, degreeV As Integer)
  overload: GeometrySharp.Geometry.NurbsSurface.#ctor*
  nameWithType.vb: NurbsSurface.NurbsSurface(List(Of List(Of Vector3)), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GeometrySharp.Geometry.NurbsSurface.NurbsSurface(System.Collections.Generic.List(Of System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3)), System.Int32, System.Int32)
  name.vb: NurbsSurface(List(Of List(Of Vector3)), Int32, Int32)
- uid: GeometrySharp.Geometry.NurbsSurface.#ctor(GeometrySharp.Geometry.NurbsSurface)
  commentId: M:GeometrySharp.Geometry.NurbsSurface.#ctor(GeometrySharp.Geometry.NurbsSurface)
  id: '#ctor(GeometrySharp.Geometry.NurbsSurface)'
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: NurbsSurface(NurbsSurface)
  nameWithType: NurbsSurface.NurbsSurface(NurbsSurface)
  fullName: GeometrySharp.Geometry.NurbsSurface.NurbsSurface(GeometrySharp.Geometry.NurbsSurface)
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 70
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nConstruct a NurbsSurface by a NurbsSurface object.\n"
  example: []
  syntax:
    content: public NurbsSurface(NurbsSurface surface)
    parameters:
    - id: surface
      type: GeometrySharp.Geometry.NurbsSurface
    content.vb: Public Sub New(surface As NurbsSurface)
  overload: GeometrySharp.Geometry.NurbsSurface.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsSurface.ByFourPoints(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.NurbsSurface.ByFourPoints(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  id: ByFourPoints(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: ByFourPoints(Vector3, Vector3, Vector3, Vector3)
  nameWithType: NurbsSurface.ByFourPoints(Vector3, Vector3, Vector3, Vector3)
  fullName: GeometrySharp.Geometry.NurbsSurface.ByFourPoints(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ByFourPoints
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 87
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nConstruct a NurbsSurface from four perimeter points in counter-clockwise order\n"
  example: []
  syntax:
    content: public static NurbsSurface ByFourPoints(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4)
    parameters:
    - id: p1
      type: GeometrySharp.Geometry.Vector3
      description: The first point
    - id: p2
      type: GeometrySharp.Geometry.Vector3
      description: The second point
    - id: p3
      type: GeometrySharp.Geometry.Vector3
      description: The third point
    - id: p4
      type: GeometrySharp.Geometry.Vector3
      description: The fourth point
    return:
      type: GeometrySharp.Geometry.NurbsSurface
    content.vb: Public Shared Function ByFourPoints(p1 As Vector3, p2 As Vector3, p3 As Vector3, p4 As Vector3) As NurbsSurface
  overload: GeometrySharp.Geometry.NurbsSurface.ByFourPoints*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.NurbsSurface.Normal(System.Double,System.Double)
  commentId: M:GeometrySharp.Geometry.NurbsSurface.Normal(System.Double,System.Double)
  id: Normal(System.Double,System.Double)
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: Normal(Double, Double)
  nameWithType: NurbsSurface.Normal(Double, Double)
  fullName: GeometrySharp.Geometry.NurbsSurface.Normal(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Normal
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 119
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nObtain the surface normal at the given u and v parameters\n"
  example: []
  syntax:
    content: public Vector3 Normal(double u, double v)
    parameters:
    - id: u
      type: System.Double
      description: u parameter
    - id: v
      type: System.Double
      description: v parameter
    return:
      type: GeometrySharp.Geometry.Vector3
      description: ''
    content.vb: Public Function Normal(u As Double, v As Double) As Vector3
  overload: GeometrySharp.Geometry.NurbsSurface.Normal*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsSurface.TangentAtU(System.Double,System.Double)
  commentId: M:GeometrySharp.Geometry.NurbsSurface.TangentAtU(System.Double,System.Double)
  id: TangentAtU(System.Double,System.Double)
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: TangentAtU(Double, Double)
  nameWithType: NurbsSurface.TangentAtU(Double, Double)
  fullName: GeometrySharp.Geometry.NurbsSurface.TangentAtU(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: TangentAtU
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 127
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nObtain the surface tangent at the given u and v parameters in the u direction\n"
  example: []
  syntax:
    content: public Vector3 TangentAtU(double u, double v)
    parameters:
    - id: u
      type: System.Double
      description: u parameter
    - id: v
      type: System.Double
      description: v parameter
    return:
      type: GeometrySharp.Geometry.Vector3
      description: ''
    content.vb: Public Function TangentAtU(u As Double, v As Double) As Vector3
  overload: GeometrySharp.Geometry.NurbsSurface.TangentAtU*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsSurface.TangentAtV(System.Double,System.Double)
  commentId: M:GeometrySharp.Geometry.NurbsSurface.TangentAtV(System.Double,System.Double)
  id: TangentAtV(System.Double,System.Double)
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: TangentAtV(Double, Double)
  nameWithType: NurbsSurface.TangentAtV(Double, Double)
  fullName: GeometrySharp.Geometry.NurbsSurface.TangentAtV(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: TangentAtV
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 135
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nObtain the surface tangent at the given u and v parameters in the v direction\n"
  example: []
  syntax:
    content: public Vector3 TangentAtV(double u, double v)
    parameters:
    - id: u
      type: System.Double
      description: u parameter
    - id: v
      type: System.Double
      description: v parameter
    return:
      type: GeometrySharp.Geometry.Vector3
      description: ''
    content.vb: Public Function TangentAtV(u As Double, v As Double) As Vector3
  overload: GeometrySharp.Geometry.NurbsSurface.TangentAtV*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsSurface.DegreeU
  commentId: P:GeometrySharp.Geometry.NurbsSurface.DegreeU
  id: DegreeU
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: DegreeU
  nameWithType: NurbsSurface.DegreeU
  fullName: GeometrySharp.Geometry.NurbsSurface.DegreeU
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: DegreeU
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 140
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nInteger degree of surface in u direction.\n"
  example: []
  syntax:
    content: public int DegreeU { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property DegreeU As Integer
  overload: GeometrySharp.Geometry.NurbsSurface.DegreeU*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsSurface.DegreeV
  commentId: P:GeometrySharp.Geometry.NurbsSurface.DegreeV
  id: DegreeV
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: DegreeV
  nameWithType: NurbsSurface.DegreeV
  fullName: GeometrySharp.Geometry.NurbsSurface.DegreeV
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: DegreeV
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 144
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nInteger degree of surface in v direction.\n"
  example: []
  syntax:
    content: public int DegreeV { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property DegreeV As Integer
  overload: GeometrySharp.Geometry.NurbsSurface.DegreeV*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsSurface.KnotsU
  commentId: P:GeometrySharp.Geometry.NurbsSurface.KnotsU
  id: KnotsU
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: KnotsU
  nameWithType: NurbsSurface.KnotsU
  fullName: GeometrySharp.Geometry.NurbsSurface.KnotsU
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: KnotsU
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 148
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nList of non-decreasing knot values in u direction.\n"
  example: []
  syntax:
    content: public Knot KnotsU { get; }
    parameters: []
    return:
      type: GeometrySharp.Core.Knot
    content.vb: Public ReadOnly Property KnotsU As Knot
  overload: GeometrySharp.Geometry.NurbsSurface.KnotsU*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsSurface.KnotsV
  commentId: P:GeometrySharp.Geometry.NurbsSurface.KnotsV
  id: KnotsV
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: KnotsV
  nameWithType: NurbsSurface.KnotsV
  fullName: GeometrySharp.Geometry.NurbsSurface.KnotsV
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: KnotsV
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 152
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nList of non-decreasing knot values in v direction.\n"
  example: []
  syntax:
    content: public Knot KnotsV { get; }
    parameters: []
    return:
      type: GeometrySharp.Core.Knot
    content.vb: Public ReadOnly Property KnotsV As Knot
  overload: GeometrySharp.Geometry.NurbsSurface.KnotsV*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsSurface.DomainU
  commentId: P:GeometrySharp.Geometry.NurbsSurface.DomainU
  id: DomainU
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: DomainU
  nameWithType: NurbsSurface.DomainU
  fullName: GeometrySharp.Geometry.NurbsSurface.DomainU
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: DomainU
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 157
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nDetermine the valid u domain of the surface.\n"
  example: []
  syntax:
    content: public Interval DomainU { get; }
    parameters: []
    return:
      type: GeometrySharp.Core.Interval
    content.vb: Public ReadOnly Property DomainU As Interval
  overload: GeometrySharp.Geometry.NurbsSurface.DomainU*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsSurface.DomainV
  commentId: P:GeometrySharp.Geometry.NurbsSurface.DomainV
  id: DomainV
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: DomainV
  nameWithType: NurbsSurface.DomainV
  fullName: GeometrySharp.Geometry.NurbsSurface.DomainV
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: DomainV
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 162
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nDetermine the valid v domain of the surface.\n"
  example: []
  syntax:
    content: public Interval DomainV { get; }
    parameters: []
    return:
      type: GeometrySharp.Core.Interval
    content.vb: Public ReadOnly Property DomainV As Interval
  overload: GeometrySharp.Geometry.NurbsSurface.DomainV*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsSurface.Clone
  commentId: M:GeometrySharp.Geometry.NurbsSurface.Clone
  id: Clone
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: NurbsSurface.Clone()
  fullName: GeometrySharp.Geometry.NurbsSurface.Clone()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Clone
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 168
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nObtain a copy of the NurbsSurface.\n"
  example: []
  syntax:
    content: public NurbsSurface Clone()
    return:
      type: GeometrySharp.Geometry.NurbsSurface
      description: The copied curve.
    content.vb: Public Function Clone As NurbsSurface
  overload: GeometrySharp.Geometry.NurbsSurface.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsSurface.ControlPoints
  commentId: P:GeometrySharp.Geometry.NurbsSurface.ControlPoints
  id: ControlPoints
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: ControlPoints
  nameWithType: NurbsSurface.ControlPoints
  fullName: GeometrySharp.Geometry.NurbsSurface.ControlPoints
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ControlPoints
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 175
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\n2d list of control points, the vertical direction (u) increases from top to bottom, the v direction from left to right,\nand where each control point is an list of length (dim).\n"
  example: []
  syntax:
    content: public List<List<Vector3>> ControlPoints { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
    content.vb: Public ReadOnly Property ControlPoints As List(Of List(Of Vector3))
  overload: GeometrySharp.Geometry.NurbsSurface.ControlPoints*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsSurface.Weights
  commentId: P:GeometrySharp.Geometry.NurbsSurface.Weights
  id: Weights
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: Weights
  nameWithType: NurbsSurface.Weights
  fullName: GeometrySharp.Geometry.NurbsSurface.Weights
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Weights
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 179
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nTwo dimensional array of weight values\n"
  example: []
  syntax:
    content: public List<List<double>> Weights { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}
    content.vb: Public ReadOnly Property Weights As List(Of List(Of Double))
  overload: GeometrySharp.Geometry.NurbsSurface.Weights*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsSurface.HomogenizedPoints
  commentId: P:GeometrySharp.Geometry.NurbsSurface.HomogenizedPoints
  id: HomogenizedPoints
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: HomogenizedPoints
  nameWithType: NurbsSurface.HomogenizedPoints
  fullName: GeometrySharp.Geometry.NurbsSurface.HomogenizedPoints
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: HomogenizedPoints
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 180
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  syntax:
    content: public List<List<Vector3>> HomogenizedPoints { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
    content.vb: Public ReadOnly Property HomogenizedPoints As List(Of List(Of Vector3))
  overload: GeometrySharp.Geometry.NurbsSurface.HomogenizedPoints*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.NurbsSurface.Equals(GeometrySharp.Geometry.NurbsSurface)
  commentId: M:GeometrySharp.Geometry.NurbsSurface.Equals(GeometrySharp.Geometry.NurbsSurface)
  id: Equals(GeometrySharp.Geometry.NurbsSurface)
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: Equals(NurbsSurface)
  nameWithType: NurbsSurface.Equals(NurbsSurface)
  fullName: GeometrySharp.Geometry.NurbsSurface.Equals(GeometrySharp.Geometry.NurbsSurface)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Equals
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 182
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  syntax:
    content: public bool Equals(NurbsSurface other)
    parameters:
    - id: other
      type: GeometrySharp.Geometry.NurbsSurface
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As NurbsSurface) As Boolean
  overload: GeometrySharp.Geometry.NurbsSurface.Equals*
  implements:
  - System.IEquatable{GeometrySharp.Geometry.NurbsSurface}.Equals(GeometrySharp.Geometry.NurbsSurface)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.NurbsSurface.FromJson(System.String)
  commentId: M:GeometrySharp.Geometry.NurbsSurface.FromJson(System.String)
  id: FromJson(System.String)
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: FromJson(String)
  nameWithType: NurbsSurface.FromJson(String)
  fullName: GeometrySharp.Geometry.NurbsSurface.FromJson(System.String)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: FromJson
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 195
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  syntax:
    content: public override NurbsSurface FromJson(string s)
    parameters:
    - id: s
      type: System.String
    return:
      type: GeometrySharp.Geometry.NurbsSurface
    content.vb: Public Overrides Function FromJson(s As String) As NurbsSurface
  overridden: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.NurbsSurface}.FromJson(System.String)
  overload: GeometrySharp.Geometry.NurbsSurface.FromJson*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: GeometrySharp.Geometry.NurbsSurface.ToJson
  commentId: M:GeometrySharp.Geometry.NurbsSurface.ToJson
  id: ToJson
  parent: GeometrySharp.Geometry.NurbsSurface
  langs:
  - csharp
  - vb
  name: ToJson()
  nameWithType: NurbsSurface.ToJson()
  fullName: GeometrySharp.Geometry.NurbsSurface.ToJson()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/NurbsSurface.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ToJson
    path: ../GeometrySharp/Geometry/NurbsSurface.cs
    startLine: 201
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nSerialize a nurbs surface to JSON\n"
  example: []
  syntax:
    content: public override string ToJson()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToJson As String
  overridden: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.NurbsSurface}.ToJson
  overload: GeometrySharp.Geometry.NurbsSurface.ToJson*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: GeometrySharp.Geometry
  commentId: N:GeometrySharp.Geometry
  name: GeometrySharp.Geometry
  nameWithType: GeometrySharp.Geometry
  fullName: GeometrySharp.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.NurbsSurface}
  commentId: T:GeometrySharp.Core.Serializable{GeometrySharp.Geometry.NurbsSurface}
  parent: GeometrySharp.Core
  definition: GeometrySharp.Core.Serializable`1
  name: Serializable<NurbsSurface>
  nameWithType: Serializable<NurbsSurface>
  fullName: GeometrySharp.Core.Serializable<GeometrySharp.Geometry.NurbsSurface>
  nameWithType.vb: Serializable(Of NurbsSurface)
  fullName.vb: GeometrySharp.Core.Serializable(Of GeometrySharp.Geometry.NurbsSurface)
  name.vb: Serializable(Of NurbsSurface)
  spec.csharp:
  - uid: GeometrySharp.Core.Serializable`1
    name: Serializable
    nameWithType: Serializable
    fullName: GeometrySharp.Core.Serializable
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.NurbsSurface
    name: NurbsSurface
    nameWithType: NurbsSurface
    fullName: GeometrySharp.Geometry.NurbsSurface
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GeometrySharp.Core.Serializable`1
    name: Serializable
    nameWithType: Serializable
    fullName: GeometrySharp.Core.Serializable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.NurbsSurface
    name: NurbsSurface
    nameWithType: NurbsSurface
    fullName: GeometrySharp.Geometry.NurbsSurface
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{GeometrySharp.Geometry.NurbsSurface}
  commentId: T:System.IEquatable{GeometrySharp.Geometry.NurbsSurface}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<NurbsSurface>
  nameWithType: IEquatable<NurbsSurface>
  fullName: System.IEquatable<GeometrySharp.Geometry.NurbsSurface>
  nameWithType.vb: IEquatable(Of NurbsSurface)
  fullName.vb: System.IEquatable(Of GeometrySharp.Geometry.NurbsSurface)
  name.vb: IEquatable(Of NurbsSurface)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.NurbsSurface
    name: NurbsSurface
    nameWithType: NurbsSurface
    fullName: GeometrySharp.Geometry.NurbsSurface
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.NurbsSurface
    name: NurbsSurface
    nameWithType: NurbsSurface
    fullName: GeometrySharp.Geometry.NurbsSurface
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GeometrySharp.Core.Serializable`1
  commentId: T:GeometrySharp.Core.Serializable`1
  name: Serializable<T>
  nameWithType: Serializable<T>
  fullName: GeometrySharp.Core.Serializable<T>
  nameWithType.vb: Serializable(Of T)
  fullName.vb: GeometrySharp.Core.Serializable(Of T)
  name.vb: Serializable(Of T)
  spec.csharp:
  - uid: GeometrySharp.Core.Serializable`1
    name: Serializable
    nameWithType: Serializable
    fullName: GeometrySharp.Core.Serializable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GeometrySharp.Core.Serializable`1
    name: Serializable
    nameWithType: Serializable
    fullName: GeometrySharp.Core.Serializable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Core
  commentId: N:GeometrySharp.Core
  name: GeometrySharp.Core
  nameWithType: GeometrySharp.Core
  fullName: GeometrySharp.Core
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.NurbsSurface.#ctor*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.#ctor
  name: NurbsSurface
  nameWithType: NurbsSurface.NurbsSurface
  fullName: GeometrySharp.Geometry.NurbsSurface.NurbsSurface
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: GeometrySharp.Core.Knot
  commentId: T:GeometrySharp.Core.Knot
  parent: GeometrySharp.Core
  name: Knot
  nameWithType: Knot
  fullName: GeometrySharp.Core.Knot
- uid: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<List<Vector3>>
  nameWithType: List<List<Vector3>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>>
  nameWithType.vb: List(Of List(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3))
  name.vb: List(Of List(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<List<Double>>
  nameWithType: List<List<Double>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.List<System.Double>>
  nameWithType.vb: List(Of List(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.List(Of System.Double))
  name.vb: List(Of List(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: GeometrySharp.Geometry.NurbsSurface
  commentId: T:GeometrySharp.Geometry.NurbsSurface
  parent: GeometrySharp.Geometry
  name: NurbsSurface
  nameWithType: NurbsSurface
  fullName: GeometrySharp.Geometry.NurbsSurface
- uid: GeometrySharp.Geometry.NurbsSurface.ByFourPoints*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.ByFourPoints
  name: ByFourPoints
  nameWithType: NurbsSurface.ByFourPoints
  fullName: GeometrySharp.Geometry.NurbsSurface.ByFourPoints
- uid: GeometrySharp.Geometry.Vector3
  commentId: T:GeometrySharp.Geometry.Vector3
  parent: GeometrySharp.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: GeometrySharp.Geometry.Vector3
- uid: GeometrySharp.Geometry.NurbsSurface.Normal*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.Normal
  name: Normal
  nameWithType: NurbsSurface.Normal
  fullName: GeometrySharp.Geometry.NurbsSurface.Normal
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: GeometrySharp.Geometry.NurbsSurface.TangentAtU*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.TangentAtU
  name: TangentAtU
  nameWithType: NurbsSurface.TangentAtU
  fullName: GeometrySharp.Geometry.NurbsSurface.TangentAtU
- uid: GeometrySharp.Geometry.NurbsSurface.TangentAtV*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.TangentAtV
  name: TangentAtV
  nameWithType: NurbsSurface.TangentAtV
  fullName: GeometrySharp.Geometry.NurbsSurface.TangentAtV
- uid: GeometrySharp.Geometry.NurbsSurface.DegreeU*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.DegreeU
  name: DegreeU
  nameWithType: NurbsSurface.DegreeU
  fullName: GeometrySharp.Geometry.NurbsSurface.DegreeU
- uid: GeometrySharp.Geometry.NurbsSurface.DegreeV*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.DegreeV
  name: DegreeV
  nameWithType: NurbsSurface.DegreeV
  fullName: GeometrySharp.Geometry.NurbsSurface.DegreeV
- uid: GeometrySharp.Geometry.NurbsSurface.KnotsU*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.KnotsU
  name: KnotsU
  nameWithType: NurbsSurface.KnotsU
  fullName: GeometrySharp.Geometry.NurbsSurface.KnotsU
- uid: GeometrySharp.Geometry.NurbsSurface.KnotsV*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.KnotsV
  name: KnotsV
  nameWithType: NurbsSurface.KnotsV
  fullName: GeometrySharp.Geometry.NurbsSurface.KnotsV
- uid: GeometrySharp.Geometry.NurbsSurface.DomainU*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.DomainU
  name: DomainU
  nameWithType: NurbsSurface.DomainU
  fullName: GeometrySharp.Geometry.NurbsSurface.DomainU
- uid: GeometrySharp.Core.Interval
  commentId: T:GeometrySharp.Core.Interval
  parent: GeometrySharp.Core
  name: Interval
  nameWithType: Interval
  fullName: GeometrySharp.Core.Interval
- uid: GeometrySharp.Geometry.NurbsSurface.DomainV*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.DomainV
  name: DomainV
  nameWithType: NurbsSurface.DomainV
  fullName: GeometrySharp.Geometry.NurbsSurface.DomainV
- uid: GeometrySharp.Geometry.NurbsSurface.Clone*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.Clone
  name: Clone
  nameWithType: NurbsSurface.Clone
  fullName: GeometrySharp.Geometry.NurbsSurface.Clone
- uid: GeometrySharp.Geometry.NurbsSurface.ControlPoints*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.ControlPoints
  name: ControlPoints
  nameWithType: NurbsSurface.ControlPoints
  fullName: GeometrySharp.Geometry.NurbsSurface.ControlPoints
- uid: GeometrySharp.Geometry.NurbsSurface.Weights*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.Weights
  name: Weights
  nameWithType: NurbsSurface.Weights
  fullName: GeometrySharp.Geometry.NurbsSurface.Weights
- uid: GeometrySharp.Geometry.NurbsSurface.HomogenizedPoints*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.HomogenizedPoints
  name: HomogenizedPoints
  nameWithType: NurbsSurface.HomogenizedPoints
  fullName: GeometrySharp.Geometry.NurbsSurface.HomogenizedPoints
- uid: GeometrySharp.Geometry.NurbsSurface.Equals*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.Equals
  name: Equals
  nameWithType: NurbsSurface.Equals
  fullName: GeometrySharp.Geometry.NurbsSurface.Equals
- uid: System.IEquatable{GeometrySharp.Geometry.NurbsSurface}.Equals(GeometrySharp.Geometry.NurbsSurface)
  commentId: M:System.IEquatable{GeometrySharp.Geometry.NurbsSurface}.Equals(GeometrySharp.Geometry.NurbsSurface)
  parent: System.IEquatable{GeometrySharp.Geometry.NurbsSurface}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(NurbsSurface)
  nameWithType: IEquatable<NurbsSurface>.Equals(NurbsSurface)
  fullName: System.IEquatable<GeometrySharp.Geometry.NurbsSurface>.Equals(GeometrySharp.Geometry.NurbsSurface)
  nameWithType.vb: IEquatable(Of NurbsSurface).Equals(NurbsSurface)
  fullName.vb: System.IEquatable(Of GeometrySharp.Geometry.NurbsSurface).Equals(GeometrySharp.Geometry.NurbsSurface)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<NurbsSurface>.Equals
    fullName: System.IEquatable<GeometrySharp.Geometry.NurbsSurface>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.NurbsSurface
    name: NurbsSurface
    nameWithType: NurbsSurface
    fullName: GeometrySharp.Geometry.NurbsSurface
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of NurbsSurface).Equals
    fullName: System.IEquatable(Of GeometrySharp.Geometry.NurbsSurface).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.NurbsSurface
    name: NurbsSurface
    nameWithType: NurbsSurface
    fullName: GeometrySharp.Geometry.NurbsSurface
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.NurbsSurface}.FromJson(System.String)
  commentId: M:GeometrySharp.Core.Serializable{GeometrySharp.Geometry.NurbsSurface}.FromJson(System.String)
  parent: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.NurbsSurface}
  definition: GeometrySharp.Core.Serializable`1.FromJson(System.String)
  name: FromJson(String)
  nameWithType: Serializable<NurbsSurface>.FromJson(String)
  fullName: GeometrySharp.Core.Serializable<GeometrySharp.Geometry.NurbsSurface>.FromJson(System.String)
  nameWithType.vb: Serializable(Of NurbsSurface).FromJson(String)
  fullName.vb: GeometrySharp.Core.Serializable(Of GeometrySharp.Geometry.NurbsSurface).FromJson(System.String)
  spec.csharp:
  - uid: GeometrySharp.Core.Serializable`1.FromJson(System.String)
    name: FromJson
    nameWithType: Serializable<NurbsSurface>.FromJson
    fullName: GeometrySharp.Core.Serializable<GeometrySharp.Geometry.NurbsSurface>.FromJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.Core.Serializable`1.FromJson(System.String)
    name: FromJson
    nameWithType: Serializable(Of NurbsSurface).FromJson
    fullName: GeometrySharp.Core.Serializable(Of GeometrySharp.Geometry.NurbsSurface).FromJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.NurbsSurface.FromJson*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.FromJson
  name: FromJson
  nameWithType: NurbsSurface.FromJson
  fullName: GeometrySharp.Geometry.NurbsSurface.FromJson
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: GeometrySharp.Core.Serializable`1.FromJson(System.String)
  commentId: M:GeometrySharp.Core.Serializable`1.FromJson(System.String)
  isExternal: true
  name: FromJson(String)
  nameWithType: Serializable<T>.FromJson(String)
  fullName: GeometrySharp.Core.Serializable<T>.FromJson(System.String)
  nameWithType.vb: Serializable(Of T).FromJson(String)
  fullName.vb: GeometrySharp.Core.Serializable(Of T).FromJson(System.String)
  spec.csharp:
  - uid: GeometrySharp.Core.Serializable`1.FromJson(System.String)
    name: FromJson
    nameWithType: Serializable<T>.FromJson
    fullName: GeometrySharp.Core.Serializable<T>.FromJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.Core.Serializable`1.FromJson(System.String)
    name: FromJson
    nameWithType: Serializable(Of T).FromJson
    fullName: GeometrySharp.Core.Serializable(Of T).FromJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.NurbsSurface}.ToJson
  commentId: M:GeometrySharp.Core.Serializable{GeometrySharp.Geometry.NurbsSurface}.ToJson
  parent: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.NurbsSurface}
  definition: GeometrySharp.Core.Serializable`1.ToJson
  name: ToJson()
  nameWithType: Serializable<NurbsSurface>.ToJson()
  fullName: GeometrySharp.Core.Serializable<GeometrySharp.Geometry.NurbsSurface>.ToJson()
  nameWithType.vb: Serializable(Of NurbsSurface).ToJson()
  fullName.vb: GeometrySharp.Core.Serializable(Of GeometrySharp.Geometry.NurbsSurface).ToJson()
  spec.csharp:
  - uid: GeometrySharp.Core.Serializable`1.ToJson
    name: ToJson
    nameWithType: Serializable<NurbsSurface>.ToJson
    fullName: GeometrySharp.Core.Serializable<GeometrySharp.Geometry.NurbsSurface>.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.Core.Serializable`1.ToJson
    name: ToJson
    nameWithType: Serializable(Of NurbsSurface).ToJson
    fullName: GeometrySharp.Core.Serializable(Of GeometrySharp.Geometry.NurbsSurface).ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.NurbsSurface.ToJson*
  commentId: Overload:GeometrySharp.Geometry.NurbsSurface.ToJson
  name: ToJson
  nameWithType: NurbsSurface.ToJson
  fullName: GeometrySharp.Geometry.NurbsSurface.ToJson
- uid: GeometrySharp.Core.Serializable`1.ToJson
  commentId: M:GeometrySharp.Core.Serializable`1.ToJson
  name: ToJson()
  nameWithType: Serializable<T>.ToJson()
  fullName: GeometrySharp.Core.Serializable<T>.ToJson()
  nameWithType.vb: Serializable(Of T).ToJson()
  fullName.vb: GeometrySharp.Core.Serializable(Of T).ToJson()
  spec.csharp:
  - uid: GeometrySharp.Core.Serializable`1.ToJson
    name: ToJson
    nameWithType: Serializable<T>.ToJson
    fullName: GeometrySharp.Core.Serializable<T>.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.Core.Serializable`1.ToJson
    name: ToJson
    nameWithType: Serializable(Of T).ToJson
    fullName: GeometrySharp.Core.Serializable(Of T).ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
