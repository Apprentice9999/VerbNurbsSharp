### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Geometry.Vector3
  commentId: T:GeometrySharp.Geometry.Vector3
  id: Vector3
  parent: GeometrySharp.Geometry
  children:
  - GeometrySharp.Geometry.Vector3.#ctor
  - GeometrySharp.Geometry.Vector3.#ctor(System.Collections.Generic.IEnumerable{System.Double})
  - GeometrySharp.Geometry.Vector3.AddMulMutate(GeometrySharp.Geometry.Vector3,System.Double,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Vector3.Amplify(System.Double)
  - GeometrySharp.Geometry.Vector3.AngleBetween(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Vector3.Cross(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Vector3.DistanceTo(GeometrySharp.Geometry.Line)
  - GeometrySharp.Geometry.Vector3.DistanceTo(GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Vector3.Dot(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Vector3.Equals(GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Vector3.Equals(System.Object)
  - GeometrySharp.Geometry.Vector3.IsEqualRoundingDecimal(GeometrySharp.Geometry.Vector3,System.Int32)
  - GeometrySharp.Geometry.Vector3.IsParallelTo(GeometrySharp.Geometry.Vector3,System.Double)
  - GeometrySharp.Geometry.Vector3.IsPerpendicularTo(GeometrySharp.Geometry.Vector3,System.Double)
  - GeometrySharp.Geometry.Vector3.IsPointOnPlane(GeometrySharp.Geometry.Plane,System.Double)
  - GeometrySharp.Geometry.Vector3.isUnitize
  - GeometrySharp.Geometry.Vector3.IsValid
  - GeometrySharp.Geometry.Vector3.IsZero
  - GeometrySharp.Geometry.Vector3.Length
  - GeometrySharp.Geometry.Vector3.Lerp(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  - GeometrySharp.Geometry.Vector3.op_Addition(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Vector3.op_Division(GeometrySharp.Geometry.Vector3,System.Double)
  - GeometrySharp.Geometry.Vector3.op_Equality(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Vector3.op_Inequality(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Vector3.op_Multiply(GeometrySharp.Geometry.Vector3,GeometrySharp.Core.Matrix)
  - GeometrySharp.Geometry.Vector3.op_Multiply(GeometrySharp.Geometry.Vector3,GeometrySharp.Core.Transform)
  - GeometrySharp.Geometry.Vector3.op_Multiply(GeometrySharp.Geometry.Vector3,System.Double)
  - GeometrySharp.Geometry.Vector3.op_Subtraction(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Vector3.PerpendicularTo(GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Vector3.Reverse(GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Vector3.Rotate(GeometrySharp.Geometry.Vector3,System.Double)
  - GeometrySharp.Geometry.Vector3.SquaredLength
  - GeometrySharp.Geometry.Vector3.SubMulMutate(GeometrySharp.Geometry.Vector3,System.Double,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Vector3.ToString
  - GeometrySharp.Geometry.Vector3.Unitize
  - GeometrySharp.Geometry.Vector3.Unset
  - GeometrySharp.Geometry.Vector3.XAxis
  - GeometrySharp.Geometry.Vector3.YAxis
  - GeometrySharp.Geometry.Vector3.ZAxis
  - GeometrySharp.Geometry.Vector3.Zero1d(System.Int32)
  - GeometrySharp.Geometry.Vector3.Zero2d(System.Int32,System.Int32)
  - GeometrySharp.Geometry.Vector3.Zero3d(System.Int32,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: Vector3
  nameWithType: Vector3
  fullName: GeometrySharp.Geometry.Vector3
  type: Class
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Vector3
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 14
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nVector3 is represented simply by an list of double point numbers.\nSo, you would write simply [1,0,0] to create a Vector3 in the X direction.\n"
  example: []
  syntax:
    content: 'public class Vector3 : List<double>, IList<double>, ICollection<double>, IReadOnlyList<double>, IReadOnlyCollection<double>, IEnumerable<double>, IList, ICollection, IEnumerable, IEquatable<Vector3>'
    content.vb: >-
      Public Class Vector3

          Inherits List(Of Double)

          Implements IList(Of Double), ICollection(Of Double), IReadOnlyList(Of Double), IReadOnlyCollection(Of Double), IEnumerable(Of Double), IList, ICollection, IEnumerable, IEquatable(Of Vector3)
  inheritance:
  - System.Object
  - System.Collections.Generic.List{System.Double}
  implements:
  - System.Collections.Generic.IList{System.Double}
  - System.Collections.Generic.ICollection{System.Double}
  - System.Collections.Generic.IReadOnlyList{System.Double}
  - System.Collections.Generic.IReadOnlyCollection{System.Double}
  - System.Collections.Generic.IEnumerable{System.Double}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.IEquatable{GeometrySharp.Geometry.Vector3}
  inheritedMembers:
  - System.Collections.Generic.List{System.Double}.System#Collections#IList#get_Item(System.Int32)
  - System.Collections.Generic.List{System.Double}.System#Collections#IList#set_Item(System.Int32,System.Object)
  - System.Collections.Generic.List{System.Double}.Add(System.Double)
  - System.Collections.Generic.List{System.Double}.AddRange(System.Collections.Generic.IEnumerable{System.Double})
  - System.Collections.Generic.List{System.Double}.AsReadOnly
  - System.Collections.Generic.List{System.Double}.BinarySearch(System.Int32,System.Int32,System.Double,System.Collections.Generic.IComparer{System.Double})
  - System.Collections.Generic.List{System.Double}.BinarySearch(System.Double)
  - System.Collections.Generic.List{System.Double}.BinarySearch(System.Double,System.Collections.Generic.IComparer{System.Double})
  - System.Collections.Generic.List{System.Double}.Clear
  - System.Collections.Generic.List{System.Double}.Contains(System.Double)
  - System.Collections.Generic.List{System.Double}.ConvertAll``1(System.Converter{System.Double,{TOutput}})
  - System.Collections.Generic.List{System.Double}.CopyTo(System.Int32,System.Double[],System.Int32,System.Int32)
  - System.Collections.Generic.List{System.Double}.CopyTo(System.Double[])
  - System.Collections.Generic.List{System.Double}.CopyTo(System.Double[],System.Int32)
  - System.Collections.Generic.List{System.Double}.Exists(System.Predicate{System.Double})
  - System.Collections.Generic.List{System.Double}.Find(System.Predicate{System.Double})
  - System.Collections.Generic.List{System.Double}.FindAll(System.Predicate{System.Double})
  - System.Collections.Generic.List{System.Double}.FindIndex(System.Int32,System.Int32,System.Predicate{System.Double})
  - System.Collections.Generic.List{System.Double}.FindIndex(System.Int32,System.Predicate{System.Double})
  - System.Collections.Generic.List{System.Double}.FindIndex(System.Predicate{System.Double})
  - System.Collections.Generic.List{System.Double}.FindLast(System.Predicate{System.Double})
  - System.Collections.Generic.List{System.Double}.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Double})
  - System.Collections.Generic.List{System.Double}.FindLastIndex(System.Int32,System.Predicate{System.Double})
  - System.Collections.Generic.List{System.Double}.FindLastIndex(System.Predicate{System.Double})
  - System.Collections.Generic.List{System.Double}.ForEach(System.Action{System.Double})
  - System.Collections.Generic.List{System.Double}.GetEnumerator
  - System.Collections.Generic.List{System.Double}.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{System.Double}.IndexOf(System.Double)
  - System.Collections.Generic.List{System.Double}.IndexOf(System.Double,System.Int32)
  - System.Collections.Generic.List{System.Double}.IndexOf(System.Double,System.Int32,System.Int32)
  - System.Collections.Generic.List{System.Double}.Insert(System.Int32,System.Double)
  - System.Collections.Generic.List{System.Double}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Double})
  - System.Collections.Generic.List{System.Double}.LastIndexOf(System.Double)
  - System.Collections.Generic.List{System.Double}.LastIndexOf(System.Double,System.Int32)
  - System.Collections.Generic.List{System.Double}.LastIndexOf(System.Double,System.Int32,System.Int32)
  - System.Collections.Generic.List{System.Double}.Remove(System.Double)
  - System.Collections.Generic.List{System.Double}.RemoveAll(System.Predicate{System.Double})
  - System.Collections.Generic.List{System.Double}.RemoveAt(System.Int32)
  - System.Collections.Generic.List{System.Double}.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{System.Double}.Reverse
  - System.Collections.Generic.List{System.Double}.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List{System.Double}.Sort
  - System.Collections.Generic.List{System.Double}.Sort(System.Collections.Generic.IComparer{System.Double})
  - System.Collections.Generic.List{System.Double}.Sort(System.Comparison{System.Double})
  - System.Collections.Generic.List{System.Double}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Double})
  - System.Collections.Generic.List{System.Double}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.List{System.Double}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.List{System.Double}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.List{System.Double}.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.List{System.Double}.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.List{System.Double}.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.List{System.Double}.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.List{System.Double}.System#Collections#IList#Remove(System.Object)
  - System.Collections.Generic.List{System.Double}.ToArray
  - System.Collections.Generic.List{System.Double}.TrimExcess
  - System.Collections.Generic.List{System.Double}.TrueForAll(System.Predicate{System.Double})
  - System.Collections.Generic.List{System.Double}.Capacity
  - System.Collections.Generic.List{System.Double}.Count
  - System.Collections.Generic.List{System.Double}.Item(System.Int32)
  - System.Collections.Generic.List{System.Double}.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.List{System.Double}.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.List{System.Double}.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.List{System.Double}.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.List{System.Double}.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.List{System.Double}.System#Collections#IList#Item(System.Int32)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Collections.Generic.IEnumerable{System.Double}.GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector
  - System.Collections.Generic.IEnumerable{System.Double}.GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot
  - System.Collections.Generic.IEnumerable{System.Double}.GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Func{System.Double,System.Double,System.Boolean})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Geometry.Vector3.#ctor
  commentId: M:GeometrySharp.Geometry.Vector3.#ctor
  id: '#ctor'
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Vector3()
  nameWithType: Vector3.Vector3()
  fullName: GeometrySharp.Geometry.Vector3.Vector3()
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 19
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nDefault constructor.\n"
  example: []
  syntax:
    content: public Vector3()
    content.vb: Public Sub New
  overload: GeometrySharp.Geometry.Vector3.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.#ctor(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:GeometrySharp.Geometry.Vector3.#ctor(System.Collections.Generic.IEnumerable{System.Double})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Double})'
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Vector3(IEnumerable<Double>)
  nameWithType: Vector3.Vector3(IEnumerable<Double>)
  fullName: GeometrySharp.Geometry.Vector3.Vector3(System.Collections.Generic.IEnumerable<System.Double>)
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 27
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nVector3 initialized by a list of values.\n"
  example: []
  syntax:
    content: public Vector3(IEnumerable<double> values)
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: List of values.
    content.vb: Public Sub New(values As IEnumerable(Of Double))
  overload: GeometrySharp.Geometry.Vector3.#ctor*
  nameWithType.vb: Vector3.Vector3(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GeometrySharp.Geometry.Vector3.Vector3(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Vector3(IEnumerable(Of Double))
- uid: GeometrySharp.Geometry.Vector3.Unset
  commentId: P:GeometrySharp.Geometry.Vector3.Unset
  id: Unset
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Unset
  nameWithType: Vector3.Unset
  fullName: GeometrySharp.Geometry.Vector3.Unset
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Unset
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 35
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets the value of a point at location GeoSharpMath.UNSETVALUE,GeoSharpMath.UNSETVALUE,GeoSharpMath.UNSETVALUE.\n"
  example: []
  syntax:
    content: public static Vector3 Unset { get; }
    parameters: []
    return:
      type: GeometrySharp.Geometry.Vector3
    content.vb: Public Shared ReadOnly Property Unset As Vector3
  overload: GeometrySharp.Geometry.Vector3.Unset*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: GeometrySharp.Geometry.Vector3.XAxis
  commentId: P:GeometrySharp.Geometry.Vector3.XAxis
  id: XAxis
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: XAxis
  nameWithType: Vector3.XAxis
  fullName: GeometrySharp.Geometry.Vector3.XAxis
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: XAxis
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 41
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets the value of the vector with components 1,0,0.\n"
  example: []
  syntax:
    content: public static Vector3 XAxis { get; }
    parameters: []
    return:
      type: GeometrySharp.Geometry.Vector3
    content.vb: Public Shared ReadOnly Property XAxis As Vector3
  overload: GeometrySharp.Geometry.Vector3.XAxis*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: GeometrySharp.Geometry.Vector3.YAxis
  commentId: P:GeometrySharp.Geometry.Vector3.YAxis
  id: YAxis
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: YAxis
  nameWithType: Vector3.YAxis
  fullName: GeometrySharp.Geometry.Vector3.YAxis
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: YAxis
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 46
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets the value of the vector with components 0,1,0.\n"
  example: []
  syntax:
    content: public static Vector3 YAxis { get; }
    parameters: []
    return:
      type: GeometrySharp.Geometry.Vector3
    content.vb: Public Shared ReadOnly Property YAxis As Vector3
  overload: GeometrySharp.Geometry.Vector3.YAxis*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: GeometrySharp.Geometry.Vector3.ZAxis
  commentId: P:GeometrySharp.Geometry.Vector3.ZAxis
  id: ZAxis
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: ZAxis
  nameWithType: Vector3.ZAxis
  fullName: GeometrySharp.Geometry.Vector3.ZAxis
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ZAxis
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 51
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets the value of the vector with components 0,0,1.\n"
  example: []
  syntax:
    content: public static Vector3 ZAxis { get; }
    parameters: []
    return:
      type: GeometrySharp.Geometry.Vector3
    content.vb: Public Shared ReadOnly Property ZAxis As Vector3
  overload: GeometrySharp.Geometry.Vector3.ZAxis*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: GeometrySharp.Geometry.Vector3.AngleBetween(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Vector3.AngleBetween(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  id: AngleBetween(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: AngleBetween(Vector3, Vector3)
  nameWithType: Vector3.AngleBetween(Vector3, Vector3)
  fullName: GeometrySharp.Geometry.Vector3.AngleBetween(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: AngleBetween
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 59
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nThe angle in radians between two vectors.\n"
  example: []
  syntax:
    content: public static double AngleBetween(Vector3 a, Vector3 b)
    parameters:
    - id: a
      type: GeometrySharp.Geometry.Vector3
      description: The first vector.
    - id: b
      type: GeometrySharp.Geometry.Vector3
      description: The second vector.
    return:
      type: System.Double
      description: The angle in radians
    content.vb: Public Shared Function AngleBetween(a As Vector3, b As Vector3) As Double
  overload: GeometrySharp.Geometry.Vector3.AngleBetween*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.Reverse(GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Vector3.Reverse(GeometrySharp.Geometry.Vector3)
  id: Reverse(GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Reverse(Vector3)
  nameWithType: Vector3.Reverse(Vector3)
  fullName: GeometrySharp.Geometry.Vector3.Reverse(GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Reverse
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 69
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nReverses this vector in place (reverses the direction).\n"
  example: []
  syntax:
    content: public static Vector3 Reverse(Vector3 a)
    parameters:
    - id: a
      type: GeometrySharp.Geometry.Vector3
      description: The vector to reverse.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: The reversed vector.
    content.vb: Public Shared Function Reverse(a As Vector3) As Vector3
  overload: GeometrySharp.Geometry.Vector3.Reverse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.IsValid
  commentId: M:GeometrySharp.Geometry.Vector3.IsValid
  id: IsValid
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: IsValid()
  nameWithType: Vector3.IsValid()
  fullName: GeometrySharp.Geometry.Vector3.IsValid()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: IsValid
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 80
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets a value indicating whether this vector is valid.\nA valid vector must be formed of finite numbers.\n"
  example: []
  syntax:
    content: public bool IsValid()
    return:
      type: System.Boolean
      description: True if the vector is valid.
    content.vb: Public Function IsValid As Boolean
  overload: GeometrySharp.Geometry.Vector3.IsValid*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.isUnitize
  commentId: M:GeometrySharp.Geometry.Vector3.isUnitize
  id: isUnitize
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: isUnitize()
  nameWithType: Vector3.isUnitize()
  fullName: GeometrySharp.Geometry.Vector3.isUnitize()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: isUnitize
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 89
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets a value indicating whether or not this is a unit vector.\n"
  example: []
  syntax:
    content: public bool isUnitize()
    return:
      type: System.Boolean
      description: 'True if '
    content.vb: Public Function isUnitize As Boolean
  overload: GeometrySharp.Geometry.Vector3.isUnitize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.IsZero
  commentId: M:GeometrySharp.Geometry.Vector3.IsZero
  id: IsZero
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: IsZero()
  nameWithType: Vector3.IsZero()
  fullName: GeometrySharp.Geometry.Vector3.IsZero()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: IsZero
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 101
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets a value indicating whether the X, Y, and Z values are all equal to 0.0.\n"
  example: []
  syntax:
    content: public bool IsZero()
    return:
      type: System.Boolean
      description: True if all the component are less than Epsilon.
    content.vb: Public Function IsZero As Boolean
  overload: GeometrySharp.Geometry.Vector3.IsZero*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.Amplify(System.Double)
  commentId: M:GeometrySharp.Geometry.Vector3.Amplify(System.Double)
  id: Amplify(System.Double)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Amplify(Double)
  nameWithType: Vector3.Amplify(Double)
  fullName: GeometrySharp.Geometry.Vector3.Amplify(System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Amplify
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 111
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets the vector amplified by a scalar value.\n"
  example: []
  syntax:
    content: public Vector3 Amplify(double amplitude)
    parameters:
    - id: amplitude
      type: System.Double
      description: The scalar value to amplify the vector.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: The vector amplified.
    content.vb: Public Function Amplify(amplitude As Double) As Vector3
  overload: GeometrySharp.Geometry.Vector3.Amplify*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.Length
  commentId: M:GeometrySharp.Geometry.Vector3.Length
  id: Length
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: Vector3.Length()
  fullName: GeometrySharp.Geometry.Vector3.Length()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Length
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 121
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nComputes the length (or magnitude, or size) of this vector.\n"
  example: []
  syntax:
    content: public double Length()
    return:
      type: System.Double
      description: The magnitude of the vector.
    content.vb: Public Function Length As Double
  overload: GeometrySharp.Geometry.Vector3.Length*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.Lerp(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  commentId: M:GeometrySharp.Geometry.Vector3.Lerp(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  id: Lerp(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Lerp(Vector3, Vector3, Double)
  nameWithType: Vector3.Lerp(Vector3, Vector3, Double)
  fullName: GeometrySharp.Geometry.Vector3.Lerp(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Lerp
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 135
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nLinearly interpolates between two vectors based on the given weighting.\n"
  example: []
  syntax:
    content: public static Vector3 Lerp(Vector3 u, Vector3 v, double amount)
    parameters:
    - id: u
      type: GeometrySharp.Geometry.Vector3
      description: The first source vector.
    - id: v
      type: GeometrySharp.Geometry.Vector3
      description: The second source vector.
    - id: amount
      type: System.Double
      description: Value between 0 and 1 indicating the weight of the second source vector.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: The interpolated vector.
    content.vb: Public Shared Function Lerp(u As Vector3, v As Vector3, amount As Double) As Vector3
  overload: GeometrySharp.Geometry.Vector3.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.SquaredLength
  commentId: M:GeometrySharp.Geometry.Vector3.SquaredLength
  id: SquaredLength
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: SquaredLength()
  nameWithType: Vector3.SquaredLength()
  fullName: GeometrySharp.Geometry.Vector3.SquaredLength()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: SquaredLength
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 142
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nComputes the squared length (or magnitude, or size) of this vector.\n"
  example: []
  syntax:
    content: public double SquaredLength()
    return:
      type: System.Double
      description: The sum of each value squared.
    content.vb: Public Function SquaredLength As Double
  overload: GeometrySharp.Geometry.Vector3.SquaredLength*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.IsPerpendicularTo(GeometrySharp.Geometry.Vector3,System.Double)
  commentId: M:GeometrySharp.Geometry.Vector3.IsPerpendicularTo(GeometrySharp.Geometry.Vector3,System.Double)
  id: IsPerpendicularTo(GeometrySharp.Geometry.Vector3,System.Double)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: IsPerpendicularTo(Vector3, Double)
  nameWithType: Vector3.IsPerpendicularTo(Vector3, Double)
  fullName: GeometrySharp.Geometry.Vector3.IsPerpendicularTo(GeometrySharp.Geometry.Vector3, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: IsPerpendicularTo
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 153
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nDetermines if this vector is perpendicular to within one degree of another one.\n"
  example: []
  syntax:
    content: public bool IsPerpendicularTo(Vector3 other, double tolerance = -1)
    parameters:
    - id: other
      type: GeometrySharp.Geometry.Vector3
      description: Vector to compare to.
    - id: tolerance
      type: System.Double
      description: Angle tolerance (in radians), if not set used default one degree, expressed in radians.
    return:
      type: System.Boolean
      description: True if both vectors are perpendicular.
    content.vb: Public Function IsPerpendicularTo(other As Vector3, tolerance As Double = -1) As Boolean
  overload: GeometrySharp.Geometry.Vector3.IsPerpendicularTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.IsParallelTo(GeometrySharp.Geometry.Vector3,System.Double)
  commentId: M:GeometrySharp.Geometry.Vector3.IsParallelTo(GeometrySharp.Geometry.Vector3,System.Double)
  id: IsParallelTo(GeometrySharp.Geometry.Vector3,System.Double)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: IsParallelTo(Vector3, Double)
  nameWithType: Vector3.IsParallelTo(Vector3, Double)
  fullName: GeometrySharp.Geometry.Vector3.IsParallelTo(GeometrySharp.Geometry.Vector3, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: IsParallelTo
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 172
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nDetermines whether this vector is parallel to another vector, within a provided tolerance.\n"
  example: []
  syntax:
    content: public int IsParallelTo(Vector3 other, double tolerance = -1)
    parameters:
    - id: other
      type: GeometrySharp.Geometry.Vector3
      description: Vector to compare to.
    - id: tolerance
      type: System.Double
      description: Angle tolerance (in radians), if not set used default one degree, expressed in radians.
    return:
      type: System.Int32
      description: "A parallel indicator:\n1 vectors are parallel,\n0 vectors are not parallel,\n-1 vectors are parallel but with opposite directions "
    content.vb: Public Function IsParallelTo(other As Vector3, tolerance As Double = -1) As Integer
  overload: GeometrySharp.Geometry.Vector3.IsParallelTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.Rotate(GeometrySharp.Geometry.Vector3,System.Double)
  commentId: M:GeometrySharp.Geometry.Vector3.Rotate(GeometrySharp.Geometry.Vector3,System.Double)
  id: Rotate(GeometrySharp.Geometry.Vector3,System.Double)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Rotate(Vector3, Double)
  nameWithType: Vector3.Rotate(Vector3, Double)
  fullName: GeometrySharp.Geometry.Vector3.Rotate(GeometrySharp.Geometry.Vector3, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Rotate
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 192
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nRotates this vector around a given axis.\nThe rotation is computed using Rodrigues Rotation formula.\nhttps://handwiki.org/wiki/Rodrigues%27_rotation_formula\n"
  example: []
  syntax:
    content: public Vector3 Rotate(Vector3 axis, double angle)
    parameters:
    - id: axis
      type: GeometrySharp.Geometry.Vector3
      description: Axis of rotation.
    - id: angle
      type: System.Double
      description: Angle of rotation (in radians).
    return:
      type: GeometrySharp.Geometry.Vector3
      description: Rotated vector.
    content.vb: Public Function Rotate(axis As Vector3, angle As Double) As Vector3
  overload: GeometrySharp.Geometry.Vector3.Rotate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.Cross(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Vector3.Cross(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  id: Cross(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Cross(Vector3, Vector3)
  nameWithType: Vector3.Cross(Vector3, Vector3)
  fullName: GeometrySharp.Geometry.Vector3.Cross(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Cross
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 212
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCross product.\n"
  example: []
  syntax:
    content: public static Vector3 Cross(Vector3 a, Vector3 b)
    parameters:
    - id: a
      type: GeometrySharp.Geometry.Vector3
      description: The first vector.
    - id: b
      type: GeometrySharp.Geometry.Vector3
      description: The second vector.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: Compute the cross product.
    content.vb: Public Shared Function Cross(a As Vector3, b As Vector3) As Vector3
  overload: GeometrySharp.Geometry.Vector3.Cross*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.Dot(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Vector3.Dot(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  id: Dot(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Dot(Vector3, Vector3)
  nameWithType: Vector3.Dot(Vector3, Vector3)
  fullName: GeometrySharp.Geometry.Vector3.Dot(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Dot
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 228
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCompute the dot product between two vectors.\n"
  example: []
  syntax:
    content: public static double Dot(Vector3 a, Vector3 b)
    parameters:
    - id: a
      type: GeometrySharp.Geometry.Vector3
      description: The first vector.
    - id: b
      type: GeometrySharp.Geometry.Vector3
      description: The second vector with which compute the dot product.
    return:
      type: System.Double
      description: The dot product.
    content.vb: Public Shared Function Dot(a As Vector3, b As Vector3) As Double
  overload: GeometrySharp.Geometry.Vector3.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.Unitize
  commentId: M:GeometrySharp.Geometry.Vector3.Unitize
  id: Unitize
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Unitize()
  nameWithType: Vector3.Unitize()
  fullName: GeometrySharp.Geometry.Vector3.Unitize()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Unitize
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 237
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nUnitizes the vector. A unit vector has length 1 unit.\n"
  example: []
  syntax:
    content: public Vector3 Unitize()
    return:
      type: GeometrySharp.Geometry.Vector3
      description: A new vector unitized.
    content.vb: Public Function Unitize As Vector3
  overload: GeometrySharp.Geometry.Vector3.Unitize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.Zero1d(System.Int32)
  commentId: M:GeometrySharp.Geometry.Vector3.Zero1d(System.Int32)
  id: Zero1d(System.Int32)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Zero1d(Int32)
  nameWithType: Vector3.Zero1d(Int32)
  fullName: GeometrySharp.Geometry.Vector3.Zero1d(System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Zero1d
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 251
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCreate a list of zero values.\n"
  example: []
  syntax:
    content: public static Vector3 Zero1d(int rows)
    parameters:
    - id: rows
      type: System.Int32
      description: Rows dimension.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: Get a vector of r dimension.
    content.vb: Public Shared Function Zero1d(rows As Integer) As Vector3
  overload: GeometrySharp.Geometry.Vector3.Zero1d*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.Zero2d(System.Int32,System.Int32)
  commentId: M:GeometrySharp.Geometry.Vector3.Zero2d(System.Int32,System.Int32)
  id: Zero2d(System.Int32,System.Int32)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Zero2d(Int32, Int32)
  nameWithType: Vector3.Zero2d(Int32, Int32)
  fullName: GeometrySharp.Geometry.Vector3.Zero2d(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Zero2d
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 266
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCreate a 2 dimensional list of zero values.\n"
  example: []
  syntax:
    content: public static List<Vector3> Zero2d(int rows, int cols)
    parameters:
    - id: rows
      type: System.Int32
      description: Rows dimension.
    - id: cols
      type: System.Int32
      description: Columns dimension.
    return:
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
      description: Get a vector of r*c dimension.
    content.vb: Public Shared Function Zero2d(rows As Integer, cols As Integer) As List(Of Vector3)
  overload: GeometrySharp.Geometry.Vector3.Zero2d*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.Zero3d(System.Int32,System.Int32,System.Int32)
  commentId: M:GeometrySharp.Geometry.Vector3.Zero3d(System.Int32,System.Int32,System.Int32)
  id: Zero3d(System.Int32,System.Int32,System.Int32)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Zero3d(Int32, Int32, Int32)
  nameWithType: Vector3.Zero3d(Int32, Int32, Int32)
  fullName: GeometrySharp.Geometry.Vector3.Zero3d(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Zero3d
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 282
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCreate a 3 dimensional list of zero values.\n"
  example: []
  syntax:
    content: public static List<List<Vector3>> Zero3d(int rows, int cols, int depth)
    parameters:
    - id: rows
      type: System.Int32
      description: Rows dimension.
    - id: cols
      type: System.Int32
      description: Columns dimension.
    - id: depth
      type: System.Int32
      description: Depth dimension.
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
      description: Get a vector of r*c*d dimension.
    content.vb: Public Shared Function Zero3d(rows As Integer, cols As Integer, depth As Integer) As List(Of List(Of Vector3))
  overload: GeometrySharp.Geometry.Vector3.Zero3d*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.DistanceTo(GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Vector3.DistanceTo(GeometrySharp.Geometry.Vector3)
  id: DistanceTo(GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: DistanceTo(Vector3)
  nameWithType: Vector3.DistanceTo(Vector3)
  fullName: GeometrySharp.Geometry.Vector3.DistanceTo(GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: DistanceTo
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 296
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nThe distance from this point to b.\n"
  example: []
  syntax:
    content: public double DistanceTo(Vector3 v)
    parameters:
    - id: v
      type: GeometrySharp.Geometry.Vector3
      description: The target vector.
    return:
      type: System.Double
      description: The distance between this vector and the provided vector.
    content.vb: Public Function DistanceTo(v As Vector3) As Double
  overload: GeometrySharp.Geometry.Vector3.DistanceTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.DistanceTo(GeometrySharp.Geometry.Line)
  commentId: M:GeometrySharp.Geometry.Vector3.DistanceTo(GeometrySharp.Geometry.Line)
  id: DistanceTo(GeometrySharp.Geometry.Line)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: DistanceTo(Line)
  nameWithType: Vector3.DistanceTo(Line)
  fullName: GeometrySharp.Geometry.Vector3.DistanceTo(GeometrySharp.Geometry.Line)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: DistanceTo
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 308
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGet the distance of a point to a line.\n"
  example: []
  syntax:
    content: public double DistanceTo(Line line)
    parameters:
    - id: line
      type: GeometrySharp.Geometry.Line
      description: The line from which to calculate the distance.
    return:
      type: System.Double
      description: The distance.
    content.vb: Public Function DistanceTo(line As Line) As Double
  overload: GeometrySharp.Geometry.Vector3.DistanceTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.IsPointOnPlane(GeometrySharp.Geometry.Plane,System.Double)
  commentId: M:GeometrySharp.Geometry.Vector3.IsPointOnPlane(GeometrySharp.Geometry.Plane,System.Double)
  id: IsPointOnPlane(GeometrySharp.Geometry.Plane,System.Double)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: IsPointOnPlane(Plane, Double)
  nameWithType: Vector3.IsPointOnPlane(Plane, Double)
  fullName: GeometrySharp.Geometry.Vector3.IsPointOnPlane(GeometrySharp.Geometry.Plane, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: IsPointOnPlane
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 321
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nDeterminate if the provided point lies on the plane.\n"
  example: []
  syntax:
    content: public bool IsPointOnPlane(Plane plane, double tol = 1E-06)
    parameters:
    - id: plane
      type: GeometrySharp.Geometry.Plane
      description: The plane on which to find if the point lies on.
    - id: tol
      type: System.Double
      description: If the tolerance is not set, as per default is use 1e-6
    return:
      type: System.Boolean
      description: Whether the point is on the plane.
    content.vb: Public Function IsPointOnPlane(plane As Plane, tol As Double = 1E-06) As Boolean
  overload: GeometrySharp.Geometry.Vector3.IsPointOnPlane*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.AddMulMutate(GeometrySharp.Geometry.Vector3,System.Double,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Vector3.AddMulMutate(GeometrySharp.Geometry.Vector3,System.Double,GeometrySharp.Geometry.Vector3)
  id: AddMulMutate(GeometrySharp.Geometry.Vector3,System.Double,GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: AddMulMutate(Vector3, Double, Vector3)
  nameWithType: Vector3.AddMulMutate(Vector3, Double, Vector3)
  fullName: GeometrySharp.Geometry.Vector3.AddMulMutate(GeometrySharp.Geometry.Vector3, System.Double, GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: AddMulMutate
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 333
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nAdd to each component of the first vector the respective component of the second vector multiplied by a scalar\n"
  example: []
  syntax:
    content: public static void AddMulMutate(Vector3 a, double s, Vector3 b)
    parameters:
    - id: a
      type: GeometrySharp.Geometry.Vector3
      description: First vector
    - id: s
      type: System.Double
      description: Scalar
    - id: b
      type: GeometrySharp.Geometry.Vector3
      description: Second Vector
    content.vb: Public Shared Sub AddMulMutate(a As Vector3, s As Double, b As Vector3)
  overload: GeometrySharp.Geometry.Vector3.AddMulMutate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.SubMulMutate(GeometrySharp.Geometry.Vector3,System.Double,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Vector3.SubMulMutate(GeometrySharp.Geometry.Vector3,System.Double,GeometrySharp.Geometry.Vector3)
  id: SubMulMutate(GeometrySharp.Geometry.Vector3,System.Double,GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: SubMulMutate(Vector3, Double, Vector3)
  nameWithType: Vector3.SubMulMutate(Vector3, Double, Vector3)
  fullName: GeometrySharp.Geometry.Vector3.SubMulMutate(GeometrySharp.Geometry.Vector3, System.Double, GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: SubMulMutate
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 346
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nSubtract to each component of the first vector the respective component of the second vector multiplied by a scalar\n"
  example: []
  syntax:
    content: public static void SubMulMutate(Vector3 a, double s, Vector3 b)
    parameters:
    - id: a
      type: GeometrySharp.Geometry.Vector3
      description: First vector
    - id: s
      type: System.Double
      description: Scalar
    - id: b
      type: GeometrySharp.Geometry.Vector3
      description: Second Vector
    content.vb: Public Shared Sub SubMulMutate(a As Vector3, s As Double, b As Vector3)
  overload: GeometrySharp.Geometry.Vector3.SubMulMutate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.op_Multiply(GeometrySharp.Geometry.Vector3,System.Double)
  commentId: M:GeometrySharp.Geometry.Vector3.op_Multiply(GeometrySharp.Geometry.Vector3,System.Double)
  id: op_Multiply(GeometrySharp.Geometry.Vector3,System.Double)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Multiply(Vector3, Double)
  nameWithType: Vector3.Multiply(Vector3, Double)
  fullName: GeometrySharp.Geometry.Vector3.Multiply(GeometrySharp.Geometry.Vector3, System.Double)
  type: Operator
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: op_Multiply
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 358
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nMultiply a vector and a scalar.\n"
  example: []
  syntax:
    content: public static Vector3 operator *(Vector3 v, double a)
    parameters:
    - id: v
      type: GeometrySharp.Geometry.Vector3
      description: The vector to multiply.
    - id: a
      type: System.Double
      description: The scalar value to multiply.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: A vector whose magnitude is multiplied by a.
    content.vb: Public Shared Operator *(v As Vector3, a As Double) As Vector3
  overload: GeometrySharp.Geometry.Vector3.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.op_Multiply(GeometrySharp.Geometry.Vector3,GeometrySharp.Core.Matrix)
  commentId: M:GeometrySharp.Geometry.Vector3.op_Multiply(GeometrySharp.Geometry.Vector3,GeometrySharp.Core.Matrix)
  id: op_Multiply(GeometrySharp.Geometry.Vector3,GeometrySharp.Core.Matrix)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Multiply(Vector3, Matrix)
  nameWithType: Vector3.Multiply(Vector3, Matrix)
  fullName: GeometrySharp.Geometry.Vector3.Multiply(GeometrySharp.Geometry.Vector3, GeometrySharp.Core.Matrix)
  type: Operator
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: op_Multiply
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 370
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nMultiplying an n x m matrix by a m x 1.\nTransform the vector.\n"
  example: []
  syntax:
    content: public static Vector3 operator *(Vector3 v, Matrix m)
    parameters:
    - id: v
      type: GeometrySharp.Geometry.Vector3
      description: Vector to transform.
    - id: m
      type: GeometrySharp.Core.Matrix
      description: Matrix to multiply.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: Vector resulting of multiplying an n x m matrix by a m x 1.
    content.vb: Public Shared Operator *(v As Vector3, m As Matrix) As Vector3
  overload: GeometrySharp.Geometry.Vector3.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.op_Multiply(GeometrySharp.Geometry.Vector3,GeometrySharp.Core.Transform)
  commentId: M:GeometrySharp.Geometry.Vector3.op_Multiply(GeometrySharp.Geometry.Vector3,GeometrySharp.Core.Transform)
  id: op_Multiply(GeometrySharp.Geometry.Vector3,GeometrySharp.Core.Transform)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Multiply(Vector3, Transform)
  nameWithType: Vector3.Multiply(Vector3, Transform)
  fullName: GeometrySharp.Geometry.Vector3.Multiply(GeometrySharp.Geometry.Vector3, GeometrySharp.Core.Transform)
  type: Operator
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: op_Multiply
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 400
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nMultiplies a 4x4 transformation matrix.\n"
  example: []
  syntax:
    content: public static Vector3 operator *(Vector3 v, Transform t)
    parameters:
    - id: v
      type: GeometrySharp.Geometry.Vector3
      description: A vector.
    - id: t
      type: GeometrySharp.Core.Transform
      description: A transformation.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: The transformed vector.
    content.vb: Public Shared Operator *(v As Vector3, t As Transform) As Vector3
  overload: GeometrySharp.Geometry.Vector3.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.op_Division(GeometrySharp.Geometry.Vector3,System.Double)
  commentId: M:GeometrySharp.Geometry.Vector3.op_Division(GeometrySharp.Geometry.Vector3,System.Double)
  id: op_Division(GeometrySharp.Geometry.Vector3,System.Double)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Division(Vector3, Double)
  nameWithType: Vector3.Division(Vector3, Double)
  fullName: GeometrySharp.Geometry.Vector3.Division(GeometrySharp.Geometry.Vector3, System.Double)
  type: Operator
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: op_Division
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 439
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nDivide a vector by a scalar.\n"
  example: []
  syntax:
    content: public static Vector3 operator /(Vector3 v, double a)
    parameters:
    - id: v
      type: GeometrySharp.Geometry.Vector3
      description: The vector to divide.
    - id: a
      type: System.Double
      description: The scalar divisor.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: A vector whose magnitude is multiplied by a.
    content.vb: Public Shared Operator /(v As Vector3, a As Double) As Vector3
  overload: GeometrySharp.Geometry.Vector3.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.op_Subtraction(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Vector3.op_Subtraction(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  id: op_Subtraction(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Subtraction(Vector3, Vector3)
  nameWithType: Vector3.Subtraction(Vector3, Vector3)
  fullName: GeometrySharp.Geometry.Vector3.Subtraction(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3)
  type: Operator
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: op_Subtraction
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 450
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nSubtract two vectors.\n"
  example: []
  syntax:
    content: public static Vector3 operator -(Vector3 a, Vector3 b)
    parameters:
    - id: a
      type: GeometrySharp.Geometry.Vector3
      description: The first vector.
    - id: b
      type: GeometrySharp.Geometry.Vector3
      description: The second vector.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: A vector which is the difference between a and b.
    content.vb: Public Shared Operator -(a As Vector3, b As Vector3) As Vector3
  overload: GeometrySharp.Geometry.Vector3.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.op_Addition(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Vector3.op_Addition(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  id: op_Addition(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Addition(Vector3, Vector3)
  nameWithType: Vector3.Addition(Vector3, Vector3)
  fullName: GeometrySharp.Geometry.Vector3.Addition(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3)
  type: Operator
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: op_Addition
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 461
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nAdd two vectors.\n"
  example: []
  syntax:
    content: public static Vector3 operator +(Vector3 a, Vector3 b)
    parameters:
    - id: a
      type: GeometrySharp.Geometry.Vector3
      description: The first vector.
    - id: b
      type: GeometrySharp.Geometry.Vector3
      description: The second vector.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: A vector which is the sum of a and b.
    content.vb: Public Shared Operator +(a As Vector3, b As Vector3) As Vector3
  overload: GeometrySharp.Geometry.Vector3.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.op_Equality(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Vector3.op_Equality(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  id: op_Equality(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Equality(Vector3, Vector3)
  nameWithType: Vector3.Equality(Vector3, Vector3)
  fullName: GeometrySharp.Geometry.Vector3.Equality(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3)
  type: Operator
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: op_Equality
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 472
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nAre the two vectors the same within Epsilon?\n"
  example: []
  syntax:
    content: public static bool operator ==(Vector3 a, Vector3 b)
    parameters:
    - id: a
      type: GeometrySharp.Geometry.Vector3
      description: First vector.
    - id: b
      type: GeometrySharp.Geometry.Vector3
      description: Second vector.
    return:
      type: System.Boolean
      description: Returns true if all components of the two vectors are within Epsilon, otherwise false.
    content.vb: Public Shared Operator =(a As Vector3, b As Vector3) As Boolean
  overload: GeometrySharp.Geometry.Vector3.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.op_Inequality(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Vector3.op_Inequality(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  id: op_Inequality(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Inequality(Vector3, Vector3)
  nameWithType: Vector3.Inequality(Vector3, Vector3)
  fullName: GeometrySharp.Geometry.Vector3.Inequality(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3)
  type: Operator
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: op_Inequality
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 483
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nAre the two vectors the same within Epsilon?\n"
  example: []
  syntax:
    content: public static bool operator !=(Vector3 a, Vector3 b)
    parameters:
    - id: a
      type: GeometrySharp.Geometry.Vector3
      description: First vector.
    - id: b
      type: GeometrySharp.Geometry.Vector3
      description: Second vector.
    return:
      type: System.Boolean
      description: Returns true if all components of the two vectors are within Epsilon, otherwise false.
    content.vb: Public Shared Operator <>(a As Vector3, b As Vector3) As Boolean
  overload: GeometrySharp.Geometry.Vector3.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.Vector3.Equals(System.Object)
  commentId: M:GeometrySharp.Geometry.Vector3.Equals(System.Object)
  id: Equals(System.Object)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Vector3.Equals(Object)
  fullName: GeometrySharp.Geometry.Vector3.Equals(System.Object)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Equals
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 493
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nIs the vector equal to the provided vector?\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The vector to test.
    return:
      type: System.Boolean
      description: Returns true if all components of the two vectors are within Epsilon, otherwise false.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: GeometrySharp.Geometry.Vector3.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: GeometrySharp.Geometry.Vector3.Equals(GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Vector3.Equals(GeometrySharp.Geometry.Vector3)
  id: Equals(GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Equals(Vector3)
  nameWithType: Vector3.Equals(Vector3)
  fullName: GeometrySharp.Geometry.Vector3.Equals(GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Equals
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 507
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nIs the vector equal to the provided vector?\n"
  example: []
  syntax:
    content: public bool Equals(Vector3 other)
    parameters:
    - id: other
      type: GeometrySharp.Geometry.Vector3
    return:
      type: System.Boolean
      description: Returns true if all components of the two vectors are within Epsilon, otherwise false.
    content.vb: Public Function Equals(other As Vector3) As Boolean
  overload: GeometrySharp.Geometry.Vector3.Equals*
  implements:
  - System.IEquatable{GeometrySharp.Geometry.Vector3}.Equals(GeometrySharp.Geometry.Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.IsEqualRoundingDecimal(GeometrySharp.Geometry.Vector3,System.Int32)
  commentId: M:GeometrySharp.Geometry.Vector3.IsEqualRoundingDecimal(GeometrySharp.Geometry.Vector3,System.Int32)
  id: IsEqualRoundingDecimal(GeometrySharp.Geometry.Vector3,System.Int32)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: IsEqualRoundingDecimal(Vector3, Int32)
  nameWithType: Vector3.IsEqualRoundingDecimal(Vector3, Int32)
  fullName: GeometrySharp.Geometry.Vector3.IsEqualRoundingDecimal(GeometrySharp.Geometry.Vector3, System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: IsEqualRoundingDecimal
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 520
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nDetermine whether this vector&apos;s components are equal to those of v, within tolerance.\n"
  example: []
  syntax:
    content: public bool IsEqualRoundingDecimal(Vector3 v, int numberOfDecimal = 0)
    parameters:
    - id: v
      type: GeometrySharp.Geometry.Vector3
      description: The vector to compare.
    - id: numberOfDecimal
      type: System.Int32
    return:
      type: System.Boolean
      description: "\nTrue if the difference of this vector and the supplied vector&apos;s components are all within Tolerance, otherwise\nfalse.\n"
    content.vb: Public Function IsEqualRoundingDecimal(v As Vector3, numberOfDecimal As Integer = 0) As Boolean
  overload: GeometrySharp.Geometry.Vector3.IsEqualRoundingDecimal*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.PerpendicularTo(GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Vector3.PerpendicularTo(GeometrySharp.Geometry.Vector3)
  id: PerpendicularTo(GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: PerpendicularTo(Vector3)
  nameWithType: Vector3.PerpendicularTo(Vector3)
  fullName: GeometrySharp.Geometry.Vector3.PerpendicularTo(GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: PerpendicularTo
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 540
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCompute the perpendicular to another vector. Result is not unitized.\n"
  example: []
  syntax:
    content: public Vector3 PerpendicularTo(Vector3 other)
    parameters:
    - id: other
      type: GeometrySharp.Geometry.Vector3
      description: Vector to use as guide.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: Return the perpendicular vector.
    content.vb: Public Function PerpendicularTo(other As Vector3) As Vector3
  overload: GeometrySharp.Geometry.Vector3.PerpendicularTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Vector3.ToString
  commentId: M:GeometrySharp.Geometry.Vector3.ToString
  id: ToString
  parent: GeometrySharp.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vector3.ToString()
  fullName: GeometrySharp.Geometry.Vector3.ToString()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Vector3.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ToString
    path: ../GeometrySharp/Geometry/Vector3.cs
    startLine: 615
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nConstructs the string representation of the vector.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The vector in string format
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: GeometrySharp.Geometry.Vector3.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: GeometrySharp.Geometry
  commentId: N:GeometrySharp.Geometry
  name: GeometrySharp.Geometry
  nameWithType: GeometrySharp.Geometry
  fullName: GeometrySharp.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double>
  nameWithType: List<Double>
  fullName: System.Collections.Generic.List<System.Double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{System.Double}
  commentId: T:System.Collections.Generic.IList{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Double>
  nameWithType: IList<Double>
  fullName: System.Collections.Generic.IList<System.Double>
  nameWithType.vb: IList(Of Double)
  fullName.vb: System.Collections.Generic.IList(Of System.Double)
  name.vb: IList(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Double}
  commentId: T:System.Collections.Generic.ICollection{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Double>
  nameWithType: ICollection<Double>
  fullName: System.Collections.Generic.ICollection<System.Double>
  nameWithType.vb: ICollection(Of Double)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Double)
  name.vb: ICollection(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{System.Double}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Double>
  nameWithType: IReadOnlyList<Double>
  fullName: System.Collections.Generic.IReadOnlyList<System.Double>
  nameWithType.vb: IReadOnlyList(Of Double)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of System.Double)
  name.vb: IReadOnlyList(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.Double}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<Double>
  nameWithType: IReadOnlyCollection<Double>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Double>
  nameWithType.vb: IReadOnlyCollection(Of Double)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Double)
  name.vb: IReadOnlyCollection(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Double}
  commentId: T:System.Collections.Generic.IEnumerable{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Double>
  nameWithType: IEnumerable<Double>
  fullName: System.Collections.Generic.IEnumerable<System.Double>
  nameWithType.vb: IEnumerable(Of Double)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Double)
  name.vb: IEnumerable(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IEquatable{GeometrySharp.Geometry.Vector3}
  commentId: T:System.IEquatable{GeometrySharp.Geometry.Vector3}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Vector3>
  nameWithType: IEquatable<Vector3>
  fullName: System.IEquatable<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: IEquatable(Of Vector3)
  fullName.vb: System.IEquatable(Of GeometrySharp.Geometry.Vector3)
  name.vb: IEquatable(Of Vector3)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List{System.Double}.System#Collections#IList#get_Item(System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  name: IList.get_Item(Int32)
  nameWithType: List<Double>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of Double).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<Double>.IList.get_Item
    fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of Double).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of System.Double).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{System.Double}.System#Collections#IList#set_Item(System.Int32,System.Object)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  name: IList.set_Item(Int32, Object)
  nameWithType: List<Double>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of Double).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<Double>.IList.set_Item
    fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of Double).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of System.Double).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Add(System.Double)
  commentId: M:System.Collections.Generic.List{System.Double}.Add(System.Double)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Add(`0)
  name: Add(Double)
  nameWithType: List<Double>.Add(Double)
  fullName: System.Collections.Generic.List<System.Double>.Add(System.Double)
  nameWithType.vb: List(Of Double).Add(Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double).Add(System.Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<Double>.Add
    fullName: System.Collections.Generic.List<System.Double>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of Double).Add
    fullName: System.Collections.Generic.List(Of System.Double).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.AddRange(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.AddRange(System.Collections.Generic.IEnumerable{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  name: AddRange(IEnumerable<Double>)
  nameWithType: List<Double>.AddRange(IEnumerable<Double>)
  fullName: System.Collections.Generic.List<System.Double>.AddRange(System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: List(Of Double).AddRange(IEnumerable(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).AddRange(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: AddRange(IEnumerable(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<Double>.AddRange
    fullName: System.Collections.Generic.List<System.Double>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of Double).AddRange
    fullName: System.Collections.Generic.List(Of System.Double).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.AsReadOnly
  commentId: M:System.Collections.Generic.List{System.Double}.AsReadOnly
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.AsReadOnly
  name: AsReadOnly()
  nameWithType: List<Double>.AsReadOnly()
  fullName: System.Collections.Generic.List<System.Double>.AsReadOnly()
  nameWithType.vb: List(Of Double).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of System.Double).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<Double>.AsReadOnly
    fullName: System.Collections.Generic.List<System.Double>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of Double).AsReadOnly
    fullName: System.Collections.Generic.List(Of System.Double).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.BinarySearch(System.Int32,System.Int32,System.Double,System.Collections.Generic.IComparer{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.BinarySearch(System.Int32,System.Int32,System.Double,System.Collections.Generic.IComparer{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(Int32, Int32, Double, IComparer<Double>)
  nameWithType: List<Double>.BinarySearch(Int32, Int32, Double, IComparer<Double>)
  fullName: System.Collections.Generic.List<System.Double>.BinarySearch(System.Int32, System.Int32, System.Double, System.Collections.Generic.IComparer<System.Double>)
  nameWithType.vb: List(Of Double).BinarySearch(Int32, Int32, Double, IComparer(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).BinarySearch(System.Int32, System.Int32, System.Double, System.Collections.Generic.IComparer(Of System.Double))
  name.vb: BinarySearch(Int32, Int32, Double, IComparer(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<Double>.BinarySearch
    fullName: System.Collections.Generic.List<System.Double>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of Double).BinarySearch
    fullName: System.Collections.Generic.List(Of System.Double).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.BinarySearch(System.Double)
  commentId: M:System.Collections.Generic.List{System.Double}.BinarySearch(System.Double)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.BinarySearch(`0)
  name: BinarySearch(Double)
  nameWithType: List<Double>.BinarySearch(Double)
  fullName: System.Collections.Generic.List<System.Double>.BinarySearch(System.Double)
  nameWithType.vb: List(Of Double).BinarySearch(Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double).BinarySearch(System.Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<Double>.BinarySearch
    fullName: System.Collections.Generic.List<System.Double>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of Double).BinarySearch
    fullName: System.Collections.Generic.List(Of System.Double).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.BinarySearch(System.Double,System.Collections.Generic.IComparer{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.BinarySearch(System.Double,System.Collections.Generic.IComparer{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(Double, IComparer<Double>)
  nameWithType: List<Double>.BinarySearch(Double, IComparer<Double>)
  fullName: System.Collections.Generic.List<System.Double>.BinarySearch(System.Double, System.Collections.Generic.IComparer<System.Double>)
  nameWithType.vb: List(Of Double).BinarySearch(Double, IComparer(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).BinarySearch(System.Double, System.Collections.Generic.IComparer(Of System.Double))
  name.vb: BinarySearch(Double, IComparer(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<Double>.BinarySearch
    fullName: System.Collections.Generic.List<System.Double>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of Double).BinarySearch
    fullName: System.Collections.Generic.List(Of System.Double).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Clear
  commentId: M:System.Collections.Generic.List{System.Double}.Clear
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Clear
  name: Clear()
  nameWithType: List<Double>.Clear()
  fullName: System.Collections.Generic.List<System.Double>.Clear()
  nameWithType.vb: List(Of Double).Clear()
  fullName.vb: System.Collections.Generic.List(Of System.Double).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<Double>.Clear
    fullName: System.Collections.Generic.List<System.Double>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of Double).Clear
    fullName: System.Collections.Generic.List(Of System.Double).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Contains(System.Double)
  commentId: M:System.Collections.Generic.List{System.Double}.Contains(System.Double)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Contains(`0)
  name: Contains(Double)
  nameWithType: List<Double>.Contains(Double)
  fullName: System.Collections.Generic.List<System.Double>.Contains(System.Double)
  nameWithType.vb: List(Of Double).Contains(Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double).Contains(System.Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<Double>.Contains
    fullName: System.Collections.Generic.List<System.Double>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of Double).Contains
    fullName: System.Collections.Generic.List(Of System.Double).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.ConvertAll``1(System.Converter{System.Double,{TOutput}})
  commentId: M:System.Collections.Generic.List{System.Double}.ConvertAll``1(System.Converter{System.Double,``0})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  name: ConvertAll<TOutput>(Converter<Double, TOutput>)
  nameWithType: List<Double>.ConvertAll<TOutput>(Converter<Double, TOutput>)
  fullName: System.Collections.Generic.List<System.Double>.ConvertAll<TOutput>(System.Converter<System.Double, TOutput>)
  nameWithType.vb: List(Of Double).ConvertAll(Of TOutput)(Converter(Of Double, TOutput))
  fullName.vb: System.Collections.Generic.List(Of System.Double).ConvertAll(Of TOutput)(System.Converter(Of System.Double, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of Double, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<Double>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<System.Double>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of Double).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of System.Double).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.CopyTo(System.Int32,System.Double[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Double}.CopyTo(System.Int32,System.Double[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  name: CopyTo(Int32, Double[], Int32, Int32)
  nameWithType: List<Double>.CopyTo(Int32, Double[], Int32, Int32)
  fullName: System.Collections.Generic.List<System.Double>.CopyTo(System.Int32, System.Double[], System.Int32, System.Int32)
  nameWithType.vb: List(Of Double).CopyTo(Int32, Double(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).CopyTo(System.Int32, System.Double(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, Double(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<Double>.CopyTo
    fullName: System.Collections.Generic.List<System.Double>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of Double).CopyTo
    fullName: System.Collections.Generic.List(Of System.Double).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.CopyTo(System.Double[])
  commentId: M:System.Collections.Generic.List{System.Double}.CopyTo(System.Double[])
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.CopyTo(`0[])
  name: CopyTo(Double[])
  nameWithType: List<Double>.CopyTo(Double[])
  fullName: System.Collections.Generic.List<System.Double>.CopyTo(System.Double[])
  nameWithType.vb: List(Of Double).CopyTo(Double())
  fullName.vb: System.Collections.Generic.List(Of System.Double).CopyTo(System.Double())
  name.vb: CopyTo(Double())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<Double>.CopyTo
    fullName: System.Collections.Generic.List<System.Double>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of Double).CopyTo
    fullName: System.Collections.Generic.List(Of System.Double).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.CopyTo(System.Double[],System.Int32)
  commentId: M:System.Collections.Generic.List{System.Double}.CopyTo(System.Double[],System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  name: CopyTo(Double[], Int32)
  nameWithType: List<Double>.CopyTo(Double[], Int32)
  fullName: System.Collections.Generic.List<System.Double>.CopyTo(System.Double[], System.Int32)
  nameWithType.vb: List(Of Double).CopyTo(Double(), Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).CopyTo(System.Double(), System.Int32)
  name.vb: CopyTo(Double(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<Double>.CopyTo
    fullName: System.Collections.Generic.List<System.Double>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of Double).CopyTo
    fullName: System.Collections.Generic.List(Of System.Double).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Exists(System.Predicate{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.Exists(System.Predicate{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  name: Exists(Predicate<Double>)
  nameWithType: List<Double>.Exists(Predicate<Double>)
  fullName: System.Collections.Generic.List<System.Double>.Exists(System.Predicate<System.Double>)
  nameWithType.vb: List(Of Double).Exists(Predicate(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).Exists(System.Predicate(Of System.Double))
  name.vb: Exists(Predicate(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<Double>.Exists
    fullName: System.Collections.Generic.List<System.Double>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of Double).Exists
    fullName: System.Collections.Generic.List(Of System.Double).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Find(System.Predicate{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.Find(System.Predicate{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  name: Find(Predicate<Double>)
  nameWithType: List<Double>.Find(Predicate<Double>)
  fullName: System.Collections.Generic.List<System.Double>.Find(System.Predicate<System.Double>)
  nameWithType.vb: List(Of Double).Find(Predicate(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).Find(System.Predicate(Of System.Double))
  name.vb: Find(Predicate(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<Double>.Find
    fullName: System.Collections.Generic.List<System.Double>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of Double).Find
    fullName: System.Collections.Generic.List(Of System.Double).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.FindAll(System.Predicate{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.FindAll(System.Predicate{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  name: FindAll(Predicate<Double>)
  nameWithType: List<Double>.FindAll(Predicate<Double>)
  fullName: System.Collections.Generic.List<System.Double>.FindAll(System.Predicate<System.Double>)
  nameWithType.vb: List(Of Double).FindAll(Predicate(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).FindAll(System.Predicate(Of System.Double))
  name.vb: FindAll(Predicate(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<Double>.FindAll
    fullName: System.Collections.Generic.List<System.Double>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of Double).FindAll
    fullName: System.Collections.Generic.List(Of System.Double).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.FindIndex(System.Int32,System.Int32,System.Predicate{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.FindIndex(System.Int32,System.Int32,System.Predicate{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Int32, Predicate<Double>)
  nameWithType: List<Double>.FindIndex(Int32, Int32, Predicate<Double>)
  fullName: System.Collections.Generic.List<System.Double>.FindIndex(System.Int32, System.Int32, System.Predicate<System.Double>)
  nameWithType.vb: List(Of Double).FindIndex(Int32, Int32, Predicate(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).FindIndex(System.Int32, System.Int32, System.Predicate(Of System.Double))
  name.vb: FindIndex(Int32, Int32, Predicate(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<Double>.FindIndex
    fullName: System.Collections.Generic.List<System.Double>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of Double).FindIndex
    fullName: System.Collections.Generic.List(Of System.Double).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.FindIndex(System.Int32,System.Predicate{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.FindIndex(System.Int32,System.Predicate{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Predicate<Double>)
  nameWithType: List<Double>.FindIndex(Int32, Predicate<Double>)
  fullName: System.Collections.Generic.List<System.Double>.FindIndex(System.Int32, System.Predicate<System.Double>)
  nameWithType.vb: List(Of Double).FindIndex(Int32, Predicate(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).FindIndex(System.Int32, System.Predicate(Of System.Double))
  name.vb: FindIndex(Int32, Predicate(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<Double>.FindIndex
    fullName: System.Collections.Generic.List<System.Double>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of Double).FindIndex
    fullName: System.Collections.Generic.List(Of System.Double).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.FindIndex(System.Predicate{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.FindIndex(System.Predicate{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  name: FindIndex(Predicate<Double>)
  nameWithType: List<Double>.FindIndex(Predicate<Double>)
  fullName: System.Collections.Generic.List<System.Double>.FindIndex(System.Predicate<System.Double>)
  nameWithType.vb: List(Of Double).FindIndex(Predicate(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).FindIndex(System.Predicate(Of System.Double))
  name.vb: FindIndex(Predicate(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<Double>.FindIndex
    fullName: System.Collections.Generic.List<System.Double>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of Double).FindIndex
    fullName: System.Collections.Generic.List(Of System.Double).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.FindLast(System.Predicate{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.FindLast(System.Predicate{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  name: FindLast(Predicate<Double>)
  nameWithType: List<Double>.FindLast(Predicate<Double>)
  fullName: System.Collections.Generic.List<System.Double>.FindLast(System.Predicate<System.Double>)
  nameWithType.vb: List(Of Double).FindLast(Predicate(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).FindLast(System.Predicate(Of System.Double))
  name.vb: FindLast(Predicate(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<Double>.FindLast
    fullName: System.Collections.Generic.List<System.Double>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of Double).FindLast
    fullName: System.Collections.Generic.List(Of System.Double).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Int32, Predicate<Double>)
  nameWithType: List<Double>.FindLastIndex(Int32, Int32, Predicate<Double>)
  fullName: System.Collections.Generic.List<System.Double>.FindLastIndex(System.Int32, System.Int32, System.Predicate<System.Double>)
  nameWithType.vb: List(Of Double).FindLastIndex(Int32, Int32, Predicate(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of System.Double))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<Double>.FindLastIndex
    fullName: System.Collections.Generic.List<System.Double>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of Double).FindLastIndex
    fullName: System.Collections.Generic.List(Of System.Double).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.FindLastIndex(System.Int32,System.Predicate{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.FindLastIndex(System.Int32,System.Predicate{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Predicate<Double>)
  nameWithType: List<Double>.FindLastIndex(Int32, Predicate<Double>)
  fullName: System.Collections.Generic.List<System.Double>.FindLastIndex(System.Int32, System.Predicate<System.Double>)
  nameWithType.vb: List(Of Double).FindLastIndex(Int32, Predicate(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).FindLastIndex(System.Int32, System.Predicate(Of System.Double))
  name.vb: FindLastIndex(Int32, Predicate(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<Double>.FindLastIndex
    fullName: System.Collections.Generic.List<System.Double>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of Double).FindLastIndex
    fullName: System.Collections.Generic.List(Of System.Double).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.FindLastIndex(System.Predicate{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.FindLastIndex(System.Predicate{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  name: FindLastIndex(Predicate<Double>)
  nameWithType: List<Double>.FindLastIndex(Predicate<Double>)
  fullName: System.Collections.Generic.List<System.Double>.FindLastIndex(System.Predicate<System.Double>)
  nameWithType.vb: List(Of Double).FindLastIndex(Predicate(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).FindLastIndex(System.Predicate(Of System.Double))
  name.vb: FindLastIndex(Predicate(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<Double>.FindLastIndex
    fullName: System.Collections.Generic.List<System.Double>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of Double).FindLastIndex
    fullName: System.Collections.Generic.List(Of System.Double).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.ForEach(System.Action{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.ForEach(System.Action{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  name: ForEach(Action<Double>)
  nameWithType: List<Double>.ForEach(Action<Double>)
  fullName: System.Collections.Generic.List<System.Double>.ForEach(System.Action<System.Double>)
  nameWithType.vb: List(Of Double).ForEach(Action(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).ForEach(System.Action(Of System.Double))
  name.vb: ForEach(Action(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<Double>.ForEach
    fullName: System.Collections.Generic.List<System.Double>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of Double).ForEach
    fullName: System.Collections.Generic.List(Of System.Double).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.GetEnumerator
  commentId: M:System.Collections.Generic.List{System.Double}.GetEnumerator
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: List<Double>.GetEnumerator()
  fullName: System.Collections.Generic.List<System.Double>.GetEnumerator()
  nameWithType.vb: List(Of Double).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of System.Double).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<Double>.GetEnumerator
    fullName: System.Collections.Generic.List<System.Double>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of Double).GetEnumerator
    fullName: System.Collections.Generic.List(Of System.Double).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Double}.GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  name: GetRange(Int32, Int32)
  nameWithType: List<Double>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<System.Double>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of Double).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<Double>.GetRange
    fullName: System.Collections.Generic.List<System.Double>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of Double).GetRange
    fullName: System.Collections.Generic.List(Of System.Double).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.IndexOf(System.Double)
  commentId: M:System.Collections.Generic.List{System.Double}.IndexOf(System.Double)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.IndexOf(`0)
  name: IndexOf(Double)
  nameWithType: List<Double>.IndexOf(Double)
  fullName: System.Collections.Generic.List<System.Double>.IndexOf(System.Double)
  nameWithType.vb: List(Of Double).IndexOf(Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double).IndexOf(System.Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<Double>.IndexOf
    fullName: System.Collections.Generic.List<System.Double>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of Double).IndexOf
    fullName: System.Collections.Generic.List(Of System.Double).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.IndexOf(System.Double,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Double}.IndexOf(System.Double,System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  name: IndexOf(Double, Int32)
  nameWithType: List<Double>.IndexOf(Double, Int32)
  fullName: System.Collections.Generic.List<System.Double>.IndexOf(System.Double, System.Int32)
  nameWithType.vb: List(Of Double).IndexOf(Double, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).IndexOf(System.Double, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<Double>.IndexOf
    fullName: System.Collections.Generic.List<System.Double>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of Double).IndexOf
    fullName: System.Collections.Generic.List(Of System.Double).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.IndexOf(System.Double,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Double}.IndexOf(System.Double,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  name: IndexOf(Double, Int32, Int32)
  nameWithType: List<Double>.IndexOf(Double, Int32, Int32)
  fullName: System.Collections.Generic.List<System.Double>.IndexOf(System.Double, System.Int32, System.Int32)
  nameWithType.vb: List(Of Double).IndexOf(Double, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).IndexOf(System.Double, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<Double>.IndexOf
    fullName: System.Collections.Generic.List<System.Double>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of Double).IndexOf
    fullName: System.Collections.Generic.List(Of System.Double).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Insert(System.Int32,System.Double)
  commentId: M:System.Collections.Generic.List{System.Double}.Insert(System.Int32,System.Double)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  name: Insert(Int32, Double)
  nameWithType: List<Double>.Insert(Int32, Double)
  fullName: System.Collections.Generic.List<System.Double>.Insert(System.Int32, System.Double)
  nameWithType.vb: List(Of Double).Insert(Int32, Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double).Insert(System.Int32, System.Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<Double>.Insert
    fullName: System.Collections.Generic.List<System.Double>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of Double).Insert
    fullName: System.Collections.Generic.List(Of System.Double).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  name: InsertRange(Int32, IEnumerable<Double>)
  nameWithType: List<Double>.InsertRange(Int32, IEnumerable<Double>)
  fullName: System.Collections.Generic.List<System.Double>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: List(Of Double).InsertRange(Int32, IEnumerable(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: InsertRange(Int32, IEnumerable(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<Double>.InsertRange
    fullName: System.Collections.Generic.List<System.Double>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of Double).InsertRange
    fullName: System.Collections.Generic.List(Of System.Double).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.LastIndexOf(System.Double)
  commentId: M:System.Collections.Generic.List{System.Double}.LastIndexOf(System.Double)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0)
  name: LastIndexOf(Double)
  nameWithType: List<Double>.LastIndexOf(Double)
  fullName: System.Collections.Generic.List<System.Double>.LastIndexOf(System.Double)
  nameWithType.vb: List(Of Double).LastIndexOf(Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double).LastIndexOf(System.Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<Double>.LastIndexOf
    fullName: System.Collections.Generic.List<System.Double>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of Double).LastIndexOf
    fullName: System.Collections.Generic.List(Of System.Double).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.LastIndexOf(System.Double,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Double}.LastIndexOf(System.Double,System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  name: LastIndexOf(Double, Int32)
  nameWithType: List<Double>.LastIndexOf(Double, Int32)
  fullName: System.Collections.Generic.List<System.Double>.LastIndexOf(System.Double, System.Int32)
  nameWithType.vb: List(Of Double).LastIndexOf(Double, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).LastIndexOf(System.Double, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<Double>.LastIndexOf
    fullName: System.Collections.Generic.List<System.Double>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of Double).LastIndexOf
    fullName: System.Collections.Generic.List(Of System.Double).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.LastIndexOf(System.Double,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Double}.LastIndexOf(System.Double,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  name: LastIndexOf(Double, Int32, Int32)
  nameWithType: List<Double>.LastIndexOf(Double, Int32, Int32)
  fullName: System.Collections.Generic.List<System.Double>.LastIndexOf(System.Double, System.Int32, System.Int32)
  nameWithType.vb: List(Of Double).LastIndexOf(Double, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).LastIndexOf(System.Double, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<Double>.LastIndexOf
    fullName: System.Collections.Generic.List<System.Double>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of Double).LastIndexOf
    fullName: System.Collections.Generic.List(Of System.Double).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Remove(System.Double)
  commentId: M:System.Collections.Generic.List{System.Double}.Remove(System.Double)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Remove(`0)
  name: Remove(Double)
  nameWithType: List<Double>.Remove(Double)
  fullName: System.Collections.Generic.List<System.Double>.Remove(System.Double)
  nameWithType.vb: List(Of Double).Remove(Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double).Remove(System.Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<Double>.Remove
    fullName: System.Collections.Generic.List<System.Double>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of Double).Remove
    fullName: System.Collections.Generic.List(Of System.Double).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.RemoveAll(System.Predicate{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.RemoveAll(System.Predicate{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  name: RemoveAll(Predicate<Double>)
  nameWithType: List<Double>.RemoveAll(Predicate<Double>)
  fullName: System.Collections.Generic.List<System.Double>.RemoveAll(System.Predicate<System.Double>)
  nameWithType.vb: List(Of Double).RemoveAll(Predicate(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).RemoveAll(System.Predicate(Of System.Double))
  name.vb: RemoveAll(Predicate(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<Double>.RemoveAll
    fullName: System.Collections.Generic.List<System.Double>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of Double).RemoveAll
    fullName: System.Collections.Generic.List(Of System.Double).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List{System.Double}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: List<Double>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<System.Double>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of Double).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<Double>.RemoveAt
    fullName: System.Collections.Generic.List<System.Double>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of Double).RemoveAt
    fullName: System.Collections.Generic.List(Of System.Double).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Double}.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  name: RemoveRange(Int32, Int32)
  nameWithType: List<Double>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<System.Double>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of Double).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<Double>.RemoveRange
    fullName: System.Collections.Generic.List<System.Double>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of Double).RemoveRange
    fullName: System.Collections.Generic.List(Of System.Double).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Reverse
  commentId: M:System.Collections.Generic.List{System.Double}.Reverse
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Reverse
  name: Reverse()
  nameWithType: List<Double>.Reverse()
  fullName: System.Collections.Generic.List<System.Double>.Reverse()
  nameWithType.vb: List(Of Double).Reverse()
  fullName.vb: System.Collections.Generic.List(Of System.Double).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<Double>.Reverse
    fullName: System.Collections.Generic.List<System.Double>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of Double).Reverse
    fullName: System.Collections.Generic.List(Of System.Double).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Double}.Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  name: Reverse(Int32, Int32)
  nameWithType: List<Double>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<System.Double>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of Double).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<Double>.Reverse
    fullName: System.Collections.Generic.List<System.Double>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of Double).Reverse
    fullName: System.Collections.Generic.List(Of System.Double).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Sort
  commentId: M:System.Collections.Generic.List{System.Double}.Sort
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Sort
  name: Sort()
  nameWithType: List<Double>.Sort()
  fullName: System.Collections.Generic.List<System.Double>.Sort()
  nameWithType.vb: List(Of Double).Sort()
  fullName.vb: System.Collections.Generic.List(Of System.Double).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<Double>.Sort
    fullName: System.Collections.Generic.List<System.Double>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of Double).Sort
    fullName: System.Collections.Generic.List(Of System.Double).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Sort(System.Collections.Generic.IComparer{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.Sort(System.Collections.Generic.IComparer{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  name: Sort(IComparer<Double>)
  nameWithType: List<Double>.Sort(IComparer<Double>)
  fullName: System.Collections.Generic.List<System.Double>.Sort(System.Collections.Generic.IComparer<System.Double>)
  nameWithType.vb: List(Of Double).Sort(IComparer(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).Sort(System.Collections.Generic.IComparer(Of System.Double))
  name.vb: Sort(IComparer(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<Double>.Sort
    fullName: System.Collections.Generic.List<System.Double>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of Double).Sort
    fullName: System.Collections.Generic.List(Of System.Double).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Sort(System.Comparison{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.Sort(System.Comparison{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  name: Sort(Comparison<Double>)
  nameWithType: List<Double>.Sort(Comparison<Double>)
  fullName: System.Collections.Generic.List<System.Double>.Sort(System.Comparison<System.Double>)
  nameWithType.vb: List(Of Double).Sort(Comparison(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).Sort(System.Comparison(Of System.Double))
  name.vb: Sort(Comparison(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<Double>.Sort
    fullName: System.Collections.Generic.List<System.Double>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of Double).Sort
    fullName: System.Collections.Generic.List(Of System.Double).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  name: Sort(Int32, Int32, IComparer<Double>)
  nameWithType: List<Double>.Sort(Int32, Int32, IComparer<Double>)
  fullName: System.Collections.Generic.List<System.Double>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<System.Double>)
  nameWithType.vb: List(Of Double).Sort(Int32, Int32, IComparer(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of System.Double))
  name.vb: Sort(Int32, Int32, IComparer(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<Double>.Sort
    fullName: System.Collections.Generic.List<System.Double>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of Double).Sort
    fullName: System.Collections.Generic.List(Of System.Double).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List{System.Double}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<Double>.GetEnumerator()
  nameWithType: List<Double>.IEnumerable<Double>.GetEnumerator()
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.Generic.IEnumerable<System.Double>.GetEnumerator()
  nameWithType.vb: List(Of Double).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<Double>.GetEnumerator
    nameWithType: List<Double>.IEnumerable<Double>.GetEnumerator
    fullName: System.Collections.Generic.List<System.Double>.System.Collections.Generic.IEnumerable<System.Double>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of Double).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of System.Double).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Double}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<Double>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of Double).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<Double>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<System.Double>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of Double).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of System.Double).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List{System.Double}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: List<Double>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of Double).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<Double>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<System.Double>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of Double).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of System.Double).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List{System.Double}.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  name: IList.Add(Object)
  nameWithType: List<Double>.IList.Add(Object)
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of Double).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<Double>.IList.Add
    fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of Double).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of System.Double).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List{System.Double}.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  name: IList.Contains(Object)
  nameWithType: List<Double>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of Double).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<Double>.IList.Contains
    fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of Double).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of System.Double).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List{System.Double}.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  name: IList.IndexOf(Object)
  nameWithType: List<Double>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of Double).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<Double>.IList.IndexOf
    fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of Double).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of System.Double).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{System.Double}.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  name: IList.Insert(Int32, Object)
  nameWithType: List<Double>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of Double).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<Double>.IList.Insert
    fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of Double).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of System.Double).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List{System.Double}.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  name: IList.Remove(Object)
  nameWithType: List<Double>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of Double).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<Double>.IList.Remove
    fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of Double).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of System.Double).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.ToArray
  commentId: M:System.Collections.Generic.List{System.Double}.ToArray
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.ToArray
  name: ToArray()
  nameWithType: List<Double>.ToArray()
  fullName: System.Collections.Generic.List<System.Double>.ToArray()
  nameWithType.vb: List(Of Double).ToArray()
  fullName.vb: System.Collections.Generic.List(Of System.Double).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<Double>.ToArray
    fullName: System.Collections.Generic.List<System.Double>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of Double).ToArray
    fullName: System.Collections.Generic.List(Of System.Double).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.TrimExcess
  commentId: M:System.Collections.Generic.List{System.Double}.TrimExcess
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.TrimExcess
  name: TrimExcess()
  nameWithType: List<Double>.TrimExcess()
  fullName: System.Collections.Generic.List<System.Double>.TrimExcess()
  nameWithType.vb: List(Of Double).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of System.Double).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<Double>.TrimExcess
    fullName: System.Collections.Generic.List<System.Double>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of Double).TrimExcess
    fullName: System.Collections.Generic.List(Of System.Double).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.TrueForAll(System.Predicate{System.Double})
  commentId: M:System.Collections.Generic.List{System.Double}.TrueForAll(System.Predicate{System.Double})
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  name: TrueForAll(Predicate<Double>)
  nameWithType: List<Double>.TrueForAll(Predicate<Double>)
  fullName: System.Collections.Generic.List<System.Double>.TrueForAll(System.Predicate<System.Double>)
  nameWithType.vb: List(Of Double).TrueForAll(Predicate(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Double).TrueForAll(System.Predicate(Of System.Double))
  name.vb: TrueForAll(Predicate(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<Double>.TrueForAll
    fullName: System.Collections.Generic.List<System.Double>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of Double).TrueForAll
    fullName: System.Collections.Generic.List(Of System.Double).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.Capacity
  commentId: P:System.Collections.Generic.List{System.Double}.Capacity
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Capacity
  name: Capacity
  nameWithType: List<Double>.Capacity
  fullName: System.Collections.Generic.List<System.Double>.Capacity
  nameWithType.vb: List(Of Double).Capacity
  fullName.vb: System.Collections.Generic.List(Of System.Double).Capacity
- uid: System.Collections.Generic.List{System.Double}.Count
  commentId: P:System.Collections.Generic.List{System.Double}.Count
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Count
  name: Count
  nameWithType: List<Double>.Count
  fullName: System.Collections.Generic.List<System.Double>.Count
  nameWithType.vb: List(Of Double).Count
  fullName.vb: System.Collections.Generic.List(Of System.Double).Count
- uid: System.Collections.Generic.List{System.Double}.Item(System.Int32)
  commentId: P:System.Collections.Generic.List{System.Double}.Item(System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: List<Double>.Item[Int32]
  fullName: System.Collections.Generic.List<System.Double>.Item[System.Int32]
  nameWithType.vb: List(Of Double).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<Double>.Item
    fullName: System.Collections.Generic.List<System.Double>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of Double).Item
    fullName: System.Collections.Generic.List(Of System.Double).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Double}.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List{System.Double}.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<Double>.IsReadOnly
  nameWithType: List<Double>.ICollection<Double>.IsReadOnly
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.Generic.ICollection<System.Double>.IsReadOnly
  nameWithType.vb: List(Of Double).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List{System.Double}.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List{System.Double}.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: List<Double>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of Double).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List{System.Double}.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List{System.Double}.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: List<Double>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of Double).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List{System.Double}.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List{System.Double}.System#Collections#IList#IsFixedSize
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: List<Double>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of Double).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List{System.Double}.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List{System.Double}.System#Collections#IList#IsReadOnly
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: List<Double>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of Double).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List{System.Double}.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List{System.Double}.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Generic.List{System.Double}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  name: IList.Item[Int32]
  nameWithType: List<Double>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of Double).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Double).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<Double>.IList.Item
    fullName: System.Collections.Generic.List<System.Double>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of Double).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of System.Double).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Double}.GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector
  commentId: M:GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector(System.Collections.Generic.IEnumerable{System.Double})
  parent: GeometrySharp.ExtendedMethods.ExtendedEnumerable
  definition: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector(System.Collections.Generic.IEnumerable{System.Double})
  name: ToVector()
  nameWithType: ExtendedEnumerable.ToVector()
  fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector()
  spec.csharp:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector
    name: ToVector
    nameWithType: ExtendedEnumerable.ToVector
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector
    name: ToVector
    nameWithType: ExtendedEnumerable.ToVector
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Double}.GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot
  commentId: M:GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot(System.Collections.Generic.IEnumerable{System.Double})
  parent: GeometrySharp.ExtendedMethods.ExtendedEnumerable
  definition: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot(System.Collections.Generic.IEnumerable{System.Double})
  name: ToKnot()
  nameWithType: ExtendedEnumerable.ToKnot()
  fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot()
  spec.csharp:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot
    name: ToKnot
    nameWithType: ExtendedEnumerable.ToKnot
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot
    name: ToKnot
    nameWithType: ExtendedEnumerable.ToKnot
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Double}.GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Func{System.Double,System.Double,System.Boolean})
  commentId: M:GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  parent: GeometrySharp.ExtendedMethods.ExtendedEnumerable
  definition: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  name: Unique<Double>(Func<Double, Double, Boolean>)
  nameWithType: ExtendedEnumerable.Unique<Double>(Func<Double, Double, Boolean>)
  fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique<System.Double>(System.Func<System.Double, System.Double, System.Boolean>)
  nameWithType.vb: ExtendedEnumerable.Unique(Of Double)(Func(Of Double, Double, Boolean))
  fullName.vb: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique(Of System.Double)(System.Func(Of System.Double, System.Double, System.Boolean))
  name.vb: Unique(Of Double)(Func(Of Double, Double, Boolean))
  spec.csharp:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Func{``0,``0,System.Boolean})
    name: Unique<Double>
    nameWithType: ExtendedEnumerable.Unique<Double>
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique<System.Double>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Func{``0,``0,System.Boolean})
    name: Unique(Of Double)
    nameWithType: ExtendedEnumerable.Unique(Of Double)
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique(Of System.Double)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  isExternal: true
  name: IList.get_Item(Int32)
  nameWithType: List<T>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of T).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<T>.IList.get_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of T).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  isExternal: true
  name: IList.set_Item(Int32, Object)
  nameWithType: List<T>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<T>.IList.set_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of T).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Add(`0)
  commentId: M:System.Collections.Generic.List`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: List<T>.Add(T)
  fullName: System.Collections.Generic.List<T>.Add(T)
  nameWithType.vb: List(Of T).Add(T)
  fullName.vb: System.Collections.Generic.List(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<T>.Add
    fullName: System.Collections.Generic.List<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of T).Add
    fullName: System.Collections.Generic.List(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).AddRange(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<T>.AddRange
    fullName: System.Collections.Generic.List<T>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of T).AddRange
    fullName: System.Collections.Generic.List(Of T).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AsReadOnly
  commentId: M:System.Collections.Generic.List`1.AsReadOnly
  isExternal: true
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
  nameWithType.vb: List(Of T).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of T).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<T>.AsReadOnly
    fullName: System.Collections.Generic.List<T>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of T).AsReadOnly
    fullName: System.Collections.Generic.List(Of T).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(Int32, Int32, T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Int32, Int32, T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  isExternal: true
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
  nameWithType.vb: List(Of T).BinarySearch(T)
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Clear
  commentId: M:System.Collections.Generic.List`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
  nameWithType.vb: List(Of T).Clear()
  fullName.vb: System.Collections.Generic.List(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<T>.Clear
    fullName: System.Collections.Generic.List<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of T).Clear
    fullName: System.Collections.Generic.List(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Contains(`0)
  commentId: M:System.Collections.Generic.List`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
  nameWithType.vb: List(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.List(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<T>.Contains
    fullName: System.Collections.Generic.List<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of T).Contains
    fullName: System.Collections.Generic.List(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  commentId: M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  isExternal: true
  name: ConvertAll<TOutput>(Converter<T, TOutput>)
  nameWithType: List<T>.ConvertAll<TOutput>(Converter<T, TOutput>)
  fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>(System.Converter<T, TOutput>)
  nameWithType.vb: List(Of T).ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  fullName.vb: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)(System.Converter(Of T, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<T>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of T).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  isExternal: true
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
  nameWithType.vb: List(Of T).CopyTo(Int32, T(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, T(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  isExternal: true
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
  nameWithType.vb: List(Of T).CopyTo(T())
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T())
  name.vb: CopyTo(T())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: List<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: List(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  isExternal: true
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(System.Predicate<T>)
  nameWithType.vb: List(Of T).Exists(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Exists(System.Predicate(Of T))
  name.vb: Exists(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<T>.Exists
    fullName: System.Collections.Generic.List<T>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of T).Exists
    fullName: System.Collections.Generic.List(Of T).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  isExternal: true
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(System.Predicate<T>)
  nameWithType.vb: List(Of T).Find(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Find(System.Predicate(Of T))
  name.vb: Find(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<T>.Find
    fullName: System.Collections.Generic.List<T>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of T).Find
    fullName: System.Collections.Generic.List(Of T).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  isExternal: true
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindAll(System.Predicate(Of T))
  name.vb: FindAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<T>.FindAll
    fullName: System.Collections.Generic.List<T>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of T).FindAll
    fullName: System.Collections.Generic.List(Of T).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  isExternal: true
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Predicate(Of T))
  name.vb: FindIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  isExternal: true
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLast(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLast(System.Predicate(Of T))
  name.vb: FindLast(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<T>.FindLast
    fullName: System.Collections.Generic.List<T>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of T).FindLast
    fullName: System.Collections.Generic.List(Of T).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Predicate(Of T))
  name.vb: FindLastIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  isExternal: true
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(System.Action<T>)
  nameWithType.vb: List(Of T).ForEach(Action(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).ForEach(System.Action(Of T))
  name.vb: ForEach(Action(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<T>.ForEach
    fullName: System.Collections.Generic.List<T>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of T).ForEach
    fullName: System.Collections.Generic.List(Of T).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetEnumerator
  commentId: M:System.Collections.Generic.List`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
  nameWithType.vb: List(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of T).GetEnumerator
    fullName: System.Collections.Generic.List(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  isExternal: true
  name: GetRange(Int32, Int32)
  nameWithType: List<T>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<T>.GetRange
    fullName: System.Collections.Generic.List<T>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of T).GetRange
    fullName: System.Collections.Generic.List(Of T).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
  nameWithType.vb: List(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32)
  nameWithType: List<T>.IndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32, Int32)
  nameWithType: List<T>.IndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: List<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.List<T>.Insert(System.Int32, T)
  nameWithType.vb: List(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.List(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<T>.Insert
    fullName: System.Collections.Generic.List<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of T).Insert
    fullName: System.Collections.Generic.List(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).InsertRange(Int32, IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<T>.InsertRange
    fullName: System.Collections.Generic.List<T>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of T).InsertRange
    fullName: System.Collections.Generic.List(Of T).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  isExternal: true
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
  nameWithType.vb: List(Of T).LastIndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Remove(`0)
  commentId: M:System.Collections.Generic.List`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: List<T>.Remove(T)
  fullName: System.Collections.Generic.List<T>.Remove(T)
  nameWithType.vb: List(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.List(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<T>.Remove
    fullName: System.Collections.Generic.List<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of T).Remove
    fullName: System.Collections.Generic.List(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  isExternal: true
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).RemoveAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAll(System.Predicate(Of T))
  name.vb: RemoveAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<T>.RemoveAll
    fullName: System.Collections.Generic.List<T>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of T).RemoveAll
    fullName: System.Collections.Generic.List(Of T).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<T>.RemoveAt
    fullName: System.Collections.Generic.List<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of T).RemoveAt
    fullName: System.Collections.Generic.List(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  isExternal: true
  name: RemoveRange(Int32, Int32)
  nameWithType: List<T>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<T>.RemoveRange
    fullName: System.Collections.Generic.List<T>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of T).RemoveRange
    fullName: System.Collections.Generic.List(Of T).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse
  commentId: M:System.Collections.Generic.List`1.Reverse
  isExternal: true
  name: Reverse()
  nameWithType: List<T>.Reverse()
  fullName: System.Collections.Generic.List<T>.Reverse()
  nameWithType.vb: List(Of T).Reverse()
  fullName.vb: System.Collections.Generic.List(Of T).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  isExternal: true
  name: Reverse(Int32, Int32)
  nameWithType: List<T>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort
  commentId: M:System.Collections.Generic.List`1.Sort
  isExternal: true
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
  nameWithType.vb: List(Of T).Sort()
  fullName.vb: System.Collections.Generic.List(Of T).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  isExternal: true
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Comparison<T>)
  nameWithType.vb: List(Of T).Sort(Comparison(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(Int32, Int32, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Int32, Int32, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isExternal: true
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: List<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<T>.GetEnumerator
    nameWithType: List<T>.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<T>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<T>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of T).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: List<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<T>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  isExternal: true
  name: IList.Add(Object)
  nameWithType: List<T>.IList.Add(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<T>.IList.Add
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of T).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  isExternal: true
  name: IList.Contains(Object)
  nameWithType: List<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<T>.IList.Contains
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of T).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  isExternal: true
  name: IList.IndexOf(Object)
  nameWithType: List<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<T>.IList.IndexOf
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of T).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  isExternal: true
  name: IList.Insert(Int32, Object)
  nameWithType: List<T>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<T>.IList.Insert
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of T).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  isExternal: true
  name: IList.Remove(Object)
  nameWithType: List<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<T>.IList.Remove
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of T).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ToArray
  commentId: M:System.Collections.Generic.List`1.ToArray
  isExternal: true
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
  nameWithType.vb: List(Of T).ToArray()
  fullName.vb: System.Collections.Generic.List(Of T).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<T>.ToArray
    fullName: System.Collections.Generic.List<T>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of T).ToArray
    fullName: System.Collections.Generic.List(Of T).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrimExcess
  commentId: M:System.Collections.Generic.List`1.TrimExcess
  isExternal: true
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
  nameWithType.vb: List(Of T).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of T).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<T>.TrimExcess
    fullName: System.Collections.Generic.List<T>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of T).TrimExcess
    fullName: System.Collections.Generic.List(Of T).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  isExternal: true
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).TrueForAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).TrueForAll(System.Predicate(Of T))
  name.vb: TrueForAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<T>.TrueForAll
    fullName: System.Collections.Generic.List<T>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of T).TrueForAll
    fullName: System.Collections.Generic.List(Of T).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  isExternal: true
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  nameWithType.vb: List(Of T).Capacity
  fullName.vb: System.Collections.Generic.List(Of T).Capacity
- uid: System.Collections.Generic.List`1.Count
  commentId: P:System.Collections.Generic.List`1.Count
  isExternal: true
  name: Count
  nameWithType: List<T>.Count
  fullName: System.Collections.Generic.List<T>.Count
  nameWithType.vb: List(Of T).Count
  fullName.vb: System.Collections.Generic.List(Of T).Count
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: List<T>.Item[Int32]
  fullName: System.Collections.Generic.List<T>.Item[System.Int32]
  nameWithType.vb: List(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<T>.Item
    fullName: System.Collections.Generic.List<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of T).Item
    fullName: System.Collections.Generic.List(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  isExternal: true
  name: ICollection<T>.IsReadOnly
  nameWithType: List<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  isExternal: true
  name: ICollection.IsSynchronized
  nameWithType: List<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  isExternal: true
  name: ICollection.SyncRoot
  nameWithType: List<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  isExternal: true
  name: IList.IsFixedSize
  nameWithType: List<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  isExternal: true
  name: IList.IsReadOnly
  nameWithType: List<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  isExternal: true
  name: IList.Item[Int32]
  nameWithType: List<T>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of T).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<T>.IList.Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of T).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
  name: ToVector(IEnumerable<Double>)
  nameWithType: ExtendedEnumerable.ToVector(IEnumerable<Double>)
  fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector(System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: ExtendedEnumerable.ToVector(IEnumerable(Of Double))
  fullName.vb: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: ToVector(IEnumerable(Of Double))
  spec.csharp:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector(System.Collections.Generic.IEnumerable{System.Double})
    name: ToVector
    nameWithType: ExtendedEnumerable.ToVector
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector(System.Collections.Generic.IEnumerable{System.Double})
    name: ToVector
    nameWithType: ExtendedEnumerable.ToVector
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToVector
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable
  commentId: T:GeometrySharp.ExtendedMethods.ExtendedEnumerable
  parent: GeometrySharp.ExtendedMethods
  name: ExtendedEnumerable
  nameWithType: ExtendedEnumerable
  fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable
- uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
  name: ToKnot(IEnumerable<Double>)
  nameWithType: ExtendedEnumerable.ToKnot(IEnumerable<Double>)
  fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot(System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: ExtendedEnumerable.ToKnot(IEnumerable(Of Double))
  fullName.vb: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: ToKnot(IEnumerable(Of Double))
  spec.csharp:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot(System.Collections.Generic.IEnumerable{System.Double})
    name: ToKnot
    nameWithType: ExtendedEnumerable.ToKnot
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot(System.Collections.Generic.IEnumerable{System.Double})
    name: ToKnot
    nameWithType: ExtendedEnumerable.ToKnot
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.ToKnot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  isExternal: true
  name: Unique<T>(IEnumerable<T>, Func<T, T, Boolean>)
  nameWithType: ExtendedEnumerable.Unique<T>(IEnumerable<T>, Func<T, T, Boolean>)
  fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, System.Boolean>)
  nameWithType.vb: ExtendedEnumerable.Unique(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  fullName.vb: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, System.Boolean))
  name.vb: Unique(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  spec.csharp:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: Unique<T>
    nameWithType: ExtendedEnumerable.Unique<T>
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: Unique(Of T)
    nameWithType: ExtendedEnumerable.Unique(Of T)
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.ExtendedMethods
  commentId: N:GeometrySharp.ExtendedMethods
  name: GeometrySharp.ExtendedMethods
  nameWithType: GeometrySharp.ExtendedMethods
  fullName: GeometrySharp.ExtendedMethods
- uid: GeometrySharp.Geometry.Vector3.#ctor*
  commentId: Overload:GeometrySharp.Geometry.Vector3.#ctor
  name: Vector3
  nameWithType: Vector3.Vector3
  fullName: GeometrySharp.Geometry.Vector3.Vector3
- uid: GeometrySharp.Geometry.Vector3.Unset*
  commentId: Overload:GeometrySharp.Geometry.Vector3.Unset
  name: Unset
  nameWithType: Vector3.Unset
  fullName: GeometrySharp.Geometry.Vector3.Unset
- uid: GeometrySharp.Geometry.Vector3
  commentId: T:GeometrySharp.Geometry.Vector3
  parent: GeometrySharp.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: GeometrySharp.Geometry.Vector3
- uid: GeometrySharp.Geometry.Vector3.XAxis*
  commentId: Overload:GeometrySharp.Geometry.Vector3.XAxis
  name: XAxis
  nameWithType: Vector3.XAxis
  fullName: GeometrySharp.Geometry.Vector3.XAxis
- uid: GeometrySharp.Geometry.Vector3.YAxis*
  commentId: Overload:GeometrySharp.Geometry.Vector3.YAxis
  name: YAxis
  nameWithType: Vector3.YAxis
  fullName: GeometrySharp.Geometry.Vector3.YAxis
- uid: GeometrySharp.Geometry.Vector3.ZAxis*
  commentId: Overload:GeometrySharp.Geometry.Vector3.ZAxis
  name: ZAxis
  nameWithType: Vector3.ZAxis
  fullName: GeometrySharp.Geometry.Vector3.ZAxis
- uid: GeometrySharp.Geometry.Vector3.AngleBetween*
  commentId: Overload:GeometrySharp.Geometry.Vector3.AngleBetween
  name: AngleBetween
  nameWithType: Vector3.AngleBetween
  fullName: GeometrySharp.Geometry.Vector3.AngleBetween
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: GeometrySharp.Geometry.Vector3.Reverse*
  commentId: Overload:GeometrySharp.Geometry.Vector3.Reverse
  name: Reverse
  nameWithType: Vector3.Reverse
  fullName: GeometrySharp.Geometry.Vector3.Reverse
- uid: GeometrySharp.Geometry.Vector3.IsValid*
  commentId: Overload:GeometrySharp.Geometry.Vector3.IsValid
  name: IsValid
  nameWithType: Vector3.IsValid
  fullName: GeometrySharp.Geometry.Vector3.IsValid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: GeometrySharp.Geometry.Vector3.isUnitize*
  commentId: Overload:GeometrySharp.Geometry.Vector3.isUnitize
  name: isUnitize
  nameWithType: Vector3.isUnitize
  fullName: GeometrySharp.Geometry.Vector3.isUnitize
- uid: GeometrySharp.Geometry.Vector3.IsZero*
  commentId: Overload:GeometrySharp.Geometry.Vector3.IsZero
  name: IsZero
  nameWithType: Vector3.IsZero
  fullName: GeometrySharp.Geometry.Vector3.IsZero
- uid: GeometrySharp.Geometry.Vector3.Amplify*
  commentId: Overload:GeometrySharp.Geometry.Vector3.Amplify
  name: Amplify
  nameWithType: Vector3.Amplify
  fullName: GeometrySharp.Geometry.Vector3.Amplify
- uid: GeometrySharp.Geometry.Vector3.Length*
  commentId: Overload:GeometrySharp.Geometry.Vector3.Length
  name: Length
  nameWithType: Vector3.Length
  fullName: GeometrySharp.Geometry.Vector3.Length
- uid: GeometrySharp.Geometry.Vector3.Lerp*
  commentId: Overload:GeometrySharp.Geometry.Vector3.Lerp
  name: Lerp
  nameWithType: Vector3.Lerp
  fullName: GeometrySharp.Geometry.Vector3.Lerp
- uid: GeometrySharp.Geometry.Vector3.SquaredLength*
  commentId: Overload:GeometrySharp.Geometry.Vector3.SquaredLength
  name: SquaredLength
  nameWithType: Vector3.SquaredLength
  fullName: GeometrySharp.Geometry.Vector3.SquaredLength
- uid: GeometrySharp.Geometry.Vector3.IsPerpendicularTo*
  commentId: Overload:GeometrySharp.Geometry.Vector3.IsPerpendicularTo
  name: IsPerpendicularTo
  nameWithType: Vector3.IsPerpendicularTo
  fullName: GeometrySharp.Geometry.Vector3.IsPerpendicularTo
- uid: GeometrySharp.Geometry.Vector3.IsParallelTo*
  commentId: Overload:GeometrySharp.Geometry.Vector3.IsParallelTo
  name: IsParallelTo
  nameWithType: Vector3.IsParallelTo
  fullName: GeometrySharp.Geometry.Vector3.IsParallelTo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: GeometrySharp.Geometry.Vector3.Rotate*
  commentId: Overload:GeometrySharp.Geometry.Vector3.Rotate
  name: Rotate
  nameWithType: Vector3.Rotate
  fullName: GeometrySharp.Geometry.Vector3.Rotate
- uid: GeometrySharp.Geometry.Vector3.Cross*
  commentId: Overload:GeometrySharp.Geometry.Vector3.Cross
  name: Cross
  nameWithType: Vector3.Cross
  fullName: GeometrySharp.Geometry.Vector3.Cross
- uid: GeometrySharp.Geometry.Vector3.Dot*
  commentId: Overload:GeometrySharp.Geometry.Vector3.Dot
  name: Dot
  nameWithType: Vector3.Dot
  fullName: GeometrySharp.Geometry.Vector3.Dot
- uid: GeometrySharp.Geometry.Vector3.Unitize*
  commentId: Overload:GeometrySharp.Geometry.Vector3.Unitize
  name: Unitize
  nameWithType: Vector3.Unitize
  fullName: GeometrySharp.Geometry.Vector3.Unitize
- uid: GeometrySharp.Geometry.Vector3.Zero1d*
  commentId: Overload:GeometrySharp.Geometry.Vector3.Zero1d
  name: Zero1d
  nameWithType: Vector3.Zero1d
  fullName: GeometrySharp.Geometry.Vector3.Zero1d
- uid: GeometrySharp.Geometry.Vector3.Zero2d*
  commentId: Overload:GeometrySharp.Geometry.Vector3.Zero2d
  name: Zero2d
  nameWithType: Vector3.Zero2d
  fullName: GeometrySharp.Geometry.Vector3.Zero2d
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  commentId: T:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector3>
  nameWithType: List<Vector3>
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: List(Of Vector3)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3)
  name.vb: List(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.Vector3.Zero3d*
  commentId: Overload:GeometrySharp.Geometry.Vector3.Zero3d
  name: Zero3d
  nameWithType: Vector3.Zero3d
  fullName: GeometrySharp.Geometry.Vector3.Zero3d
- uid: System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<List<Vector3>>
  nameWithType: List<List<Vector3>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>>
  nameWithType.vb: List(Of List(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3))
  name.vb: List(Of List(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.Vector3.DistanceTo*
  commentId: Overload:GeometrySharp.Geometry.Vector3.DistanceTo
  name: DistanceTo
  nameWithType: Vector3.DistanceTo
  fullName: GeometrySharp.Geometry.Vector3.DistanceTo
- uid: GeometrySharp.Geometry.Line
  commentId: T:GeometrySharp.Geometry.Line
  parent: GeometrySharp.Geometry
  name: Line
  nameWithType: Line
  fullName: GeometrySharp.Geometry.Line
- uid: GeometrySharp.Geometry.Vector3.IsPointOnPlane*
  commentId: Overload:GeometrySharp.Geometry.Vector3.IsPointOnPlane
  name: IsPointOnPlane
  nameWithType: Vector3.IsPointOnPlane
  fullName: GeometrySharp.Geometry.Vector3.IsPointOnPlane
- uid: GeometrySharp.Geometry.Plane
  commentId: T:GeometrySharp.Geometry.Plane
  parent: GeometrySharp.Geometry
  name: Plane
  nameWithType: Plane
  fullName: GeometrySharp.Geometry.Plane
- uid: GeometrySharp.Geometry.Vector3.AddMulMutate*
  commentId: Overload:GeometrySharp.Geometry.Vector3.AddMulMutate
  name: AddMulMutate
  nameWithType: Vector3.AddMulMutate
  fullName: GeometrySharp.Geometry.Vector3.AddMulMutate
- uid: GeometrySharp.Geometry.Vector3.SubMulMutate*
  commentId: Overload:GeometrySharp.Geometry.Vector3.SubMulMutate
  name: SubMulMutate
  nameWithType: Vector3.SubMulMutate
  fullName: GeometrySharp.Geometry.Vector3.SubMulMutate
- uid: GeometrySharp.Geometry.Vector3.op_Multiply*
  commentId: Overload:GeometrySharp.Geometry.Vector3.op_Multiply
  name: Multiply
  nameWithType: Vector3.Multiply
  fullName: GeometrySharp.Geometry.Vector3.Multiply
- uid: GeometrySharp.Core.Matrix
  commentId: T:GeometrySharp.Core.Matrix
  parent: GeometrySharp.Core
  name: Matrix
  nameWithType: Matrix
  fullName: GeometrySharp.Core.Matrix
- uid: GeometrySharp.Core
  commentId: N:GeometrySharp.Core
  name: GeometrySharp.Core
  nameWithType: GeometrySharp.Core
  fullName: GeometrySharp.Core
- uid: GeometrySharp.Core.Transform
  commentId: T:GeometrySharp.Core.Transform
  parent: GeometrySharp.Core
  name: Transform
  nameWithType: Transform
  fullName: GeometrySharp.Core.Transform
- uid: GeometrySharp.Geometry.Vector3.op_Division*
  commentId: Overload:GeometrySharp.Geometry.Vector3.op_Division
  name: Division
  nameWithType: Vector3.Division
  fullName: GeometrySharp.Geometry.Vector3.Division
- uid: GeometrySharp.Geometry.Vector3.op_Subtraction*
  commentId: Overload:GeometrySharp.Geometry.Vector3.op_Subtraction
  name: Subtraction
  nameWithType: Vector3.Subtraction
  fullName: GeometrySharp.Geometry.Vector3.Subtraction
- uid: GeometrySharp.Geometry.Vector3.op_Addition*
  commentId: Overload:GeometrySharp.Geometry.Vector3.op_Addition
  name: Addition
  nameWithType: Vector3.Addition
  fullName: GeometrySharp.Geometry.Vector3.Addition
- uid: GeometrySharp.Geometry.Vector3.op_Equality*
  commentId: Overload:GeometrySharp.Geometry.Vector3.op_Equality
  name: Equality
  nameWithType: Vector3.Equality
  fullName: GeometrySharp.Geometry.Vector3.Equality
- uid: GeometrySharp.Geometry.Vector3.op_Inequality*
  commentId: Overload:GeometrySharp.Geometry.Vector3.op_Inequality
  name: Inequality
  nameWithType: Vector3.Inequality
  fullName: GeometrySharp.Geometry.Vector3.Inequality
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.Vector3.Equals*
  commentId: Overload:GeometrySharp.Geometry.Vector3.Equals
  name: Equals
  nameWithType: Vector3.Equals
  fullName: GeometrySharp.Geometry.Vector3.Equals
- uid: System.IEquatable{GeometrySharp.Geometry.Vector3}.Equals(GeometrySharp.Geometry.Vector3)
  commentId: M:System.IEquatable{GeometrySharp.Geometry.Vector3}.Equals(GeometrySharp.Geometry.Vector3)
  parent: System.IEquatable{GeometrySharp.Geometry.Vector3}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Vector3)
  nameWithType: IEquatable<Vector3>.Equals(Vector3)
  fullName: System.IEquatable<GeometrySharp.Geometry.Vector3>.Equals(GeometrySharp.Geometry.Vector3)
  nameWithType.vb: IEquatable(Of Vector3).Equals(Vector3)
  fullName.vb: System.IEquatable(Of GeometrySharp.Geometry.Vector3).Equals(GeometrySharp.Geometry.Vector3)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Vector3>.Equals
    fullName: System.IEquatable<GeometrySharp.Geometry.Vector3>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Vector3).Equals
    fullName: System.IEquatable(Of GeometrySharp.Geometry.Vector3).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.Vector3.IsEqualRoundingDecimal*
  commentId: Overload:GeometrySharp.Geometry.Vector3.IsEqualRoundingDecimal
  name: IsEqualRoundingDecimal
  nameWithType: Vector3.IsEqualRoundingDecimal
  fullName: GeometrySharp.Geometry.Vector3.IsEqualRoundingDecimal
- uid: GeometrySharp.Geometry.Vector3.PerpendicularTo*
  commentId: Overload:GeometrySharp.Geometry.Vector3.PerpendicularTo
  name: PerpendicularTo
  nameWithType: Vector3.PerpendicularTo
  fullName: GeometrySharp.Geometry.Vector3.PerpendicularTo
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.Vector3.ToString*
  commentId: Overload:GeometrySharp.Geometry.Vector3.ToString
  name: ToString
  nameWithType: Vector3.ToString
  fullName: GeometrySharp.Geometry.Vector3.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
