### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Core.Sets
  commentId: T:GeometrySharp.Core.Sets
  id: Sets
  parent: GeometrySharp.Core
  children:
  - GeometrySharp.Core.Sets.Dimension(System.Collections.Generic.IList{System.Double})
  - GeometrySharp.Core.Sets.LinearSpace(GeometrySharp.Core.Interval,System.Int32)
  - GeometrySharp.Core.Sets.Range(GeometrySharp.Core.Interval,System.Int32)
  - GeometrySharp.Core.Sets.Range(System.Int32)
  - GeometrySharp.Core.Sets.RepeatData``1(``0,System.Int32)
  - GeometrySharp.Core.Sets.SetDifference(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})
  - GeometrySharp.Core.Sets.SetUnion(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})
  - GeometrySharp.Core.Sets.Span(System.Double,System.Double,System.Int32)
  langs:
  - csharp
  - vb
  name: Sets
  nameWithType: Sets
  fullName: GeometrySharp.Core.Sets
  type: Class
  source:
    remote:
      path: GeometrySharp/Core/Sets.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Sets
    path: ../GeometrySharp/Core/Sets.cs
    startLine: 10
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nProvide utility function for sets creation.\nExample range, linear subdivisions and boolean operations.\n"
  example: []
  syntax:
    content: public static class Sets
    content.vb: Public Module Sets
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: GeometrySharp.Core.Sets.Dimension(System.Collections.Generic.IList{System.Double})
  commentId: M:GeometrySharp.Core.Sets.Dimension(System.Collections.Generic.IList{System.Double})
  id: Dimension(System.Collections.Generic.IList{System.Double})
  parent: GeometrySharp.Core.Sets
  langs:
  - csharp
  - vb
  name: Dimension(IList<Double>)
  nameWithType: Sets.Dimension(IList<Double>)
  fullName: GeometrySharp.Core.Sets.Dimension(System.Collections.Generic.IList<System.Double>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Sets.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Dimension
    path: ../GeometrySharp/Core/Sets.cs
    startLine: 18
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nThe range of a set of number, or the distance between the smallest value to the biggest in the collection.\n"
  example: []
  syntax:
    content: public static double Dimension(IList<double> a)
    parameters:
    - id: a
      type: System.Collections.Generic.IList{System.Double}
      description: Set of numbers.
    return:
      type: System.Double
      description: The range.
    content.vb: Public Shared Function Dimension(a As IList(Of Double)) As Double
  overload: GeometrySharp.Core.Sets.Dimension*
  nameWithType.vb: Sets.Dimension(IList(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Core.Sets.Dimension(System.Collections.Generic.IList(Of System.Double))
  name.vb: Dimension(IList(Of Double))
- uid: GeometrySharp.Core.Sets.Range(GeometrySharp.Core.Interval,System.Int32)
  commentId: M:GeometrySharp.Core.Sets.Range(GeometrySharp.Core.Interval,System.Int32)
  id: Range(GeometrySharp.Core.Interval,System.Int32)
  parent: GeometrySharp.Core.Sets
  langs:
  - csharp
  - vb
  name: Range(Interval, Int32)
  nameWithType: Sets.Range(Interval, Int32)
  fullName: GeometrySharp.Core.Sets.Range(GeometrySharp.Core.Interval, System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Sets.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Range
    path: ../GeometrySharp/Core/Sets.cs
    startLine: 30
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nCreate a range of numbers. \n"
  example: []
  syntax:
    content: public static IList<double> Range(Interval domain, int step)
    parameters:
    - id: domain
      type: GeometrySharp.Core.Interval
      description: Domain of numeric range.
    - id: step
      type: System.Int32
      description: Number of steps
    return:
      type: System.Collections.Generic.IList{System.Double}
      description: A range of numbers.
    content.vb: Public Shared Function Range(domain As Interval, step As Integer) As IList(Of Double)
  overload: GeometrySharp.Core.Sets.Range*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Sets.LinearSpace(GeometrySharp.Core.Interval,System.Int32)
  commentId: M:GeometrySharp.Core.Sets.LinearSpace(GeometrySharp.Core.Interval,System.Int32)
  id: LinearSpace(GeometrySharp.Core.Interval,System.Int32)
  parent: GeometrySharp.Core.Sets
  langs:
  - csharp
  - vb
  name: LinearSpace(Interval, Int32)
  nameWithType: Sets.LinearSpace(Interval, Int32)
  fullName: GeometrySharp.Core.Sets.LinearSpace(GeometrySharp.Core.Interval, System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Sets.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: LinearSpace
    path: ../GeometrySharp/Core/Sets.cs
    startLine: 53
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nReturns a list of evenly spaced numbers over a specified interval.\n"
  example: []
  syntax:
    content: public static IList<double> LinearSpace(Interval domain, int step)
    parameters:
    - id: domain
      type: GeometrySharp.Core.Interval
      description: Domain of numeric range.
    - id: step
      type: System.Int32
      description: Number of steps.
    return:
      type: System.Collections.Generic.IList{System.Double}
      description: A list of equally spaced numbers.
    content.vb: Public Shared Function LinearSpace(domain As Interval, step As Integer) As IList(Of Double)
  overload: GeometrySharp.Core.Sets.LinearSpace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Sets.Range(System.Int32)
  commentId: M:GeometrySharp.Core.Sets.Range(System.Int32)
  id: Range(System.Int32)
  parent: GeometrySharp.Core.Sets
  langs:
  - csharp
  - vb
  name: Range(Int32)
  nameWithType: Sets.Range(Int32)
  fullName: GeometrySharp.Core.Sets.Range(System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Sets.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Range
    path: ../GeometrySharp/Core/Sets.cs
    startLine: 76
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nCreate a range of positive numbers, incrementing of one step and starting from 0.\n"
  example: []
  syntax:
    content: public static IList<double> Range(int maxValue)
    parameters:
    - id: maxValue
      type: System.Int32
      description: The dimension of the range.
    return:
      type: System.Collections.Generic.IList{System.Double}
      description: A range of numbers.
    content.vb: Public Shared Function Range(maxValue As Integer) As IList(Of Double)
  overload: GeometrySharp.Core.Sets.Range*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Sets.Span(System.Double,System.Double,System.Int32)
  commentId: M:GeometrySharp.Core.Sets.Span(System.Double,System.Double,System.Int32)
  id: Span(System.Double,System.Double,System.Int32)
  parent: GeometrySharp.Core.Sets
  langs:
  - csharp
  - vb
  name: Span(Double, Double, Int32)
  nameWithType: Sets.Span(Double, Double, Int32)
  fullName: GeometrySharp.Core.Sets.Span(System.Double, System.Double, System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Sets.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Span
    path: ../GeometrySharp/Core/Sets.cs
    startLine: 98
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nCreate a series of numbers. \n"
  example: []
  syntax:
    content: public static IList<double> Span(double start, double step, int count)
    parameters:
    - id: start
      type: System.Double
    - id: step
      type: System.Double
      description: Step size for each successive number.
    - id: count
      type: System.Int32
      description: Number of values in the series.
    return:
      type: System.Collections.Generic.IList{System.Double}
      description: Series of numbers.
    content.vb: Public Shared Function Span(start As Double, step As Double, count As Integer) As IList(Of Double)
  overload: GeometrySharp.Core.Sets.Span*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Sets.SetUnion(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})
  commentId: M:GeometrySharp.Core.Sets.SetUnion(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})
  id: SetUnion(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})
  parent: GeometrySharp.Core.Sets
  langs:
  - csharp
  - vb
  name: SetUnion(IList<Double>, IList<Double>)
  nameWithType: Sets.SetUnion(IList<Double>, IList<Double>)
  fullName: GeometrySharp.Core.Sets.SetUnion(System.Collections.Generic.IList<System.Double>, System.Collections.Generic.IList<System.Double>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Sets.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: SetUnion
    path: ../GeometrySharp/Core/Sets.cs
    startLine: 122
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nThe set union of two sequences of numbers.\n"
  example: []
  syntax:
    content: public static List<double> SetUnion(IList<double> a, IList<double> b)
    parameters:
    - id: a
      type: System.Collections.Generic.IList{System.Double}
      description: First set.
    - id: b
      type: System.Collections.Generic.IList{System.Double}
      description: Second set.
    return:
      type: System.Collections.Generic.List{System.Double}
      description: The set union.
    content.vb: Public Shared Function SetUnion(a As IList(Of Double), b As IList(Of Double)) As List(Of Double)
  overload: GeometrySharp.Core.Sets.SetUnion*
  nameWithType.vb: Sets.SetUnion(IList(Of Double), IList(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Core.Sets.SetUnion(System.Collections.Generic.IList(Of System.Double), System.Collections.Generic.IList(Of System.Double))
  name.vb: SetUnion(IList(Of Double), IList(Of Double))
- uid: GeometrySharp.Core.Sets.SetDifference(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})
  commentId: M:GeometrySharp.Core.Sets.SetDifference(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})
  id: SetDifference(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})
  parent: GeometrySharp.Core.Sets
  langs:
  - csharp
  - vb
  name: SetDifference(IList<Double>, IList<Double>)
  nameWithType: Sets.SetDifference(IList<Double>, IList<Double>)
  fullName: GeometrySharp.Core.Sets.SetDifference(System.Collections.Generic.IList<System.Double>, System.Collections.Generic.IList<System.Double>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Sets.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: SetDifference
    path: ../GeometrySharp/Core/Sets.cs
    startLine: 134
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nThe set difference from two sequences of numbers.\n"
  example: []
  syntax:
    content: public static List<double> SetDifference(IList<double> a, IList<double> b)
    parameters:
    - id: a
      type: System.Collections.Generic.IList{System.Double}
      description: ''
    - id: b
      type: System.Collections.Generic.IList{System.Double}
      description: ''
    return:
      type: System.Collections.Generic.List{System.Double}
      description: ''
    content.vb: Public Shared Function SetDifference(a As IList(Of Double), b As IList(Of Double)) As List(Of Double)
  overload: GeometrySharp.Core.Sets.SetDifference*
  nameWithType.vb: Sets.SetDifference(IList(Of Double), IList(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Core.Sets.SetDifference(System.Collections.Generic.IList(Of System.Double), System.Collections.Generic.IList(Of System.Double))
  name.vb: SetDifference(IList(Of Double), IList(Of Double))
- uid: GeometrySharp.Core.Sets.RepeatData``1(``0,System.Int32)
  commentId: M:GeometrySharp.Core.Sets.RepeatData``1(``0,System.Int32)
  id: RepeatData``1(``0,System.Int32)
  parent: GeometrySharp.Core.Sets
  langs:
  - csharp
  - vb
  name: RepeatData<T>(T, Int32)
  nameWithType: Sets.RepeatData<T>(T, Int32)
  fullName: GeometrySharp.Core.Sets.RepeatData<T>(T, System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Sets.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: RepeatData
    path: ../GeometrySharp/Core/Sets.cs
    startLine: 146
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nRepeat data until it reaches the defined length.\n"
  example: []
  syntax:
    content: public static List<T> RepeatData<T>(T data, int length)
    parameters:
    - id: data
      type: '{T}'
      description: Data to repeat.
    - id: length
      type: System.Int32
      description: Length of the final set.
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
      description: Set of repeated data.
    content.vb: Public Shared Function RepeatData(Of T)(data As T, length As Integer) As List(Of T)
  overload: GeometrySharp.Core.Sets.RepeatData*
  nameWithType.vb: Sets.RepeatData(Of T)(T, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Core.Sets.RepeatData(Of T)(T, System.Int32)
  name.vb: RepeatData(Of T)(T, Int32)
references:
- uid: GeometrySharp.Core
  commentId: N:GeometrySharp.Core
  name: GeometrySharp.Core
  nameWithType: GeometrySharp.Core
  fullName: GeometrySharp.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GeometrySharp.Core.Sets.Dimension*
  commentId: Overload:GeometrySharp.Core.Sets.Dimension
  name: Dimension
  nameWithType: Sets.Dimension
  fullName: GeometrySharp.Core.Sets.Dimension
- uid: System.Collections.Generic.IList{System.Double}
  commentId: T:System.Collections.Generic.IList{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Double>
  nameWithType: IList<Double>
  fullName: System.Collections.Generic.IList<System.Double>
  nameWithType.vb: IList(Of Double)
  fullName.vb: System.Collections.Generic.IList(Of System.Double)
  name.vb: IList(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: GeometrySharp.Core.Sets.Range*
  commentId: Overload:GeometrySharp.Core.Sets.Range
  name: Range
  nameWithType: Sets.Range
  fullName: GeometrySharp.Core.Sets.Range
- uid: GeometrySharp.Core.Interval
  commentId: T:GeometrySharp.Core.Interval
  parent: GeometrySharp.Core
  name: Interval
  nameWithType: Interval
  fullName: GeometrySharp.Core.Interval
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: GeometrySharp.Core.Sets.LinearSpace*
  commentId: Overload:GeometrySharp.Core.Sets.LinearSpace
  name: LinearSpace
  nameWithType: Sets.LinearSpace
  fullName: GeometrySharp.Core.Sets.LinearSpace
- uid: GeometrySharp.Core.Sets.Span*
  commentId: Overload:GeometrySharp.Core.Sets.Span
  name: Span
  nameWithType: Sets.Span
  fullName: GeometrySharp.Core.Sets.Span
- uid: GeometrySharp.Core.Sets.SetUnion*
  commentId: Overload:GeometrySharp.Core.Sets.SetUnion
  name: SetUnion
  nameWithType: Sets.SetUnion
  fullName: GeometrySharp.Core.Sets.SetUnion
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double>
  nameWithType: List<Double>
  fullName: System.Collections.Generic.List<System.Double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Core.Sets.SetDifference*
  commentId: Overload:GeometrySharp.Core.Sets.SetDifference
  name: SetDifference
  nameWithType: Sets.SetDifference
  fullName: GeometrySharp.Core.Sets.SetDifference
- uid: GeometrySharp.Core.Sets.RepeatData*
  commentId: Overload:GeometrySharp.Core.Sets.RepeatData
  name: RepeatData
  nameWithType: Sets.RepeatData
  fullName: GeometrySharp.Core.Sets.RepeatData
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
