### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Geometry.Volume
  commentId: T:GeometrySharp.Geometry.Volume
  id: Volume
  parent: GeometrySharp.Geometry
  children:
  - GeometrySharp.Geometry.Volume.#ctor(System.Int32,System.Int32,System.Int32,GeometrySharp.Core.Knot,GeometrySharp.Core.Knot,GeometrySharp.Core.Knot,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}})
  - GeometrySharp.Geometry.Volume.ControlPoints
  - GeometrySharp.Geometry.Volume.DegreeU
  - GeometrySharp.Geometry.Volume.DegreeV
  - GeometrySharp.Geometry.Volume.DegreeW
  - GeometrySharp.Geometry.Volume.FromJson(System.String)
  - GeometrySharp.Geometry.Volume.KnotsU
  - GeometrySharp.Geometry.Volume.KnotsV
  - GeometrySharp.Geometry.Volume.KnotsW
  - GeometrySharp.Geometry.Volume.ToJson
  langs:
  - csharp
  - vb
  name: Volume
  nameWithType: Volume
  fullName: GeometrySharp.Geometry.Volume
  type: Class
  source:
    remote:
      path: GeometrySharp/Geometry/Volume.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Volume
    path: ../GeometrySharp/Geometry/Volume.cs
    startLine: 11
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nA simple data structure representing a NURBS volume. This data structure is largely experimental in intent. Like CurveData\nand Surface, this data structure does no legality checks.\n"
  example: []
  syntax:
    content: 'public class Volume : Serializable<Volume>'
    content.vb: >-
      Public Class Volume

          Inherits Serializable(Of Volume)
  inheritance:
  - System.Object
  - GeometrySharp.Core.Serializable{GeometrySharp.Geometry.Volume}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Geometry.Volume.DegreeU
  commentId: P:GeometrySharp.Geometry.Volume.DegreeU
  id: DegreeU
  parent: GeometrySharp.Geometry.Volume
  langs:
  - csharp
  - vb
  name: DegreeU
  nameWithType: Volume.DegreeU
  fullName: GeometrySharp.Geometry.Volume.DegreeU
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/Volume.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: DegreeU
    path: ../GeometrySharp/Geometry/Volume.cs
    startLine: 16
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nInteger degree in u direction.\n"
  example: []
  syntax:
    content: public int DegreeU { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property DegreeU As Integer
  overload: GeometrySharp.Geometry.Volume.DegreeU*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Volume.DegreeV
  commentId: P:GeometrySharp.Geometry.Volume.DegreeV
  id: DegreeV
  parent: GeometrySharp.Geometry.Volume
  langs:
  - csharp
  - vb
  name: DegreeV
  nameWithType: Volume.DegreeV
  fullName: GeometrySharp.Geometry.Volume.DegreeV
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/Volume.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: DegreeV
    path: ../GeometrySharp/Geometry/Volume.cs
    startLine: 20
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nInteger degree in v direction.\n"
  example: []
  syntax:
    content: public int DegreeV { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property DegreeV As Integer
  overload: GeometrySharp.Geometry.Volume.DegreeV*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Volume.DegreeW
  commentId: P:GeometrySharp.Geometry.Volume.DegreeW
  id: DegreeW
  parent: GeometrySharp.Geometry.Volume
  langs:
  - csharp
  - vb
  name: DegreeW
  nameWithType: Volume.DegreeW
  fullName: GeometrySharp.Geometry.Volume.DegreeW
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/Volume.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: DegreeW
    path: ../GeometrySharp/Geometry/Volume.cs
    startLine: 24
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nInteger degree in w direction.\n"
  example: []
  syntax:
    content: public int DegreeW { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property DegreeW As Integer
  overload: GeometrySharp.Geometry.Volume.DegreeW*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Volume.KnotsU
  commentId: P:GeometrySharp.Geometry.Volume.KnotsU
  id: KnotsU
  parent: GeometrySharp.Geometry.Volume
  langs:
  - csharp
  - vb
  name: KnotsU
  nameWithType: Volume.KnotsU
  fullName: GeometrySharp.Geometry.Volume.KnotsU
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/Volume.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: KnotsU
    path: ../GeometrySharp/Geometry/Volume.cs
    startLine: 28
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nList of non-decreasing knot values in u direction.\n"
  example: []
  syntax:
    content: public Knot KnotsU { get; set; }
    parameters: []
    return:
      type: GeometrySharp.Core.Knot
    content.vb: Public Property KnotsU As Knot
  overload: GeometrySharp.Geometry.Volume.KnotsU*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Volume.KnotsV
  commentId: P:GeometrySharp.Geometry.Volume.KnotsV
  id: KnotsV
  parent: GeometrySharp.Geometry.Volume
  langs:
  - csharp
  - vb
  name: KnotsV
  nameWithType: Volume.KnotsV
  fullName: GeometrySharp.Geometry.Volume.KnotsV
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/Volume.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: KnotsV
    path: ../GeometrySharp/Geometry/Volume.cs
    startLine: 32
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nList of non-decreasing knot values in v direction.\n"
  example: []
  syntax:
    content: public Knot KnotsV { get; set; }
    parameters: []
    return:
      type: GeometrySharp.Core.Knot
    content.vb: Public Property KnotsV As Knot
  overload: GeometrySharp.Geometry.Volume.KnotsV*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Volume.KnotsW
  commentId: P:GeometrySharp.Geometry.Volume.KnotsW
  id: KnotsW
  parent: GeometrySharp.Geometry.Volume
  langs:
  - csharp
  - vb
  name: KnotsW
  nameWithType: Volume.KnotsW
  fullName: GeometrySharp.Geometry.Volume.KnotsW
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/Volume.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: KnotsW
    path: ../GeometrySharp/Geometry/Volume.cs
    startLine: 36
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nList of non-decreasing knot values in w direction.\n"
  example: []
  syntax:
    content: public Knot KnotsW { get; set; }
    parameters: []
    return:
      type: GeometrySharp.Core.Knot
    content.vb: Public Property KnotsW As Knot
  overload: GeometrySharp.Geometry.Volume.KnotsW*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Volume.ControlPoints
  commentId: P:GeometrySharp.Geometry.Volume.ControlPoints
  id: ControlPoints
  parent: GeometrySharp.Geometry.Volume
  langs:
  - csharp
  - vb
  name: ControlPoints
  nameWithType: Volume.ControlPoints
  fullName: GeometrySharp.Geometry.Volume.ControlPoints
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/Volume.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ControlPoints
    path: ../GeometrySharp/Geometry/Volume.cs
    startLine: 41
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\n3d list of control points, where rows are the u dir, and columns run along the positive v direction,\nand where each control point is an list of length (dim)\n"
  example: []
  syntax:
    content: public List<List<List<Vector3>>> ControlPoints { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}}
    content.vb: Public Property ControlPoints As List(Of List(Of List(Of Vector3)))
  overload: GeometrySharp.Geometry.Volume.ControlPoints*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Volume.#ctor(System.Int32,System.Int32,System.Int32,GeometrySharp.Core.Knot,GeometrySharp.Core.Knot,GeometrySharp.Core.Knot,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}})
  commentId: M:GeometrySharp.Geometry.Volume.#ctor(System.Int32,System.Int32,System.Int32,GeometrySharp.Core.Knot,GeometrySharp.Core.Knot,GeometrySharp.Core.Knot,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}})
  id: '#ctor(System.Int32,System.Int32,System.Int32,GeometrySharp.Core.Knot,GeometrySharp.Core.Knot,GeometrySharp.Core.Knot,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}})'
  parent: GeometrySharp.Geometry.Volume
  langs:
  - csharp
  - vb
  name: Volume(Int32, Int32, Int32, Knot, Knot, Knot, List<List<List<Vector3>>>)
  nameWithType: Volume.Volume(Int32, Int32, Int32, Knot, Knot, Knot, List<List<List<Vector3>>>)
  fullName: GeometrySharp.Geometry.Volume.Volume(System.Int32, System.Int32, System.Int32, GeometrySharp.Core.Knot, GeometrySharp.Core.Knot, GeometrySharp.Core.Knot, System.Collections.Generic.List<System.Collections.Generic.List<System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>>>)
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/Volume.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/Volume.cs
    startLine: 42
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  syntax:
    content: public Volume(int degreeU, int degreeV, int degreeW, Knot knotsU, Knot knotsV, Knot knotsW, List<List<List<Vector3>>> controlPoints)
    parameters:
    - id: degreeU
      type: System.Int32
    - id: degreeV
      type: System.Int32
    - id: degreeW
      type: System.Int32
    - id: knotsU
      type: GeometrySharp.Core.Knot
    - id: knotsV
      type: GeometrySharp.Core.Knot
    - id: knotsW
      type: GeometrySharp.Core.Knot
    - id: controlPoints
      type: System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}}
    content.vb: Public Sub New(degreeU As Integer, degreeV As Integer, degreeW As Integer, knotsU As Knot, knotsV As Knot, knotsW As Knot, controlPoints As List(Of List(Of List(Of Vector3))))
  overload: GeometrySharp.Geometry.Volume.#ctor*
  nameWithType.vb: Volume.Volume(Int32, Int32, Int32, Knot, Knot, Knot, List(Of List(Of List(Of Vector3))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GeometrySharp.Geometry.Volume.Volume(System.Int32, System.Int32, System.Int32, GeometrySharp.Core.Knot, GeometrySharp.Core.Knot, GeometrySharp.Core.Knot, System.Collections.Generic.List(Of System.Collections.Generic.List(Of System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3))))
  name.vb: Volume(Int32, Int32, Int32, Knot, Knot, Knot, List(Of List(Of List(Of Vector3))))
- uid: GeometrySharp.Geometry.Volume.FromJson(System.String)
  commentId: M:GeometrySharp.Geometry.Volume.FromJson(System.String)
  id: FromJson(System.String)
  parent: GeometrySharp.Geometry.Volume
  langs:
  - csharp
  - vb
  name: FromJson(String)
  nameWithType: Volume.FromJson(String)
  fullName: GeometrySharp.Geometry.Volume.FromJson(System.String)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Volume.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: FromJson
    path: ../GeometrySharp/Geometry/Volume.cs
    startLine: 53
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  syntax:
    content: public override Volume FromJson(string s)
    parameters:
    - id: s
      type: System.String
    return:
      type: GeometrySharp.Geometry.Volume
    content.vb: Public Overrides Function FromJson(s As String) As Volume
  overridden: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.Volume}.FromJson(System.String)
  overload: GeometrySharp.Geometry.Volume.FromJson*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: GeometrySharp.Geometry.Volume.ToJson
  commentId: M:GeometrySharp.Geometry.Volume.ToJson
  id: ToJson
  parent: GeometrySharp.Geometry.Volume
  langs:
  - csharp
  - vb
  name: ToJson()
  nameWithType: Volume.ToJson()
  fullName: GeometrySharp.Geometry.Volume.ToJson()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Volume.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ToJson
    path: ../GeometrySharp/Geometry/Volume.cs
    startLine: 62
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nSerialize a volume to JSON\n"
  example: []
  syntax:
    content: public override string ToJson()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToJson As String
  overridden: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.Volume}.ToJson
  overload: GeometrySharp.Geometry.Volume.ToJson*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: GeometrySharp.Geometry
  commentId: N:GeometrySharp.Geometry
  name: GeometrySharp.Geometry
  nameWithType: GeometrySharp.Geometry
  fullName: GeometrySharp.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.Volume}
  commentId: T:GeometrySharp.Core.Serializable{GeometrySharp.Geometry.Volume}
  parent: GeometrySharp.Core
  definition: GeometrySharp.Core.Serializable`1
  name: Serializable<Volume>
  nameWithType: Serializable<Volume>
  fullName: GeometrySharp.Core.Serializable<GeometrySharp.Geometry.Volume>
  nameWithType.vb: Serializable(Of Volume)
  fullName.vb: GeometrySharp.Core.Serializable(Of GeometrySharp.Geometry.Volume)
  name.vb: Serializable(Of Volume)
  spec.csharp:
  - uid: GeometrySharp.Core.Serializable`1
    name: Serializable
    nameWithType: Serializable
    fullName: GeometrySharp.Core.Serializable
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Volume
    name: Volume
    nameWithType: Volume
    fullName: GeometrySharp.Geometry.Volume
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GeometrySharp.Core.Serializable`1
    name: Serializable
    nameWithType: Serializable
    fullName: GeometrySharp.Core.Serializable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Volume
    name: Volume
    nameWithType: Volume
    fullName: GeometrySharp.Geometry.Volume
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GeometrySharp.Core.Serializable`1
  commentId: T:GeometrySharp.Core.Serializable`1
  name: Serializable<T>
  nameWithType: Serializable<T>
  fullName: GeometrySharp.Core.Serializable<T>
  nameWithType.vb: Serializable(Of T)
  fullName.vb: GeometrySharp.Core.Serializable(Of T)
  name.vb: Serializable(Of T)
  spec.csharp:
  - uid: GeometrySharp.Core.Serializable`1
    name: Serializable
    nameWithType: Serializable
    fullName: GeometrySharp.Core.Serializable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GeometrySharp.Core.Serializable`1
    name: Serializable
    nameWithType: Serializable
    fullName: GeometrySharp.Core.Serializable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Core
  commentId: N:GeometrySharp.Core
  name: GeometrySharp.Core
  nameWithType: GeometrySharp.Core
  fullName: GeometrySharp.Core
- uid: GeometrySharp.Geometry.Volume.DegreeU*
  commentId: Overload:GeometrySharp.Geometry.Volume.DegreeU
  name: DegreeU
  nameWithType: Volume.DegreeU
  fullName: GeometrySharp.Geometry.Volume.DegreeU
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: GeometrySharp.Geometry.Volume.DegreeV*
  commentId: Overload:GeometrySharp.Geometry.Volume.DegreeV
  name: DegreeV
  nameWithType: Volume.DegreeV
  fullName: GeometrySharp.Geometry.Volume.DegreeV
- uid: GeometrySharp.Geometry.Volume.DegreeW*
  commentId: Overload:GeometrySharp.Geometry.Volume.DegreeW
  name: DegreeW
  nameWithType: Volume.DegreeW
  fullName: GeometrySharp.Geometry.Volume.DegreeW
- uid: GeometrySharp.Geometry.Volume.KnotsU*
  commentId: Overload:GeometrySharp.Geometry.Volume.KnotsU
  name: KnotsU
  nameWithType: Volume.KnotsU
  fullName: GeometrySharp.Geometry.Volume.KnotsU
- uid: GeometrySharp.Core.Knot
  commentId: T:GeometrySharp.Core.Knot
  parent: GeometrySharp.Core
  name: Knot
  nameWithType: Knot
  fullName: GeometrySharp.Core.Knot
- uid: GeometrySharp.Geometry.Volume.KnotsV*
  commentId: Overload:GeometrySharp.Geometry.Volume.KnotsV
  name: KnotsV
  nameWithType: Volume.KnotsV
  fullName: GeometrySharp.Geometry.Volume.KnotsV
- uid: GeometrySharp.Geometry.Volume.KnotsW*
  commentId: Overload:GeometrySharp.Geometry.Volume.KnotsW
  name: KnotsW
  nameWithType: Volume.KnotsW
  fullName: GeometrySharp.Geometry.Volume.KnotsW
- uid: GeometrySharp.Geometry.Volume.ControlPoints*
  commentId: Overload:GeometrySharp.Geometry.Volume.ControlPoints
  name: ControlPoints
  nameWithType: Volume.ControlPoints
  fullName: GeometrySharp.Geometry.Volume.ControlPoints
- uid: System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<List<List<Vector3>>>
  nameWithType: List<List<List<Vector3>>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.List<System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>>>
  nameWithType.vb: List(Of List(Of List(Of Vector3)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.List(Of System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3)))
  name.vb: List(Of List(Of List(Of Vector3)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: GeometrySharp.Geometry.Volume.#ctor*
  commentId: Overload:GeometrySharp.Geometry.Volume.#ctor
  name: Volume
  nameWithType: Volume.Volume
  fullName: GeometrySharp.Geometry.Volume.Volume
- uid: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.Volume}.FromJson(System.String)
  commentId: M:GeometrySharp.Core.Serializable{GeometrySharp.Geometry.Volume}.FromJson(System.String)
  parent: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.Volume}
  definition: GeometrySharp.Core.Serializable`1.FromJson(System.String)
  name: FromJson(String)
  nameWithType: Serializable<Volume>.FromJson(String)
  fullName: GeometrySharp.Core.Serializable<GeometrySharp.Geometry.Volume>.FromJson(System.String)
  nameWithType.vb: Serializable(Of Volume).FromJson(String)
  fullName.vb: GeometrySharp.Core.Serializable(Of GeometrySharp.Geometry.Volume).FromJson(System.String)
  spec.csharp:
  - uid: GeometrySharp.Core.Serializable`1.FromJson(System.String)
    name: FromJson
    nameWithType: Serializable<Volume>.FromJson
    fullName: GeometrySharp.Core.Serializable<GeometrySharp.Geometry.Volume>.FromJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.Core.Serializable`1.FromJson(System.String)
    name: FromJson
    nameWithType: Serializable(Of Volume).FromJson
    fullName: GeometrySharp.Core.Serializable(Of GeometrySharp.Geometry.Volume).FromJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.Volume.FromJson*
  commentId: Overload:GeometrySharp.Geometry.Volume.FromJson
  name: FromJson
  nameWithType: Volume.FromJson
  fullName: GeometrySharp.Geometry.Volume.FromJson
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: GeometrySharp.Geometry.Volume
  commentId: T:GeometrySharp.Geometry.Volume
  parent: GeometrySharp.Geometry
  name: Volume
  nameWithType: Volume
  fullName: GeometrySharp.Geometry.Volume
- uid: GeometrySharp.Core.Serializable`1.FromJson(System.String)
  commentId: M:GeometrySharp.Core.Serializable`1.FromJson(System.String)
  isExternal: true
  name: FromJson(String)
  nameWithType: Serializable<T>.FromJson(String)
  fullName: GeometrySharp.Core.Serializable<T>.FromJson(System.String)
  nameWithType.vb: Serializable(Of T).FromJson(String)
  fullName.vb: GeometrySharp.Core.Serializable(Of T).FromJson(System.String)
  spec.csharp:
  - uid: GeometrySharp.Core.Serializable`1.FromJson(System.String)
    name: FromJson
    nameWithType: Serializable<T>.FromJson
    fullName: GeometrySharp.Core.Serializable<T>.FromJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.Core.Serializable`1.FromJson(System.String)
    name: FromJson
    nameWithType: Serializable(Of T).FromJson
    fullName: GeometrySharp.Core.Serializable(Of T).FromJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.Volume}.ToJson
  commentId: M:GeometrySharp.Core.Serializable{GeometrySharp.Geometry.Volume}.ToJson
  parent: GeometrySharp.Core.Serializable{GeometrySharp.Geometry.Volume}
  definition: GeometrySharp.Core.Serializable`1.ToJson
  name: ToJson()
  nameWithType: Serializable<Volume>.ToJson()
  fullName: GeometrySharp.Core.Serializable<GeometrySharp.Geometry.Volume>.ToJson()
  nameWithType.vb: Serializable(Of Volume).ToJson()
  fullName.vb: GeometrySharp.Core.Serializable(Of GeometrySharp.Geometry.Volume).ToJson()
  spec.csharp:
  - uid: GeometrySharp.Core.Serializable`1.ToJson
    name: ToJson
    nameWithType: Serializable<Volume>.ToJson
    fullName: GeometrySharp.Core.Serializable<GeometrySharp.Geometry.Volume>.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.Core.Serializable`1.ToJson
    name: ToJson
    nameWithType: Serializable(Of Volume).ToJson
    fullName: GeometrySharp.Core.Serializable(Of GeometrySharp.Geometry.Volume).ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.Volume.ToJson*
  commentId: Overload:GeometrySharp.Geometry.Volume.ToJson
  name: ToJson
  nameWithType: Volume.ToJson
  fullName: GeometrySharp.Geometry.Volume.ToJson
- uid: GeometrySharp.Core.Serializable`1.ToJson
  commentId: M:GeometrySharp.Core.Serializable`1.ToJson
  name: ToJson()
  nameWithType: Serializable<T>.ToJson()
  fullName: GeometrySharp.Core.Serializable<T>.ToJson()
  nameWithType.vb: Serializable(Of T).ToJson()
  fullName.vb: GeometrySharp.Core.Serializable(Of T).ToJson()
  spec.csharp:
  - uid: GeometrySharp.Core.Serializable`1.ToJson
    name: ToJson
    nameWithType: Serializable<T>.ToJson
    fullName: GeometrySharp.Core.Serializable<T>.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.Core.Serializable`1.ToJson
    name: ToJson
    nameWithType: Serializable(Of T).ToJson
    fullName: GeometrySharp.Core.Serializable(Of T).ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
