### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Core.Interval
  commentId: T:GeometrySharp.Core.Interval
  id: Interval
  parent: GeometrySharp.Core
  children:
  - GeometrySharp.Core.Interval.#ctor(System.Double,System.Double)
  - GeometrySharp.Core.Interval.Length
  - GeometrySharp.Core.Interval.Max
  - GeometrySharp.Core.Interval.Mid
  - GeometrySharp.Core.Interval.Min
  - GeometrySharp.Core.Interval.ParameterAt(System.Double)
  langs:
  - csharp
  - vb
  name: Interval
  nameWithType: Interval
  fullName: GeometrySharp.Core.Interval
  type: Class
  source:
    remote:
      path: GeometrySharp/Core/Interval.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Interval
    path: ../GeometrySharp/Core/Interval.cs
    startLine: 9
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nA simple parametric data representing an &quot;interval&quot; between two numbers.\n"
  example: []
  syntax:
    content: public class Interval
    content.vb: Public Class Interval
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Core.Interval.#ctor(System.Double,System.Double)
  commentId: M:GeometrySharp.Core.Interval.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: GeometrySharp.Core.Interval
  langs:
  - csharp
  - vb
  name: Interval(Double, Double)
  nameWithType: Interval.Interval(Double, Double)
  fullName: GeometrySharp.Core.Interval.Interval(System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Core/Interval.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Core/Interval.cs
    startLine: 16
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nCreate an instance of an interval by the values.\n"
  example: []
  syntax:
    content: public Interval(double min, double max)
    parameters:
    - id: min
      type: System.Double
      description: The minimum value of the interval.
    - id: max
      type: System.Double
      description: The maximum value of the interval.
    content.vb: Public Sub New(min As Double, max As Double)
  overload: GeometrySharp.Core.Interval.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Core.Interval.Min
  commentId: P:GeometrySharp.Core.Interval.Min
  id: Min
  parent: GeometrySharp.Core.Interval
  langs:
  - csharp
  - vb
  name: Min
  nameWithType: Interval.Min
  fullName: GeometrySharp.Core.Interval.Min
  type: Property
  source:
    remote:
      path: GeometrySharp/Core/Interval.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Min
    path: ../GeometrySharp/Core/Interval.cs
    startLine: 25
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nThe minimum value of the interval.\n"
  example: []
  syntax:
    content: public double Min { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Min As Double
  overload: GeometrySharp.Core.Interval.Min*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Core.Interval.Max
  commentId: P:GeometrySharp.Core.Interval.Max
  id: Max
  parent: GeometrySharp.Core.Interval
  langs:
  - csharp
  - vb
  name: Max
  nameWithType: Interval.Max
  fullName: GeometrySharp.Core.Interval.Max
  type: Property
  source:
    remote:
      path: GeometrySharp/Core/Interval.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Max
    path: ../GeometrySharp/Core/Interval.cs
    startLine: 30
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nThe maximum value of the interval.\n"
  example: []
  syntax:
    content: public double Max { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Max As Double
  overload: GeometrySharp.Core.Interval.Max*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Core.Interval.Mid
  commentId: P:GeometrySharp.Core.Interval.Mid
  id: Mid
  parent: GeometrySharp.Core.Interval
  langs:
  - csharp
  - vb
  name: Mid
  nameWithType: Interval.Mid
  fullName: GeometrySharp.Core.Interval.Mid
  type: Property
  source:
    remote:
      path: GeometrySharp/Core/Interval.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Mid
    path: ../GeometrySharp/Core/Interval.cs
    startLine: 35
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nGets the average value.\n"
  example: []
  syntax:
    content: public double Mid { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Mid As Double
  overload: GeometrySharp.Core.Interval.Mid*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Core.Interval.Length
  commentId: P:GeometrySharp.Core.Interval.Length
  id: Length
  parent: GeometrySharp.Core.Interval
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Interval.Length
  fullName: GeometrySharp.Core.Interval.Length
  type: Property
  source:
    remote:
      path: GeometrySharp/Core/Interval.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Length
    path: ../GeometrySharp/Core/Interval.cs
    startLine: 41
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nGets the length of the interval range.\nIf the interval is decreasing, negative number will be returned.\n"
  example: []
  syntax:
    content: public double Length { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Length As Double
  overload: GeometrySharp.Core.Interval.Length*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Core.Interval.ParameterAt(System.Double)
  commentId: M:GeometrySharp.Core.Interval.ParameterAt(System.Double)
  id: ParameterAt(System.Double)
  parent: GeometrySharp.Core.Interval
  langs:
  - csharp
  - vb
  name: ParameterAt(Double)
  nameWithType: Interval.ParameterAt(Double)
  fullName: GeometrySharp.Core.Interval.ParameterAt(System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Interval.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ParameterAt
    path: ../GeometrySharp/Core/Interval.cs
    startLine: 48
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nConverts normalized parameter to interval value, or pair of values.\n"
  example: []
  syntax:
    content: public double ParameterAt(double normalizedParameter)
    parameters:
    - id: normalizedParameter
      type: System.Double
      description: The normalized parameter between 0-1.
    return:
      type: System.Double
      description: Interval parameter min*(1.0-normalizedParameter) + max*normalizedParameter.
    content.vb: Public Function ParameterAt(normalizedParameter As Double) As Double
  overload: GeometrySharp.Core.Interval.ParameterAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: GeometrySharp.Core
  commentId: N:GeometrySharp.Core
  name: GeometrySharp.Core
  nameWithType: GeometrySharp.Core
  fullName: GeometrySharp.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GeometrySharp.Core.Interval.#ctor*
  commentId: Overload:GeometrySharp.Core.Interval.#ctor
  name: Interval
  nameWithType: Interval.Interval
  fullName: GeometrySharp.Core.Interval.Interval
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: GeometrySharp.Core.Interval.Min*
  commentId: Overload:GeometrySharp.Core.Interval.Min
  name: Min
  nameWithType: Interval.Min
  fullName: GeometrySharp.Core.Interval.Min
- uid: GeometrySharp.Core.Interval.Max*
  commentId: Overload:GeometrySharp.Core.Interval.Max
  name: Max
  nameWithType: Interval.Max
  fullName: GeometrySharp.Core.Interval.Max
- uid: GeometrySharp.Core.Interval.Mid*
  commentId: Overload:GeometrySharp.Core.Interval.Mid
  name: Mid
  nameWithType: Interval.Mid
  fullName: GeometrySharp.Core.Interval.Mid
- uid: GeometrySharp.Core.Interval.Length*
  commentId: Overload:GeometrySharp.Core.Interval.Length
  name: Length
  nameWithType: Interval.Length
  fullName: GeometrySharp.Core.Interval.Length
- uid: GeometrySharp.Core.Interval.ParameterAt*
  commentId: Overload:GeometrySharp.Core.Interval.ParameterAt
  name: ParameterAt
  nameWithType: Interval.ParameterAt
  fullName: GeometrySharp.Core.Interval.ParameterAt
