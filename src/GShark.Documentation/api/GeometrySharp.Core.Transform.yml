### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Core.Transform
  commentId: T:GeometrySharp.Core.Transform
  id: Transform
  parent: GeometrySharp.Core
  children:
  - GeometrySharp.Core.Transform.#ctor
  - GeometrySharp.Core.Transform.Combine(GeometrySharp.Core.Transform)
  - GeometrySharp.Core.Transform.Copy(GeometrySharp.Core.Transform)
  - GeometrySharp.Core.Transform.Identity
  - GeometrySharp.Core.Transform.op_Multiply(GeometrySharp.Core.Transform,GeometrySharp.Core.Transform)
  - GeometrySharp.Core.Transform.PlanarProjection(GeometrySharp.Geometry.Plane)
  - GeometrySharp.Core.Transform.PlaneToPlane(GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Plane)
  - GeometrySharp.Core.Transform.Reflection(GeometrySharp.Geometry.Plane)
  - GeometrySharp.Core.Transform.Rotation(System.Double,GeometrySharp.Geometry.Line)
  - GeometrySharp.Core.Transform.Rotation(System.Double,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Core.Transform.Scale(GeometrySharp.Geometry.Vector3,System.Double)
  - GeometrySharp.Core.Transform.Scale(GeometrySharp.Geometry.Vector3,System.Double,System.Double,System.Double)
  - GeometrySharp.Core.Transform.Scale(System.Double,System.Double,System.Double)
  - GeometrySharp.Core.Transform.ToString
  - GeometrySharp.Core.Transform.Translation(GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Core.Transform.Translation(System.Double,System.Double,System.Double)
  langs:
  - csharp
  - vb
  name: Transform
  nameWithType: Transform
  fullName: GeometrySharp.Core.Transform
  type: Class
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Transform
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 7
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  syntax:
    content: 'public class Transform : List<IList<double>>, IList<IList<double>>, ICollection<IList<double>>, IReadOnlyList<IList<double>>, IReadOnlyCollection<IList<double>>, IEnumerable<IList<double>>, IList, ICollection, IEnumerable'
    content.vb: >-
      Public Class Transform

          Inherits List(Of IList(Of Double))

          Implements IList(Of IList(Of Double)), ICollection(Of IList(Of Double)), IReadOnlyList(Of IList(Of Double)), IReadOnlyCollection(Of IList(Of Double)), IEnumerable(Of IList(Of Double)), IList, ICollection, IEnumerable
  inheritance:
  - System.Object
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  implements:
  - System.Collections.Generic.IList{System.Collections.Generic.IList{System.Double}}
  - System.Collections.Generic.ICollection{System.Collections.Generic.IList{System.Double}}
  - System.Collections.Generic.IReadOnlyList{System.Collections.Generic.IList{System.Double}}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.IList{System.Double}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Double}}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#get_Item(System.Int32)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#set_Item(System.Int32,System.Object)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Add(System.Collections.Generic.IList{System.Double})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.AsReadOnly
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.BinarySearch(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IComparer{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.BinarySearch(System.Collections.Generic.IList{System.Double})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.BinarySearch(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IComparer{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Clear
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Contains(System.Collections.Generic.IList{System.Double})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.ConvertAll``1(System.Converter{System.Collections.Generic.IList{System.Double},{TOutput}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.CopyTo(System.Int32,System.Collections.Generic.IList{System.Double}[],System.Int32,System.Int32)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.CopyTo(System.Collections.Generic.IList{System.Double}[])
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.CopyTo(System.Collections.Generic.IList{System.Double}[],System.Int32)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Exists(System.Predicate{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Find(System.Predicate{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindAll(System.Predicate{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindIndex(System.Int32,System.Int32,System.Predicate{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindIndex(System.Int32,System.Predicate{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindIndex(System.Predicate{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindLast(System.Predicate{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindLastIndex(System.Int32,System.Predicate{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindLastIndex(System.Predicate{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.ForEach(System.Action{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.GetEnumerator
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.IndexOf(System.Collections.Generic.IList{System.Double})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.IndexOf(System.Collections.Generic.IList{System.Double},System.Int32)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.IndexOf(System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Insert(System.Int32,System.Collections.Generic.IList{System.Double})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.LastIndexOf(System.Collections.Generic.IList{System.Double})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.LastIndexOf(System.Collections.Generic.IList{System.Double},System.Int32)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.LastIndexOf(System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Remove(System.Collections.Generic.IList{System.Double})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.RemoveAll(System.Predicate{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.RemoveAt(System.Int32)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Reverse
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Sort
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Sort(System.Collections.Generic.IComparer{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Sort(System.Comparison{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Remove(System.Object)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.ToArray
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.TrimExcess
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.TrueForAll(System.Predicate{System.Collections.Generic.IList{System.Double}})
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Capacity
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Count
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Item(System.Int32)
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Item(System.Int32)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Double}}.GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Func{System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Boolean})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Core.Transform.#ctor
  commentId: M:GeometrySharp.Core.Transform.#ctor
  id: '#ctor'
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: Transform()
  nameWithType: Transform.Transform()
  fullName: GeometrySharp.Core.Transform.Transform()
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 13
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nInitializes a 4 x 4 transformation matrix.\nAll the values are set to zero.\n"
  example: []
  syntax:
    content: public Transform()
    content.vb: Public Sub New
  overload: GeometrySharp.Core.Transform.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Core.Transform.Identity
  commentId: M:GeometrySharp.Core.Transform.Identity
  id: Identity
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: Identity()
  nameWithType: Transform.Identity()
  fullName: GeometrySharp.Core.Transform.Identity()
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Identity
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 23
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nA new identity transformation matrix. An identity matrix defines no transformation.\nThe diagonal is (1,1,1,1)\n"
  example: []
  syntax:
    content: public static Transform Identity()
    return:
      type: GeometrySharp.Core.Transform
      description: Gets the identity transformation matrix.
    content.vb: Public Shared Function Identity As Transform
  overload: GeometrySharp.Core.Transform.Identity*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Transform.Translation(GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Core.Transform.Translation(GeometrySharp.Geometry.Vector3)
  id: Translation(GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: Translation(Vector3)
  nameWithType: Transform.Translation(Vector3)
  fullName: GeometrySharp.Core.Transform.Translation(GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Translation
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 40
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nConstruct a new translation transformation.\n"
  example: []
  syntax:
    content: public static Transform Translation(Vector3 v)
    parameters:
    - id: v
      type: GeometrySharp.Geometry.Vector3
      description: Translation vector.
    return:
      type: GeometrySharp.Core.Transform
      description: A transformation matrix which moves the geometry along the vector.
    content.vb: Public Shared Function Translation(v As Vector3) As Transform
  overload: GeometrySharp.Core.Transform.Translation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Transform.Translation(System.Double,System.Double,System.Double)
  commentId: M:GeometrySharp.Core.Transform.Translation(System.Double,System.Double,System.Double)
  id: Translation(System.Double,System.Double,System.Double)
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: Translation(Double, Double, Double)
  nameWithType: Transform.Translation(Double, Double, Double)
  fullName: GeometrySharp.Core.Transform.Translation(System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Translation
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 52
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nConstruct a new translation transformation.\n"
  example: []
  syntax:
    content: public static Transform Translation(double x, double y, double z)
    parameters:
    - id: x
      type: System.Double
      description: Transform the x value.
    - id: y
      type: System.Double
      description: Transform the y value.
    - id: z
      type: System.Double
      description: Transform the z value.
    return:
      type: GeometrySharp.Core.Transform
      description: A transformation matrix which moves the geometry along the vector.
    content.vb: Public Shared Function Translation(x As Double, y As Double, z As Double) As Transform
  overload: GeometrySharp.Core.Transform.Translation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Transform.Rotation(System.Double,GeometrySharp.Geometry.Line)
  commentId: M:GeometrySharp.Core.Transform.Rotation(System.Double,GeometrySharp.Geometry.Line)
  id: Rotation(System.Double,GeometrySharp.Geometry.Line)
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: Rotation(Double, Line)
  nameWithType: Transform.Rotation(Double, Line)
  fullName: GeometrySharp.Core.Transform.Rotation(System.Double, GeometrySharp.Geometry.Line)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Rotation
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 69
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nConstructs a new rotation transformation with specified angle, rotation center and rotation axis.\n"
  example: []
  syntax:
    content: public Transform Rotation(double angle, Line axis)
    parameters:
    - id: angle
      type: System.Double
      description: Angle in radians of the rotation.
    - id: axis
      type: GeometrySharp.Geometry.Line
      description: Axis direction.
    return:
      type: GeometrySharp.Core.Transform
      description: A transformation matrix which rotates geometry around an anchor.
    content.vb: Public Function Rotation(angle As Double, axis As Line) As Transform
  overload: GeometrySharp.Core.Transform.Rotation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Core.Transform.Rotation(System.Double,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Core.Transform.Rotation(System.Double,GeometrySharp.Geometry.Vector3)
  id: Rotation(System.Double,GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: Rotation(Double, Vector3)
  nameWithType: Transform.Rotation(Double, Vector3)
  fullName: GeometrySharp.Core.Transform.Rotation(System.Double, GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Rotation
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 80
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nConstructs a new rotation transformation with specified angle, rotation center and rotation axis pointing up.\n"
  example: []
  syntax:
    content: public static Transform Rotation(double angle, Vector3 center)
    parameters:
    - id: angle
      type: System.Double
      description: Angle in radians of the rotation.
    - id: center
      type: GeometrySharp.Geometry.Vector3
      description: Center point of rotation. Rotation axis is vertical.
    return:
      type: GeometrySharp.Core.Transform
      description: A transformation matrix which rotates geometry around an anchor.
    content.vb: Public Shared Function Rotation(angle As Double, center As Vector3) As Transform
  overload: GeometrySharp.Core.Transform.Rotation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Transform.Scale(GeometrySharp.Geometry.Vector3,System.Double)
  commentId: M:GeometrySharp.Core.Transform.Scale(GeometrySharp.Geometry.Vector3,System.Double)
  id: Scale(GeometrySharp.Geometry.Vector3,System.Double)
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: Scale(Vector3, Double)
  nameWithType: Transform.Scale(Vector3, Double)
  fullName: GeometrySharp.Core.Transform.Scale(GeometrySharp.Geometry.Vector3, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Scale
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 134
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nCreate a uniform scale transformation matrix with the origin as the fixed point.\n"
  example: []
  syntax:
    content: public static Transform Scale(Vector3 anchorPoint, double scaleFactor)
    parameters:
    - id: anchorPoint
      type: GeometrySharp.Geometry.Vector3
      description: The anchor point from the scale transformation is computed.
    - id: scaleFactor
      type: System.Double
      description: Scale factor.
    return:
      type: GeometrySharp.Core.Transform
      description: Scale transformation matrix where the diagonal is (factorX, factorY, factorZ, 1)
    content.vb: Public Shared Function Scale(anchorPoint As Vector3, scaleFactor As Double) As Transform
  overload: GeometrySharp.Core.Transform.Scale*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Transform.Scale(GeometrySharp.Geometry.Vector3,System.Double,System.Double,System.Double)
  commentId: M:GeometrySharp.Core.Transform.Scale(GeometrySharp.Geometry.Vector3,System.Double,System.Double,System.Double)
  id: Scale(GeometrySharp.Geometry.Vector3,System.Double,System.Double,System.Double)
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: Scale(Vector3, Double, Double, Double)
  nameWithType: Transform.Scale(Vector3, Double, Double, Double)
  fullName: GeometrySharp.Core.Transform.Scale(GeometrySharp.Geometry.Vector3, System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Scale
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 147
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nCreate non uniform scale transformation matrix with the origin as the fixed point.\n"
  example: []
  syntax:
    content: public static Transform Scale(Vector3 anchorPoint, double factorX, double factorY, double factorZ)
    parameters:
    - id: anchorPoint
      type: GeometrySharp.Geometry.Vector3
      description: The anchor point from the scale transformation is computed.
    - id: factorX
      type: System.Double
      description: Scale factor x direction.
    - id: factorY
      type: System.Double
      description: Scale factor y direction.
    - id: factorZ
      type: System.Double
      description: Scale factor z direction.
    return:
      type: GeometrySharp.Core.Transform
      description: Scale transformation matrix where the diagonal is (factorX, factorY, factorZ, 1)
    content.vb: Public Shared Function Scale(anchorPoint As Vector3, factorX As Double, factorY As Double, factorZ As Double) As Transform
  overload: GeometrySharp.Core.Transform.Scale*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Transform.Scale(System.Double,System.Double,System.Double)
  commentId: M:GeometrySharp.Core.Transform.Scale(System.Double,System.Double,System.Double)
  id: Scale(System.Double,System.Double,System.Double)
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: Scale(Double, Double, Double)
  nameWithType: Transform.Scale(Double, Double, Double)
  fullName: GeometrySharp.Core.Transform.Scale(System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Scale
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 170
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nCreate non uniform scale transformation matrix with the anchor point in the origin.\n"
  example: []
  syntax:
    content: public static Transform Scale(double factorX, double factorY, double factorZ)
    parameters:
    - id: factorX
      type: System.Double
      description: Scale factor x direction.
    - id: factorY
      type: System.Double
      description: Scale factor y direction.
    - id: factorZ
      type: System.Double
      description: Scale factor z direction.
    return:
      type: GeometrySharp.Core.Transform
      description: Scale transformation matrix where the diagonal is (factorX, factorY, factorZ, 1)
    content.vb: Public Shared Function Scale(factorX As Double, factorY As Double, factorZ As Double) As Transform
  overload: GeometrySharp.Core.Transform.Scale*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Transform.Copy(GeometrySharp.Core.Transform)
  commentId: M:GeometrySharp.Core.Transform.Copy(GeometrySharp.Core.Transform)
  id: Copy(GeometrySharp.Core.Transform)
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: Copy(Transform)
  nameWithType: Transform.Copy(Transform)
  fullName: GeometrySharp.Core.Transform.Copy(GeometrySharp.Core.Transform)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Copy
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 183
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nCreates a transform matrix copying another transform.\n"
  example: []
  syntax:
    content: public static Transform Copy(Transform other)
    parameters:
    - id: other
      type: GeometrySharp.Core.Transform
      description: The transform to copy
    return:
      type: GeometrySharp.Core.Transform
    content.vb: Public Shared Function Copy(other As Transform) As Transform
  overload: GeometrySharp.Core.Transform.Copy*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Transform.op_Multiply(GeometrySharp.Core.Transform,GeometrySharp.Core.Transform)
  commentId: M:GeometrySharp.Core.Transform.op_Multiply(GeometrySharp.Core.Transform,GeometrySharp.Core.Transform)
  id: op_Multiply(GeometrySharp.Core.Transform,GeometrySharp.Core.Transform)
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: Multiply(Transform, Transform)
  nameWithType: Transform.Multiply(Transform, Transform)
  fullName: GeometrySharp.Core.Transform.Multiply(GeometrySharp.Core.Transform, GeometrySharp.Core.Transform)
  type: Operator
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: op_Multiply
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 203
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nMultiply two transformation matrix.\n"
  example: []
  syntax:
    content: public static Transform operator *(Transform t0, Transform t1)
    parameters:
    - id: t0
      type: GeometrySharp.Core.Transform
      description: First transformation.
    - id: t1
      type: GeometrySharp.Core.Transform
      description: Second transformation.
    return:
      type: GeometrySharp.Core.Transform
      description: New transformation.
    content.vb: Public Shared Operator *(t0 As Transform, t1 As Transform) As Transform
  overload: GeometrySharp.Core.Transform.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Transform.Reflection(GeometrySharp.Geometry.Plane)
  commentId: M:GeometrySharp.Core.Transform.Reflection(GeometrySharp.Geometry.Plane)
  id: Reflection(GeometrySharp.Geometry.Plane)
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: Reflection(Plane)
  nameWithType: Transform.Reflection(Plane)
  fullName: GeometrySharp.Core.Transform.Reflection(GeometrySharp.Geometry.Plane)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Reflection
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 233
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nCreate a transformation matrix to reflect about a plane.\n"
  example: []
  syntax:
    content: public static Transform Reflection(Plane plane)
    parameters:
    - id: plane
      type: GeometrySharp.Geometry.Plane
      description: The plane used to reflect.
    return:
      type: GeometrySharp.Core.Transform
      description: The mirror transformation matrix.
    content.vb: Public Shared Function Reflection(plane As Plane) As Transform
  overload: GeometrySharp.Core.Transform.Reflection*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Transform.PlanarProjection(GeometrySharp.Geometry.Plane)
  commentId: M:GeometrySharp.Core.Transform.PlanarProjection(GeometrySharp.Geometry.Plane)
  id: PlanarProjection(GeometrySharp.Geometry.Plane)
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: PlanarProjection(Plane)
  nameWithType: Transform.PlanarProjection(Plane)
  fullName: GeometrySharp.Core.Transform.PlanarProjection(GeometrySharp.Geometry.Plane)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: PlanarProjection
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 266
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nGet the transformation that project to a plane.\nThe transformation maps a point to the point closest to the plane.\n"
  example: []
  syntax:
    content: public static Transform PlanarProjection(Plane plane)
    parameters:
    - id: plane
      type: GeometrySharp.Geometry.Plane
      description: Plane to project to.
    return:
      type: GeometrySharp.Core.Transform
      description: A transformation matrix which projects geometry onto a specified plane.
    content.vb: Public Shared Function PlanarProjection(plane As Plane) As Transform
  overload: GeometrySharp.Core.Transform.PlanarProjection*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Transform.PlaneToPlane(GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Plane)
  commentId: M:GeometrySharp.Core.Transform.PlaneToPlane(GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Plane)
  id: PlaneToPlane(GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Plane)
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: PlaneToPlane(Plane, Plane)
  nameWithType: Transform.PlaneToPlane(Plane, Plane)
  fullName: GeometrySharp.Core.Transform.PlaneToPlane(GeometrySharp.Geometry.Plane, GeometrySharp.Geometry.Plane)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: PlaneToPlane
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 296
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nCreate a transformation that orients a planeA to a planeB.\n"
  example: []
  syntax:
    content: public static Transform PlaneToPlane(Plane a, Plane b)
    parameters:
    - id: a
      type: GeometrySharp.Geometry.Plane
      description: The plane to orient from.
    - id: b
      type: GeometrySharp.Geometry.Plane
      description: The plane to orient to.
    return:
      type: GeometrySharp.Core.Transform
      description: The translation transformation.
    content.vb: Public Shared Function PlaneToPlane(a As Plane, b As Plane) As Transform
  overload: GeometrySharp.Core.Transform.PlaneToPlane*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Transform.Combine(GeometrySharp.Core.Transform)
  commentId: M:GeometrySharp.Core.Transform.Combine(GeometrySharp.Core.Transform)
  id: Combine(GeometrySharp.Core.Transform)
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: Combine(Transform)
  nameWithType: Transform.Combine(Transform)
  fullName: GeometrySharp.Core.Transform.Combine(GeometrySharp.Core.Transform)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Combine
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 336
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nCombines two transformations.\nThis is the same as the * operator.\n"
  example: []
  syntax:
    content: public Transform Combine(Transform t)
    parameters:
    - id: t
      type: GeometrySharp.Core.Transform
      description: Transformation to combine.
    return:
      type: GeometrySharp.Core.Transform
      description: Transformation combined.
    content.vb: Public Function Combine(t As Transform) As Transform
  overload: GeometrySharp.Core.Transform.Combine*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Core.Transform.ToString
  commentId: M:GeometrySharp.Core.Transform.ToString
  id: ToString
  parent: GeometrySharp.Core.Transform
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Transform.ToString()
  fullName: GeometrySharp.Core.Transform.ToString()
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Transform.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ToString
    path: ../GeometrySharp/Core/Transform.cs
    startLine: 345
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nThe transform represented in string format.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A text representation.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: GeometrySharp.Core.Transform.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: GeometrySharp.Core
  commentId: N:GeometrySharp.Core
  name: GeometrySharp.Core
  nameWithType: GeometrySharp.Core
  fullName: GeometrySharp.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IList<Double>>
  nameWithType: List<IList<Double>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>
  nameWithType.vb: List(Of IList(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double))
  name.vb: List(Of IList(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{System.Collections.Generic.IList{System.Double}}
  commentId: T:System.Collections.Generic.IList{System.Collections.Generic.IList{System.Double}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IList<Double>>
  nameWithType: IList<IList<Double>>
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IList<System.Double>>
  nameWithType.vb: IList(Of IList(Of Double))
  fullName.vb: System.Collections.Generic.IList(Of System.Collections.Generic.IList(Of System.Double))
  name.vb: IList(Of IList(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.IList{System.Double}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.IList{System.Double}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<IList<Double>>
  nameWithType: ICollection<IList<Double>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.IList<System.Double>>
  nameWithType.vb: ICollection(Of IList(Of Double))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.IList(Of System.Double))
  name.vb: ICollection(Of IList(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{System.Collections.Generic.IList{System.Double}}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.Collections.Generic.IList{System.Double}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<IList<Double>>
  nameWithType: IReadOnlyList<IList<Double>>
  fullName: System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IList<System.Double>>
  nameWithType.vb: IReadOnlyList(Of IList(Of Double))
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of System.Collections.Generic.IList(Of System.Double))
  name.vb: IReadOnlyList(Of IList(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.IList{System.Double}}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.IList{System.Double}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IList<Double>>
  nameWithType: IReadOnlyCollection<IList<Double>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.IList<System.Double>>
  nameWithType.vb: IReadOnlyCollection(Of IList(Of Double))
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.IList(Of System.Double))
  name.vb: IReadOnlyCollection(Of IList(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Double}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Double}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IList<Double>>
  nameWithType: IEnumerable<IList<Double>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<System.Double>>
  nameWithType.vb: IEnumerable(Of IList(Of Double))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IList(Of System.Double))
  name.vb: IEnumerable(Of IList(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#get_Item(System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  name: IList.get_Item(Int32)
  nameWithType: List<IList<Double>>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<IList<Double>>.IList.get_Item
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of IList(Of Double)).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#set_Item(System.Int32,System.Object)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  name: IList.set_Item(Int32, Object)
  nameWithType: List<IList<Double>>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<IList<Double>>.IList.set_Item
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of IList(Of Double)).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Add(System.Collections.Generic.IList{System.Double})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Add(System.Collections.Generic.IList{System.Double})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Add(`0)
  name: Add(IList<Double>)
  nameWithType: List<IList<Double>>.Add(IList<Double>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Add(System.Collections.Generic.IList<System.Double>)
  nameWithType.vb: List(Of IList(Of Double)).Add(IList(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Add(System.Collections.Generic.IList(Of System.Double))
  name.vb: Add(IList(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<IList<Double>>.Add
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of IList(Of Double)).Add
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  name: AddRange(IEnumerable<IList<Double>>)
  nameWithType: List<IList<Double>>.AddRange(IEnumerable<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.AddRange(System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).AddRange(IEnumerable(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).AddRange(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: AddRange(IEnumerable(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<IList<Double>>.AddRange
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of IList(Of Double)).AddRange
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.AsReadOnly
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.AsReadOnly
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.AsReadOnly
  name: AsReadOnly()
  nameWithType: List<IList<Double>>.AsReadOnly()
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.AsReadOnly()
  nameWithType.vb: List(Of IList(Of Double)).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<IList<Double>>.AsReadOnly
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of IList(Of Double)).AsReadOnly
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.BinarySearch(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IComparer{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.BinarySearch(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IComparer{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(Int32, Int32, IList<Double>, IComparer<IList<Double>>)
  nameWithType: List<IList<Double>>.BinarySearch(Int32, Int32, IList<Double>, IComparer<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.BinarySearch(System.Int32, System.Int32, System.Collections.Generic.IList<System.Double>, System.Collections.Generic.IComparer<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).BinarySearch(Int32, Int32, IList(Of Double), IComparer(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).BinarySearch(System.Int32, System.Int32, System.Collections.Generic.IList(Of System.Double), System.Collections.Generic.IComparer(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: BinarySearch(Int32, Int32, IList(Of Double), IComparer(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<IList<Double>>.BinarySearch
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of IList(Of Double)).BinarySearch
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.BinarySearch(System.Collections.Generic.IList{System.Double})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.BinarySearch(System.Collections.Generic.IList{System.Double})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.BinarySearch(`0)
  name: BinarySearch(IList<Double>)
  nameWithType: List<IList<Double>>.BinarySearch(IList<Double>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.BinarySearch(System.Collections.Generic.IList<System.Double>)
  nameWithType.vb: List(Of IList(Of Double)).BinarySearch(IList(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).BinarySearch(System.Collections.Generic.IList(Of System.Double))
  name.vb: BinarySearch(IList(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<IList<Double>>.BinarySearch
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of IList(Of Double)).BinarySearch
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.BinarySearch(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IComparer{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.BinarySearch(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IComparer{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(IList<Double>, IComparer<IList<Double>>)
  nameWithType: List<IList<Double>>.BinarySearch(IList<Double>, IComparer<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.BinarySearch(System.Collections.Generic.IList<System.Double>, System.Collections.Generic.IComparer<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).BinarySearch(IList(Of Double), IComparer(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).BinarySearch(System.Collections.Generic.IList(Of System.Double), System.Collections.Generic.IComparer(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: BinarySearch(IList(Of Double), IComparer(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<IList<Double>>.BinarySearch
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of IList(Of Double)).BinarySearch
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Clear
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Clear
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Clear
  name: Clear()
  nameWithType: List<IList<Double>>.Clear()
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Clear()
  nameWithType.vb: List(Of IList(Of Double)).Clear()
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<IList<Double>>.Clear
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of IList(Of Double)).Clear
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Contains(System.Collections.Generic.IList{System.Double})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Contains(System.Collections.Generic.IList{System.Double})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Contains(`0)
  name: Contains(IList<Double>)
  nameWithType: List<IList<Double>>.Contains(IList<Double>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Contains(System.Collections.Generic.IList<System.Double>)
  nameWithType.vb: List(Of IList(Of Double)).Contains(IList(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Contains(System.Collections.Generic.IList(Of System.Double))
  name.vb: Contains(IList(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<IList<Double>>.Contains
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of IList(Of Double)).Contains
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.ConvertAll``1(System.Converter{System.Collections.Generic.IList{System.Double},{TOutput}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.ConvertAll``1(System.Converter{System.Collections.Generic.IList{System.Double},``0})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  name: ConvertAll<TOutput>(Converter<IList<Double>, TOutput>)
  nameWithType: List<IList<Double>>.ConvertAll<TOutput>(Converter<IList<Double>, TOutput>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.ConvertAll<TOutput>(System.Converter<System.Collections.Generic.IList<System.Double>, TOutput>)
  nameWithType.vb: List(Of IList(Of Double)).ConvertAll(Of TOutput)(Converter(Of IList(Of Double), TOutput))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).ConvertAll(Of TOutput)(System.Converter(Of System.Collections.Generic.IList(Of System.Double), TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of IList(Of Double), TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<IList<Double>>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of IList(Of Double)).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.CopyTo(System.Int32,System.Collections.Generic.IList{System.Double}[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.CopyTo(System.Int32,System.Collections.Generic.IList{System.Double}[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  name: CopyTo(Int32, IList<Double>[], Int32, Int32)
  nameWithType: List<IList<Double>>.CopyTo(Int32, IList<Double>[], Int32, Int32)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.CopyTo(System.Int32, System.Collections.Generic.IList<System.Double>[], System.Int32, System.Int32)
  nameWithType.vb: List(Of IList(Of Double)).CopyTo(Int32, IList(Of Double)(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).CopyTo(System.Int32, System.Collections.Generic.IList(Of System.Double)(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, IList(Of Double)(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<IList<Double>>.CopyTo
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of IList(Of Double)).CopyTo
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.CopyTo(System.Collections.Generic.IList{System.Double}[])
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.CopyTo(System.Collections.Generic.IList{System.Double}[])
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.CopyTo(`0[])
  name: CopyTo(IList<Double>[])
  nameWithType: List<IList<Double>>.CopyTo(IList<Double>[])
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.CopyTo(System.Collections.Generic.IList<System.Double>[])
  nameWithType.vb: List(Of IList(Of Double)).CopyTo(IList(Of Double)())
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).CopyTo(System.Collections.Generic.IList(Of System.Double)())
  name.vb: CopyTo(IList(Of Double)())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<IList<Double>>.CopyTo
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of IList(Of Double)).CopyTo
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.CopyTo(System.Collections.Generic.IList{System.Double}[],System.Int32)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.CopyTo(System.Collections.Generic.IList{System.Double}[],System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  name: CopyTo(IList<Double>[], Int32)
  nameWithType: List<IList<Double>>.CopyTo(IList<Double>[], Int32)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.CopyTo(System.Collections.Generic.IList<System.Double>[], System.Int32)
  nameWithType.vb: List(Of IList(Of Double)).CopyTo(IList(Of Double)(), Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).CopyTo(System.Collections.Generic.IList(Of System.Double)(), System.Int32)
  name.vb: CopyTo(IList(Of Double)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<IList<Double>>.CopyTo
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of IList(Of Double)).CopyTo
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Exists(System.Predicate{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Exists(System.Predicate{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  name: Exists(Predicate<IList<Double>>)
  nameWithType: List<IList<Double>>.Exists(Predicate<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Exists(System.Predicate<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).Exists(Predicate(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Exists(System.Predicate(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: Exists(Predicate(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<IList<Double>>.Exists
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of IList(Of Double)).Exists
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Find(System.Predicate{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Find(System.Predicate{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  name: Find(Predicate<IList<Double>>)
  nameWithType: List<IList<Double>>.Find(Predicate<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Find(System.Predicate<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).Find(Predicate(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Find(System.Predicate(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: Find(Predicate(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<IList<Double>>.Find
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of IList(Of Double)).Find
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindAll(System.Predicate{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindAll(System.Predicate{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  name: FindAll(Predicate<IList<Double>>)
  nameWithType: List<IList<Double>>.FindAll(Predicate<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindAll(System.Predicate<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).FindAll(Predicate(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindAll(System.Predicate(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: FindAll(Predicate(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<IList<Double>>.FindAll
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of IList(Of Double)).FindAll
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindIndex(System.Int32,System.Int32,System.Predicate{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindIndex(System.Int32,System.Int32,System.Predicate{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Int32, Predicate<IList<Double>>)
  nameWithType: List<IList<Double>>.FindIndex(Int32, Int32, Predicate<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindIndex(System.Int32, System.Int32, System.Predicate<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).FindIndex(Int32, Int32, Predicate(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindIndex(System.Int32, System.Int32, System.Predicate(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: FindIndex(Int32, Int32, Predicate(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<IList<Double>>.FindIndex
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of IList(Of Double)).FindIndex
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindIndex(System.Int32,System.Predicate{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindIndex(System.Int32,System.Predicate{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Predicate<IList<Double>>)
  nameWithType: List<IList<Double>>.FindIndex(Int32, Predicate<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindIndex(System.Int32, System.Predicate<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).FindIndex(Int32, Predicate(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindIndex(System.Int32, System.Predicate(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: FindIndex(Int32, Predicate(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<IList<Double>>.FindIndex
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of IList(Of Double)).FindIndex
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindIndex(System.Predicate{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindIndex(System.Predicate{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  name: FindIndex(Predicate<IList<Double>>)
  nameWithType: List<IList<Double>>.FindIndex(Predicate<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindIndex(System.Predicate<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).FindIndex(Predicate(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindIndex(System.Predicate(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: FindIndex(Predicate(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<IList<Double>>.FindIndex
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of IList(Of Double)).FindIndex
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindLast(System.Predicate{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindLast(System.Predicate{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  name: FindLast(Predicate<IList<Double>>)
  nameWithType: List<IList<Double>>.FindLast(Predicate<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindLast(System.Predicate<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).FindLast(Predicate(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindLast(System.Predicate(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: FindLast(Predicate(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<IList<Double>>.FindLast
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of IList(Of Double)).FindLast
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindLastIndex(System.Int32,System.Int32,System.Predicate{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Int32, Predicate<IList<Double>>)
  nameWithType: List<IList<Double>>.FindLastIndex(Int32, Int32, Predicate<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindLastIndex(System.Int32, System.Int32, System.Predicate<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).FindLastIndex(Int32, Int32, Predicate(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<IList<Double>>.FindLastIndex
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of IList(Of Double)).FindLastIndex
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindLastIndex(System.Int32,System.Predicate{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindLastIndex(System.Int32,System.Predicate{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Predicate<IList<Double>>)
  nameWithType: List<IList<Double>>.FindLastIndex(Int32, Predicate<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindLastIndex(System.Int32, System.Predicate<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).FindLastIndex(Int32, Predicate(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindLastIndex(System.Int32, System.Predicate(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: FindLastIndex(Int32, Predicate(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<IList<Double>>.FindLastIndex
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of IList(Of Double)).FindLastIndex
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindLastIndex(System.Predicate{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.FindLastIndex(System.Predicate{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  name: FindLastIndex(Predicate<IList<Double>>)
  nameWithType: List<IList<Double>>.FindLastIndex(Predicate<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindLastIndex(System.Predicate<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).FindLastIndex(Predicate(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindLastIndex(System.Predicate(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: FindLastIndex(Predicate(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<IList<Double>>.FindLastIndex
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of IList(Of Double)).FindLastIndex
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.ForEach(System.Action{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.ForEach(System.Action{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  name: ForEach(Action<IList<Double>>)
  nameWithType: List<IList<Double>>.ForEach(Action<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.ForEach(System.Action<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).ForEach(Action(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).ForEach(System.Action(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: ForEach(Action(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<IList<Double>>.ForEach
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of IList(Of Double)).ForEach
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.GetEnumerator
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.GetEnumerator
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: List<IList<Double>>.GetEnumerator()
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.GetEnumerator()
  nameWithType.vb: List(Of IList(Of Double)).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<IList<Double>>.GetEnumerator
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of IList(Of Double)).GetEnumerator
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  name: GetRange(Int32, Int32)
  nameWithType: List<IList<Double>>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of IList(Of Double)).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<IList<Double>>.GetRange
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of IList(Of Double)).GetRange
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.IndexOf(System.Collections.Generic.IList{System.Double})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.IndexOf(System.Collections.Generic.IList{System.Double})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.IndexOf(`0)
  name: IndexOf(IList<Double>)
  nameWithType: List<IList<Double>>.IndexOf(IList<Double>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.IndexOf(System.Collections.Generic.IList<System.Double>)
  nameWithType.vb: List(Of IList(Of Double)).IndexOf(IList(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).IndexOf(System.Collections.Generic.IList(Of System.Double))
  name.vb: IndexOf(IList(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<IList<Double>>.IndexOf
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of IList(Of Double)).IndexOf
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.IndexOf(System.Collections.Generic.IList{System.Double},System.Int32)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.IndexOf(System.Collections.Generic.IList{System.Double},System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  name: IndexOf(IList<Double>, Int32)
  nameWithType: List<IList<Double>>.IndexOf(IList<Double>, Int32)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.IndexOf(System.Collections.Generic.IList<System.Double>, System.Int32)
  nameWithType.vb: List(Of IList(Of Double)).IndexOf(IList(Of Double), Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).IndexOf(System.Collections.Generic.IList(Of System.Double), System.Int32)
  name.vb: IndexOf(IList(Of Double), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<IList<Double>>.IndexOf
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of IList(Of Double)).IndexOf
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.IndexOf(System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.IndexOf(System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  name: IndexOf(IList<Double>, Int32, Int32)
  nameWithType: List<IList<Double>>.IndexOf(IList<Double>, Int32, Int32)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.IndexOf(System.Collections.Generic.IList<System.Double>, System.Int32, System.Int32)
  nameWithType.vb: List(Of IList(Of Double)).IndexOf(IList(Of Double), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).IndexOf(System.Collections.Generic.IList(Of System.Double), System.Int32, System.Int32)
  name.vb: IndexOf(IList(Of Double), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<IList<Double>>.IndexOf
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of IList(Of Double)).IndexOf
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Insert(System.Int32,System.Collections.Generic.IList{System.Double})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Insert(System.Int32,System.Collections.Generic.IList{System.Double})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  name: Insert(Int32, IList<Double>)
  nameWithType: List<IList<Double>>.Insert(Int32, IList<Double>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Insert(System.Int32, System.Collections.Generic.IList<System.Double>)
  nameWithType.vb: List(Of IList(Of Double)).Insert(Int32, IList(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Insert(System.Int32, System.Collections.Generic.IList(Of System.Double))
  name.vb: Insert(Int32, IList(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<IList<Double>>.Insert
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of IList(Of Double)).Insert
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  name: InsertRange(Int32, IEnumerable<IList<Double>>)
  nameWithType: List<IList<Double>>.InsertRange(Int32, IEnumerable<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).InsertRange(Int32, IEnumerable(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: InsertRange(Int32, IEnumerable(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<IList<Double>>.InsertRange
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of IList(Of Double)).InsertRange
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.LastIndexOf(System.Collections.Generic.IList{System.Double})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.LastIndexOf(System.Collections.Generic.IList{System.Double})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0)
  name: LastIndexOf(IList<Double>)
  nameWithType: List<IList<Double>>.LastIndexOf(IList<Double>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.LastIndexOf(System.Collections.Generic.IList<System.Double>)
  nameWithType.vb: List(Of IList(Of Double)).LastIndexOf(IList(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).LastIndexOf(System.Collections.Generic.IList(Of System.Double))
  name.vb: LastIndexOf(IList(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<IList<Double>>.LastIndexOf
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of IList(Of Double)).LastIndexOf
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.LastIndexOf(System.Collections.Generic.IList{System.Double},System.Int32)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.LastIndexOf(System.Collections.Generic.IList{System.Double},System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  name: LastIndexOf(IList<Double>, Int32)
  nameWithType: List<IList<Double>>.LastIndexOf(IList<Double>, Int32)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.LastIndexOf(System.Collections.Generic.IList<System.Double>, System.Int32)
  nameWithType.vb: List(Of IList(Of Double)).LastIndexOf(IList(Of Double), Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).LastIndexOf(System.Collections.Generic.IList(Of System.Double), System.Int32)
  name.vb: LastIndexOf(IList(Of Double), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<IList<Double>>.LastIndexOf
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of IList(Of Double)).LastIndexOf
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.LastIndexOf(System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.LastIndexOf(System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  name: LastIndexOf(IList<Double>, Int32, Int32)
  nameWithType: List<IList<Double>>.LastIndexOf(IList<Double>, Int32, Int32)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.LastIndexOf(System.Collections.Generic.IList<System.Double>, System.Int32, System.Int32)
  nameWithType.vb: List(Of IList(Of Double)).LastIndexOf(IList(Of Double), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).LastIndexOf(System.Collections.Generic.IList(Of System.Double), System.Int32, System.Int32)
  name.vb: LastIndexOf(IList(Of Double), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<IList<Double>>.LastIndexOf
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of IList(Of Double)).LastIndexOf
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Remove(System.Collections.Generic.IList{System.Double})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Remove(System.Collections.Generic.IList{System.Double})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Remove(`0)
  name: Remove(IList<Double>)
  nameWithType: List<IList<Double>>.Remove(IList<Double>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Remove(System.Collections.Generic.IList<System.Double>)
  nameWithType.vb: List(Of IList(Of Double)).Remove(IList(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Remove(System.Collections.Generic.IList(Of System.Double))
  name.vb: Remove(IList(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<IList<Double>>.Remove
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of IList(Of Double)).Remove
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.RemoveAll(System.Predicate{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.RemoveAll(System.Predicate{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  name: RemoveAll(Predicate<IList<Double>>)
  nameWithType: List<IList<Double>>.RemoveAll(Predicate<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.RemoveAll(System.Predicate<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).RemoveAll(Predicate(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).RemoveAll(System.Predicate(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: RemoveAll(Predicate(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<IList<Double>>.RemoveAll
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of IList(Of Double)).RemoveAll
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: List<IList<Double>>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of IList(Of Double)).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<IList<Double>>.RemoveAt
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of IList(Of Double)).RemoveAt
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  name: RemoveRange(Int32, Int32)
  nameWithType: List<IList<Double>>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of IList(Of Double)).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<IList<Double>>.RemoveRange
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of IList(Of Double)).RemoveRange
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Reverse
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Reverse
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Reverse
  name: Reverse()
  nameWithType: List<IList<Double>>.Reverse()
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Reverse()
  nameWithType.vb: List(Of IList(Of Double)).Reverse()
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<IList<Double>>.Reverse
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of IList(Of Double)).Reverse
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  name: Reverse(Int32, Int32)
  nameWithType: List<IList<Double>>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of IList(Of Double)).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<IList<Double>>.Reverse
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of IList(Of Double)).Reverse
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Sort
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Sort
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Sort
  name: Sort()
  nameWithType: List<IList<Double>>.Sort()
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Sort()
  nameWithType.vb: List(Of IList(Of Double)).Sort()
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<IList<Double>>.Sort
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of IList(Of Double)).Sort
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Sort(System.Collections.Generic.IComparer{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Sort(System.Collections.Generic.IComparer{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  name: Sort(IComparer<IList<Double>>)
  nameWithType: List<IList<Double>>.Sort(IComparer<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Sort(System.Collections.Generic.IComparer<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).Sort(IComparer(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Sort(System.Collections.Generic.IComparer(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: Sort(IComparer(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<IList<Double>>.Sort
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of IList(Of Double)).Sort
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Sort(System.Comparison{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Sort(System.Comparison{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  name: Sort(Comparison<IList<Double>>)
  nameWithType: List<IList<Double>>.Sort(Comparison<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Sort(System.Comparison<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).Sort(Comparison(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Sort(System.Comparison(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: Sort(Comparison(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<IList<Double>>.Sort
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of IList(Of Double)).Sort
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  name: Sort(Int32, Int32, IComparer<IList<Double>>)
  nameWithType: List<IList<Double>>.Sort(Int32, Int32, IComparer<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).Sort(Int32, Int32, IComparer(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: Sort(Int32, Int32, IComparer(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<IList<Double>>.Sort
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of IList(Of Double)).Sort
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<IList<Double>>.GetEnumerator()
  nameWithType: List<IList<Double>>.IEnumerable<IList<Double>>.GetEnumerator()
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<System.Double>>.GetEnumerator()
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<IList<Double>>.GetEnumerator
    nameWithType: List<IList<Double>>.IEnumerable<IList<Double>>.GetEnumerator
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<System.Double>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of IList(Of Double)).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<IList<Double>>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<IList<Double>>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of IList(Of Double)).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: List<IList<Double>>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<IList<Double>>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of IList(Of Double)).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  name: IList.Add(Object)
  nameWithType: List<IList<Double>>.IList.Add(Object)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<IList<Double>>.IList.Add
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of IList(Of Double)).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  name: IList.Contains(Object)
  nameWithType: List<IList<Double>>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<IList<Double>>.IList.Contains
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of IList(Of Double)).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  name: IList.IndexOf(Object)
  nameWithType: List<IList<Double>>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<IList<Double>>.IList.IndexOf
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of IList(Of Double)).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  name: IList.Insert(Int32, Object)
  nameWithType: List<IList<Double>>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<IList<Double>>.IList.Insert
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of IList(Of Double)).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  name: IList.Remove(Object)
  nameWithType: List<IList<Double>>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<IList<Double>>.IList.Remove
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of IList(Of Double)).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.ToArray
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.ToArray
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.ToArray
  name: ToArray()
  nameWithType: List<IList<Double>>.ToArray()
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.ToArray()
  nameWithType.vb: List(Of IList(Of Double)).ToArray()
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<IList<Double>>.ToArray
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of IList(Of Double)).ToArray
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.TrimExcess
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.TrimExcess
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.TrimExcess
  name: TrimExcess()
  nameWithType: List<IList<Double>>.TrimExcess()
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.TrimExcess()
  nameWithType.vb: List(Of IList(Of Double)).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<IList<Double>>.TrimExcess
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of IList(Of Double)).TrimExcess
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.TrueForAll(System.Predicate{System.Collections.Generic.IList{System.Double}})
  commentId: M:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.TrueForAll(System.Predicate{System.Collections.Generic.IList{System.Double}})
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  name: TrueForAll(Predicate<IList<Double>>)
  nameWithType: List<IList<Double>>.TrueForAll(Predicate<IList<Double>>)
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.TrueForAll(System.Predicate<System.Collections.Generic.IList<System.Double>>)
  nameWithType.vb: List(Of IList(Of Double)).TrueForAll(Predicate(Of IList(Of Double)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).TrueForAll(System.Predicate(Of System.Collections.Generic.IList(Of System.Double)))
  name.vb: TrueForAll(Predicate(Of IList(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<IList<Double>>.TrueForAll
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of IList(Of Double)).TrueForAll
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Capacity
  commentId: P:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Capacity
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Capacity
  name: Capacity
  nameWithType: List<IList<Double>>.Capacity
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Capacity
  nameWithType.vb: List(Of IList(Of Double)).Capacity
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Capacity
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Count
  commentId: P:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Count
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Count
  name: Count
  nameWithType: List<IList<Double>>.Count
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Count
  nameWithType.vb: List(Of IList(Of Double)).Count
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Count
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Item(System.Int32)
  commentId: P:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.Item(System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: List<IList<Double>>.Item[Int32]
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Item[System.Int32]
  nameWithType.vb: List(Of IList(Of Double)).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<IList<Double>>.Item
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of IList(Of Double)).Item
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<IList<Double>>.IsReadOnly
  nameWithType: List<IList<Double>>.ICollection<IList<Double>>.IsReadOnly
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.Generic.ICollection<System.Collections.Generic.IList<System.Double>>.IsReadOnly
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: List<IList<Double>>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: List<IList<Double>>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#IsFixedSize
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: List<IList<Double>>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#IsReadOnly
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: List<IList<Double>>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Generic.List{System.Collections.Generic.IList{System.Double}}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  name: IList.Item[Int32]
  nameWithType: List<IList<Double>>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of IList(Of Double)).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<IList<Double>>.IList.Item
    fullName: System.Collections.Generic.List<System.Collections.Generic.IList<System.Double>>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of IList(Of Double)).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of System.Collections.Generic.IList(Of System.Double)).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Double}}.GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Func{System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Boolean})
  commentId: M:GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  parent: GeometrySharp.ExtendedMethods.ExtendedEnumerable
  definition: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  name: Unique<IList<Double>>(Func<IList<Double>, IList<Double>, Boolean>)
  nameWithType: ExtendedEnumerable.Unique<IList<Double>>(Func<IList<Double>, IList<Double>, Boolean>)
  fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique<System.Collections.Generic.IList<System.Double>>(System.Func<System.Collections.Generic.IList<System.Double>, System.Collections.Generic.IList<System.Double>, System.Boolean>)
  nameWithType.vb: ExtendedEnumerable.Unique(Of IList(Of Double))(Func(Of IList(Of Double), IList(Of Double), Boolean))
  fullName.vb: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique(Of System.Collections.Generic.IList(Of System.Double))(System.Func(Of System.Collections.Generic.IList(Of System.Double), System.Collections.Generic.IList(Of System.Double), System.Boolean))
  name.vb: Unique(Of IList(Of Double))(Func(Of IList(Of Double), IList(Of Double), Boolean))
  spec.csharp:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Func{``0,``0,System.Boolean})
    name: Unique<IList<Double>>
    nameWithType: ExtendedEnumerable.Unique<IList<Double>>
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique<System.Collections.Generic.IList<System.Double>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Func{``0,``0,System.Boolean})
    name: Unique(Of IList(Of Double))
    nameWithType: ExtendedEnumerable.Unique(Of IList(Of Double))
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique(Of System.Collections.Generic.IList(Of System.Double))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  isExternal: true
  name: IList.get_Item(Int32)
  nameWithType: List<T>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of T).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<T>.IList.get_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of T).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  isExternal: true
  name: IList.set_Item(Int32, Object)
  nameWithType: List<T>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<T>.IList.set_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of T).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Add(`0)
  commentId: M:System.Collections.Generic.List`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: List<T>.Add(T)
  fullName: System.Collections.Generic.List<T>.Add(T)
  nameWithType.vb: List(Of T).Add(T)
  fullName.vb: System.Collections.Generic.List(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<T>.Add
    fullName: System.Collections.Generic.List<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of T).Add
    fullName: System.Collections.Generic.List(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).AddRange(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<T>.AddRange
    fullName: System.Collections.Generic.List<T>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of T).AddRange
    fullName: System.Collections.Generic.List(Of T).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AsReadOnly
  commentId: M:System.Collections.Generic.List`1.AsReadOnly
  isExternal: true
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
  nameWithType.vb: List(Of T).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of T).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<T>.AsReadOnly
    fullName: System.Collections.Generic.List<T>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of T).AsReadOnly
    fullName: System.Collections.Generic.List(Of T).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(Int32, Int32, T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Int32, Int32, T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  isExternal: true
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
  nameWithType.vb: List(Of T).BinarySearch(T)
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Clear
  commentId: M:System.Collections.Generic.List`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
  nameWithType.vb: List(Of T).Clear()
  fullName.vb: System.Collections.Generic.List(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<T>.Clear
    fullName: System.Collections.Generic.List<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of T).Clear
    fullName: System.Collections.Generic.List(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Contains(`0)
  commentId: M:System.Collections.Generic.List`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
  nameWithType.vb: List(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.List(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<T>.Contains
    fullName: System.Collections.Generic.List<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of T).Contains
    fullName: System.Collections.Generic.List(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  commentId: M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  isExternal: true
  name: ConvertAll<TOutput>(Converter<T, TOutput>)
  nameWithType: List<T>.ConvertAll<TOutput>(Converter<T, TOutput>)
  fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>(System.Converter<T, TOutput>)
  nameWithType.vb: List(Of T).ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  fullName.vb: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)(System.Converter(Of T, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<T>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of T).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  isExternal: true
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
  nameWithType.vb: List(Of T).CopyTo(Int32, T(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, T(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  isExternal: true
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
  nameWithType.vb: List(Of T).CopyTo(T())
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T())
  name.vb: CopyTo(T())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: List<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: List(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  isExternal: true
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(System.Predicate<T>)
  nameWithType.vb: List(Of T).Exists(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Exists(System.Predicate(Of T))
  name.vb: Exists(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<T>.Exists
    fullName: System.Collections.Generic.List<T>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of T).Exists
    fullName: System.Collections.Generic.List(Of T).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  isExternal: true
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(System.Predicate<T>)
  nameWithType.vb: List(Of T).Find(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Find(System.Predicate(Of T))
  name.vb: Find(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<T>.Find
    fullName: System.Collections.Generic.List<T>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of T).Find
    fullName: System.Collections.Generic.List(Of T).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  isExternal: true
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindAll(System.Predicate(Of T))
  name.vb: FindAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<T>.FindAll
    fullName: System.Collections.Generic.List<T>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of T).FindAll
    fullName: System.Collections.Generic.List(Of T).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  isExternal: true
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Predicate(Of T))
  name.vb: FindIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  isExternal: true
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLast(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLast(System.Predicate(Of T))
  name.vb: FindLast(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<T>.FindLast
    fullName: System.Collections.Generic.List<T>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of T).FindLast
    fullName: System.Collections.Generic.List(Of T).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Predicate(Of T))
  name.vb: FindLastIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  isExternal: true
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(System.Action<T>)
  nameWithType.vb: List(Of T).ForEach(Action(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).ForEach(System.Action(Of T))
  name.vb: ForEach(Action(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<T>.ForEach
    fullName: System.Collections.Generic.List<T>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of T).ForEach
    fullName: System.Collections.Generic.List(Of T).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetEnumerator
  commentId: M:System.Collections.Generic.List`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
  nameWithType.vb: List(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of T).GetEnumerator
    fullName: System.Collections.Generic.List(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  isExternal: true
  name: GetRange(Int32, Int32)
  nameWithType: List<T>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<T>.GetRange
    fullName: System.Collections.Generic.List<T>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of T).GetRange
    fullName: System.Collections.Generic.List(Of T).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
  nameWithType.vb: List(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32)
  nameWithType: List<T>.IndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32, Int32)
  nameWithType: List<T>.IndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: List<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.List<T>.Insert(System.Int32, T)
  nameWithType.vb: List(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.List(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<T>.Insert
    fullName: System.Collections.Generic.List<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of T).Insert
    fullName: System.Collections.Generic.List(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).InsertRange(Int32, IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<T>.InsertRange
    fullName: System.Collections.Generic.List<T>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of T).InsertRange
    fullName: System.Collections.Generic.List(Of T).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  isExternal: true
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
  nameWithType.vb: List(Of T).LastIndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Remove(`0)
  commentId: M:System.Collections.Generic.List`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: List<T>.Remove(T)
  fullName: System.Collections.Generic.List<T>.Remove(T)
  nameWithType.vb: List(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.List(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<T>.Remove
    fullName: System.Collections.Generic.List<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of T).Remove
    fullName: System.Collections.Generic.List(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  isExternal: true
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).RemoveAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAll(System.Predicate(Of T))
  name.vb: RemoveAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<T>.RemoveAll
    fullName: System.Collections.Generic.List<T>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of T).RemoveAll
    fullName: System.Collections.Generic.List(Of T).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<T>.RemoveAt
    fullName: System.Collections.Generic.List<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of T).RemoveAt
    fullName: System.Collections.Generic.List(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  isExternal: true
  name: RemoveRange(Int32, Int32)
  nameWithType: List<T>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<T>.RemoveRange
    fullName: System.Collections.Generic.List<T>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of T).RemoveRange
    fullName: System.Collections.Generic.List(Of T).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse
  commentId: M:System.Collections.Generic.List`1.Reverse
  isExternal: true
  name: Reverse()
  nameWithType: List<T>.Reverse()
  fullName: System.Collections.Generic.List<T>.Reverse()
  nameWithType.vb: List(Of T).Reverse()
  fullName.vb: System.Collections.Generic.List(Of T).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  isExternal: true
  name: Reverse(Int32, Int32)
  nameWithType: List<T>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort
  commentId: M:System.Collections.Generic.List`1.Sort
  isExternal: true
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
  nameWithType.vb: List(Of T).Sort()
  fullName.vb: System.Collections.Generic.List(Of T).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  isExternal: true
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Comparison<T>)
  nameWithType.vb: List(Of T).Sort(Comparison(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(Int32, Int32, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Int32, Int32, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isExternal: true
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: List<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<T>.GetEnumerator
    nameWithType: List<T>.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<T>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<T>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of T).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: List<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<T>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  isExternal: true
  name: IList.Add(Object)
  nameWithType: List<T>.IList.Add(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<T>.IList.Add
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of T).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  isExternal: true
  name: IList.Contains(Object)
  nameWithType: List<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<T>.IList.Contains
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of T).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  isExternal: true
  name: IList.IndexOf(Object)
  nameWithType: List<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<T>.IList.IndexOf
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of T).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  isExternal: true
  name: IList.Insert(Int32, Object)
  nameWithType: List<T>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<T>.IList.Insert
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of T).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  isExternal: true
  name: IList.Remove(Object)
  nameWithType: List<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<T>.IList.Remove
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of T).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ToArray
  commentId: M:System.Collections.Generic.List`1.ToArray
  isExternal: true
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
  nameWithType.vb: List(Of T).ToArray()
  fullName.vb: System.Collections.Generic.List(Of T).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<T>.ToArray
    fullName: System.Collections.Generic.List<T>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of T).ToArray
    fullName: System.Collections.Generic.List(Of T).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrimExcess
  commentId: M:System.Collections.Generic.List`1.TrimExcess
  isExternal: true
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
  nameWithType.vb: List(Of T).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of T).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<T>.TrimExcess
    fullName: System.Collections.Generic.List<T>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of T).TrimExcess
    fullName: System.Collections.Generic.List(Of T).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  isExternal: true
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).TrueForAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).TrueForAll(System.Predicate(Of T))
  name.vb: TrueForAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<T>.TrueForAll
    fullName: System.Collections.Generic.List<T>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of T).TrueForAll
    fullName: System.Collections.Generic.List(Of T).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  isExternal: true
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  nameWithType.vb: List(Of T).Capacity
  fullName.vb: System.Collections.Generic.List(Of T).Capacity
- uid: System.Collections.Generic.List`1.Count
  commentId: P:System.Collections.Generic.List`1.Count
  isExternal: true
  name: Count
  nameWithType: List<T>.Count
  fullName: System.Collections.Generic.List<T>.Count
  nameWithType.vb: List(Of T).Count
  fullName.vb: System.Collections.Generic.List(Of T).Count
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: List<T>.Item[Int32]
  fullName: System.Collections.Generic.List<T>.Item[System.Int32]
  nameWithType.vb: List(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<T>.Item
    fullName: System.Collections.Generic.List<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of T).Item
    fullName: System.Collections.Generic.List(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  isExternal: true
  name: ICollection<T>.IsReadOnly
  nameWithType: List<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  isExternal: true
  name: ICollection.IsSynchronized
  nameWithType: List<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  isExternal: true
  name: ICollection.SyncRoot
  nameWithType: List<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  isExternal: true
  name: IList.IsFixedSize
  nameWithType: List<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  isExternal: true
  name: IList.IsReadOnly
  nameWithType: List<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  isExternal: true
  name: IList.Item[Int32]
  nameWithType: List<T>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of T).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<T>.IList.Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of T).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  isExternal: true
  name: Unique<T>(IEnumerable<T>, Func<T, T, Boolean>)
  nameWithType: ExtendedEnumerable.Unique<T>(IEnumerable<T>, Func<T, T, Boolean>)
  fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, System.Boolean>)
  nameWithType.vb: ExtendedEnumerable.Unique(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  fullName.vb: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, System.Boolean))
  name.vb: Unique(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  spec.csharp:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: Unique<T>
    nameWithType: ExtendedEnumerable.Unique<T>
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: Unique(Of T)
    nameWithType: ExtendedEnumerable.Unique(Of T)
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable
  commentId: T:GeometrySharp.ExtendedMethods.ExtendedEnumerable
  parent: GeometrySharp.ExtendedMethods
  name: ExtendedEnumerable
  nameWithType: ExtendedEnumerable
  fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable
- uid: GeometrySharp.ExtendedMethods
  commentId: N:GeometrySharp.ExtendedMethods
  name: GeometrySharp.ExtendedMethods
  nameWithType: GeometrySharp.ExtendedMethods
  fullName: GeometrySharp.ExtendedMethods
- uid: GeometrySharp.Core.Transform.#ctor*
  commentId: Overload:GeometrySharp.Core.Transform.#ctor
  name: Transform
  nameWithType: Transform.Transform
  fullName: GeometrySharp.Core.Transform.Transform
- uid: GeometrySharp.Core.Transform.Identity*
  commentId: Overload:GeometrySharp.Core.Transform.Identity
  name: Identity
  nameWithType: Transform.Identity
  fullName: GeometrySharp.Core.Transform.Identity
- uid: GeometrySharp.Core.Transform
  commentId: T:GeometrySharp.Core.Transform
  parent: GeometrySharp.Core
  name: Transform
  nameWithType: Transform
  fullName: GeometrySharp.Core.Transform
- uid: GeometrySharp.Core.Transform.Translation*
  commentId: Overload:GeometrySharp.Core.Transform.Translation
  name: Translation
  nameWithType: Transform.Translation
  fullName: GeometrySharp.Core.Transform.Translation
- uid: GeometrySharp.Geometry.Vector3
  commentId: T:GeometrySharp.Geometry.Vector3
  parent: GeometrySharp.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: GeometrySharp.Geometry.Vector3
- uid: GeometrySharp.Geometry
  commentId: N:GeometrySharp.Geometry
  name: GeometrySharp.Geometry
  nameWithType: GeometrySharp.Geometry
  fullName: GeometrySharp.Geometry
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: GeometrySharp.Core.Transform.Rotation*
  commentId: Overload:GeometrySharp.Core.Transform.Rotation
  name: Rotation
  nameWithType: Transform.Rotation
  fullName: GeometrySharp.Core.Transform.Rotation
- uid: GeometrySharp.Geometry.Line
  commentId: T:GeometrySharp.Geometry.Line
  parent: GeometrySharp.Geometry
  name: Line
  nameWithType: Line
  fullName: GeometrySharp.Geometry.Line
- uid: GeometrySharp.Core.Transform.Scale*
  commentId: Overload:GeometrySharp.Core.Transform.Scale
  name: Scale
  nameWithType: Transform.Scale
  fullName: GeometrySharp.Core.Transform.Scale
- uid: GeometrySharp.Core.Transform.Copy*
  commentId: Overload:GeometrySharp.Core.Transform.Copy
  name: Copy
  nameWithType: Transform.Copy
  fullName: GeometrySharp.Core.Transform.Copy
- uid: GeometrySharp.Core.Transform.op_Multiply*
  commentId: Overload:GeometrySharp.Core.Transform.op_Multiply
  name: Multiply
  nameWithType: Transform.Multiply
  fullName: GeometrySharp.Core.Transform.Multiply
- uid: GeometrySharp.Core.Transform.Reflection*
  commentId: Overload:GeometrySharp.Core.Transform.Reflection
  name: Reflection
  nameWithType: Transform.Reflection
  fullName: GeometrySharp.Core.Transform.Reflection
- uid: GeometrySharp.Geometry.Plane
  commentId: T:GeometrySharp.Geometry.Plane
  parent: GeometrySharp.Geometry
  name: Plane
  nameWithType: Plane
  fullName: GeometrySharp.Geometry.Plane
- uid: GeometrySharp.Core.Transform.PlanarProjection*
  commentId: Overload:GeometrySharp.Core.Transform.PlanarProjection
  name: PlanarProjection
  nameWithType: Transform.PlanarProjection
  fullName: GeometrySharp.Core.Transform.PlanarProjection
- uid: GeometrySharp.Core.Transform.PlaneToPlane*
  commentId: Overload:GeometrySharp.Core.Transform.PlaneToPlane
  name: PlaneToPlane
  nameWithType: Transform.PlaneToPlane
  fullName: GeometrySharp.Core.Transform.PlaneToPlane
- uid: GeometrySharp.Core.Transform.Combine*
  commentId: Overload:GeometrySharp.Core.Transform.Combine
  name: Combine
  nameWithType: Transform.Combine
  fullName: GeometrySharp.Core.Transform.Combine
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Core.Transform.ToString*
  commentId: Overload:GeometrySharp.Core.Transform.ToString
  name: ToString
  nameWithType: Transform.ToString
  fullName: GeometrySharp.Core.Transform.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
