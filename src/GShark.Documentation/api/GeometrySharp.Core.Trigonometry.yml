### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Core.Trigonometry
  commentId: T:GeometrySharp.Core.Trigonometry
  id: Trigonometry
  parent: GeometrySharp.Core
  children:
  - GeometrySharp.Core.Trigonometry.ArePointsCoplanar(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  - GeometrySharp.Core.Trigonometry.AreThreePointsCollinear(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  - GeometrySharp.Core.Trigonometry.ClosestPointToSegment(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  langs:
  - csharp
  - vb
  name: Trigonometry
  nameWithType: Trigonometry
  fullName: GeometrySharp.Core.Trigonometry
  type: Class
  source:
    remote:
      path: GeometrySharp/Core/Trigonometry.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Trigonometry
    path: ../GeometrySharp/Core/Trigonometry.cs
    startLine: 10
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nTrigonometry provides basic trigonometry methods.\n"
  example: []
  syntax:
    content: public class Trigonometry
    content.vb: Public Class Trigonometry
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Core.Trigonometry.ArePointsCoplanar(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  commentId: M:GeometrySharp.Core.Trigonometry.ArePointsCoplanar(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  id: ArePointsCoplanar(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  parent: GeometrySharp.Core.Trigonometry
  langs:
  - csharp
  - vb
  name: ArePointsCoplanar(IList<Vector3>)
  nameWithType: Trigonometry.ArePointsCoplanar(IList<Vector3>)
  fullName: GeometrySharp.Core.Trigonometry.ArePointsCoplanar(System.Collections.Generic.IList<GeometrySharp.Geometry.Vector3>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Trigonometry.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ArePointsCoplanar
    path: ../GeometrySharp/Core/Trigonometry.cs
    startLine: 19
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nDetermine if the provide points are on the same plane.\n"
  example: []
  syntax:
    content: public static bool ArePointsCoplanar(IList<Vector3> points)
    parameters:
    - id: points
      type: System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3}
      description: Provided points.
    return:
      type: System.Boolean
      description: Whether the point are coplanar.
    content.vb: Public Shared Function ArePointsCoplanar(points As IList(Of Vector3)) As Boolean
  overload: GeometrySharp.Core.Trigonometry.ArePointsCoplanar*
  nameWithType.vb: Trigonometry.ArePointsCoplanar(IList(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Core.Trigonometry.ArePointsCoplanar(System.Collections.Generic.IList(Of GeometrySharp.Geometry.Vector3))
  name.vb: ArePointsCoplanar(IList(Of Vector3))
- uid: GeometrySharp.Core.Trigonometry.AreThreePointsCollinear(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  commentId: M:GeometrySharp.Core.Trigonometry.AreThreePointsCollinear(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  id: AreThreePointsCollinear(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  parent: GeometrySharp.Core.Trigonometry
  langs:
  - csharp
  - vb
  name: AreThreePointsCollinear(Vector3, Vector3, Vector3, Double)
  nameWithType: Trigonometry.AreThreePointsCollinear(Vector3, Vector3, Vector3, Double)
  fullName: GeometrySharp.Core.Trigonometry.AreThreePointsCollinear(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Trigonometry.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: AreThreePointsCollinear
    path: ../GeometrySharp/Core/Trigonometry.cs
    startLine: 46
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nDetermine if three points form a straight line (are collinear) within a given tolerance.\n"
  example: []
  syntax:
    content: public static bool AreThreePointsCollinear(Vector3 pt1, Vector3 pt2, Vector3 pt3, double tol)
    parameters:
    - id: pt1
      type: GeometrySharp.Geometry.Vector3
      description: First point.
    - id: pt2
      type: GeometrySharp.Geometry.Vector3
      description: Second point.
    - id: pt3
      type: GeometrySharp.Geometry.Vector3
      description: Third point.
    - id: tol
      type: System.Double
      description: Tolerance.
    return:
      type: System.Boolean
      description: True if the three points are collinear.
    content.vb: Public Shared Function AreThreePointsCollinear(pt1 As Vector3, pt2 As Vector3, pt3 As Vector3, tol As Double) As Boolean
  overload: GeometrySharp.Core.Trigonometry.AreThreePointsCollinear*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Core.Trigonometry.ClosestPointToSegment(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  commentId: M:GeometrySharp.Core.Trigonometry.ClosestPointToSegment(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  id: ClosestPointToSegment(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  parent: GeometrySharp.Core.Trigonometry
  langs:
  - csharp
  - vb
  name: ClosestPointToSegment(Vector3, Vector3, Vector3, Double, Double)
  nameWithType: Trigonometry.ClosestPointToSegment(Vector3, Vector3, Vector3, Double, Double)
  fullName: GeometrySharp.Core.Trigonometry.ClosestPointToSegment(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Core/Trigonometry.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ClosestPointToSegment
    path: ../GeometrySharp/Core/Trigonometry.cs
    startLine: 68
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Core
  summary: "\nFind the closest point on a segment.\nThe segment is deconstruct in two points and two t values.\n"
  example: []
  syntax:
    content: public static (double tValue, Vector3 pt) ClosestPointToSegment(Vector3 point, Vector3 segmentPt0, Vector3 segmentPt1, double valueT0, double valueT1)
    parameters:
    - id: point
      type: GeometrySharp.Geometry.Vector3
      description: Point to project.
    - id: segmentPt0
      type: GeometrySharp.Geometry.Vector3
      description: First point of the segment.
    - id: segmentPt1
      type: GeometrySharp.Geometry.Vector3
      description: Second point of the segment.
    - id: valueT0
      type: System.Double
      description: First t value of the segment.
    - id: valueT1
      type: System.Double
      description: Second t value of the segment.
    return:
      type: System.ValueTuple{System.Double,GeometrySharp.Geometry.Vector3}
      description: Tuple with the point projected and its t value.
    content.vb: Public Shared Function ClosestPointToSegment(point As Vector3, segmentPt0 As Vector3, segmentPt1 As Vector3, valueT0 As Double, valueT1 As Double) As(tValue As Double, pt As Vector3)
  overload: GeometrySharp.Core.Trigonometry.ClosestPointToSegment*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: GeometrySharp.Core
  commentId: N:GeometrySharp.Core
  name: GeometrySharp.Core
  nameWithType: GeometrySharp.Core
  fullName: GeometrySharp.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GeometrySharp.Core.Trigonometry.ArePointsCoplanar*
  commentId: Overload:GeometrySharp.Core.Trigonometry.ArePointsCoplanar
  name: ArePointsCoplanar
  nameWithType: Trigonometry.ArePointsCoplanar
  fullName: GeometrySharp.Core.Trigonometry.ArePointsCoplanar
- uid: System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3}
  commentId: T:System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Vector3>
  nameWithType: IList<Vector3>
  fullName: System.Collections.Generic.IList<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: IList(Of Vector3)
  fullName.vb: System.Collections.Generic.IList(Of GeometrySharp.Geometry.Vector3)
  name.vb: IList(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: GeometrySharp.Core.Trigonometry.AreThreePointsCollinear*
  commentId: Overload:GeometrySharp.Core.Trigonometry.AreThreePointsCollinear
  name: AreThreePointsCollinear
  nameWithType: Trigonometry.AreThreePointsCollinear
  fullName: GeometrySharp.Core.Trigonometry.AreThreePointsCollinear
- uid: GeometrySharp.Geometry.Vector3
  commentId: T:GeometrySharp.Geometry.Vector3
  parent: GeometrySharp.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: GeometrySharp.Geometry.Vector3
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: GeometrySharp.Geometry
  commentId: N:GeometrySharp.Geometry
  name: GeometrySharp.Geometry
  nameWithType: GeometrySharp.Geometry
  fullName: GeometrySharp.Geometry
- uid: GeometrySharp.Core.Trigonometry.ClosestPointToSegment*
  commentId: Overload:GeometrySharp.Core.Trigonometry.ClosestPointToSegment
  name: ClosestPointToSegment
  nameWithType: Trigonometry.ClosestPointToSegment
  fullName: GeometrySharp.Core.Trigonometry.ClosestPointToSegment
- uid: System.ValueTuple{System.Double,GeometrySharp.Geometry.Vector3}
  commentId: T:System.ValueTuple{System.Double,GeometrySharp.Geometry.Vector3}
  parent: System
  isExternal: true
  name: ValueTuple<Double, Vector3>
  nameWithType: ValueTuple<Double, Vector3>
  fullName: System.ValueTuple<System.Double, GeometrySharp.Geometry.Vector3>
  nameWithType.vb: ValueTuple(Of Double, Vector3)
  fullName.vb: System.ValueTuple(Of System.Double, GeometrySharp.Geometry.Vector3)
  name.vb: ValueTuple(Of Double, Vector3)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
