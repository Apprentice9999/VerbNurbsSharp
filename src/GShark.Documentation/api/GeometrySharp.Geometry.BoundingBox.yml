### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Geometry.BoundingBox
  commentId: T:GeometrySharp.Geometry.BoundingBox
  id: BoundingBox
  parent: GeometrySharp.Geometry
  children:
  - GeometrySharp.Geometry.BoundingBox.#ctor(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.BoundingBox.#ctor(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  - GeometrySharp.Geometry.BoundingBox.AreOverlapping(GeometrySharp.Geometry.BoundingBox,GeometrySharp.Geometry.BoundingBox,System.Double)
  - GeometrySharp.Geometry.BoundingBox.Contains(GeometrySharp.Geometry.Vector3,System.Boolean)
  - GeometrySharp.Geometry.BoundingBox.GetAxisLength(System.Int32)
  - GeometrySharp.Geometry.BoundingBox.GetLongestAxis
  - GeometrySharp.Geometry.BoundingBox.Intersect(GeometrySharp.Geometry.BoundingBox)
  - GeometrySharp.Geometry.BoundingBox.Intersect(GeometrySharp.Geometry.BoundingBox,GeometrySharp.Geometry.BoundingBox)
  - GeometrySharp.Geometry.BoundingBox.IsValid
  - GeometrySharp.Geometry.BoundingBox.MakeItValid
  - GeometrySharp.Geometry.BoundingBox.Max
  - GeometrySharp.Geometry.BoundingBox.Min
  - GeometrySharp.Geometry.BoundingBox.ToString
  - GeometrySharp.Geometry.BoundingBox.Union(GeometrySharp.Geometry.BoundingBox)
  - GeometrySharp.Geometry.BoundingBox.Union(GeometrySharp.Geometry.BoundingBox,GeometrySharp.Geometry.BoundingBox)
  - GeometrySharp.Geometry.BoundingBox.Unset
  langs:
  - csharp
  - vb
  name: BoundingBox
  nameWithType: BoundingBox
  fullName: GeometrySharp.Geometry.BoundingBox
  type: Class
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: BoundingBox
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 12
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nRepresents the value of two points in a bounding box\ndefined by the two extreme corner points.\n"
  example: []
  syntax:
    content: public class BoundingBox
    content.vb: Public Class BoundingBox
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Geometry.BoundingBox.#ctor(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.BoundingBox.#ctor(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  id: '#ctor(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)'
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: BoundingBox(Vector3, Vector3)
  nameWithType: BoundingBox.BoundingBox(Vector3, Vector3)
  fullName: GeometrySharp.Geometry.BoundingBox.BoundingBox(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3)
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 19
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nConstructs a new bounding box from two corner points.\n"
  example: []
  syntax:
    content: public BoundingBox(Vector3 min, Vector3 max)
    parameters:
    - id: min
      type: GeometrySharp.Geometry.Vector3
      description: Point containing all the minimum coordinates.
    - id: max
      type: GeometrySharp.Geometry.Vector3
      description: Point containing all the maximum coordinates.
    content.vb: Public Sub New(min As Vector3, max As Vector3)
  overload: GeometrySharp.Geometry.BoundingBox.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.BoundingBox.#ctor(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  commentId: M:GeometrySharp.Geometry.BoundingBox.#ctor(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  id: '#ctor(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})'
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: BoundingBox(IList<Vector3>)
  nameWithType: BoundingBox.BoundingBox(IList<Vector3>)
  fullName: GeometrySharp.Geometry.BoundingBox.BoundingBox(System.Collections.Generic.IList<GeometrySharp.Geometry.Vector3>)
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 29
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nConstructs a BoundingBox from a list of points.\n"
  example: []
  syntax:
    content: public BoundingBox(IList<Vector3> pts)
    parameters:
    - id: pts
      type: System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3}
      description: Collection of points will be contained in the BoundingBox.
    content.vb: Public Sub New(pts As IList(Of Vector3))
  overload: GeometrySharp.Geometry.BoundingBox.#ctor*
  nameWithType.vb: BoundingBox.BoundingBox(IList(Of Vector3))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GeometrySharp.Geometry.BoundingBox.BoundingBox(System.Collections.Generic.IList(Of GeometrySharp.Geometry.Vector3))
  name.vb: BoundingBox(IList(Of Vector3))
- uid: GeometrySharp.Geometry.BoundingBox.Min
  commentId: P:GeometrySharp.Geometry.BoundingBox.Min
  id: Min
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: Min
  nameWithType: BoundingBox.Min
  fullName: GeometrySharp.Geometry.BoundingBox.Min
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Min
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 53
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  syntax:
    content: public Vector3 Min { get; }
    parameters: []
    return:
      type: GeometrySharp.Geometry.Vector3
    content.vb: Public ReadOnly Property Min As Vector3
  overload: GeometrySharp.Geometry.BoundingBox.Min*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.BoundingBox.Max
  commentId: P:GeometrySharp.Geometry.BoundingBox.Max
  id: Max
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: Max
  nameWithType: BoundingBox.Max
  fullName: GeometrySharp.Geometry.BoundingBox.Max
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Max
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 58
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nThe maximum point of the BoundingBox. The coordinates of this point are always >= min.\n"
  example: []
  syntax:
    content: public Vector3 Max { get; }
    parameters: []
    return:
      type: GeometrySharp.Geometry.Vector3
    content.vb: Public ReadOnly Property Max As Vector3
  overload: GeometrySharp.Geometry.BoundingBox.Max*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.BoundingBox.Unset
  commentId: P:GeometrySharp.Geometry.BoundingBox.Unset
  id: Unset
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: Unset
  nameWithType: BoundingBox.Unset
  fullName: GeometrySharp.Geometry.BoundingBox.Unset
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Unset
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 63
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets a BoundingBox that has Unset coordinates for Min and Max.\n"
  example: []
  syntax:
    content: public static BoundingBox Unset { get; }
    parameters: []
    return:
      type: GeometrySharp.Geometry.BoundingBox
    content.vb: Public Shared ReadOnly Property Unset As BoundingBox
  overload: GeometrySharp.Geometry.BoundingBox.Unset*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: GeometrySharp.Geometry.BoundingBox.IsValid
  commentId: P:GeometrySharp.Geometry.BoundingBox.IsValid
  id: IsValid
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: BoundingBox.IsValid
  fullName: GeometrySharp.Geometry.BoundingBox.IsValid
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: IsValid
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 68
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets if the BoundingBox is valid.\n"
  example: []
  syntax:
    content: public bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsValid As Boolean
  overload: GeometrySharp.Geometry.BoundingBox.IsValid*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.BoundingBox.GetAxisLength(System.Int32)
  commentId: M:GeometrySharp.Geometry.BoundingBox.GetAxisLength(System.Int32)
  id: GetAxisLength(System.Int32)
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: GetAxisLength(Int32)
  nameWithType: BoundingBox.GetAxisLength(Int32)
  fullName: GeometrySharp.Geometry.BoundingBox.GetAxisLength(System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: GetAxisLength
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 77
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets length of given axis.\n"
  example: []
  syntax:
    content: public double GetAxisLength(int i)
    parameters:
    - id: i
      type: System.Int32
      description: Index of axis to inspect (between 0 and 2)
    return:
      type: System.Double
      description: Return the value length of the axis.
    content.vb: Public Function GetAxisLength(i As Integer) As Double
  overload: GeometrySharp.Geometry.BoundingBox.GetAxisLength*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.BoundingBox.GetLongestAxis
  commentId: M:GeometrySharp.Geometry.BoundingBox.GetLongestAxis
  id: GetLongestAxis
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: GetLongestAxis()
  nameWithType: BoundingBox.GetLongestAxis()
  fullName: GeometrySharp.Geometry.BoundingBox.GetLongestAxis()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: GetLongestAxis
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 88
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets longest axis of bounding box.\nValue 0 = X, 1 = Y, 2 = Z.\n"
  example: []
  syntax:
    content: public int GetLongestAxis()
    return:
      type: System.Int32
      description: Return the value of the longest axis of BoundingBox.
    content.vb: Public Function GetLongestAxis As Integer
  overload: GeometrySharp.Geometry.BoundingBox.GetLongestAxis*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.BoundingBox.AreOverlapping(GeometrySharp.Geometry.BoundingBox,GeometrySharp.Geometry.BoundingBox,System.Double)
  commentId: M:GeometrySharp.Geometry.BoundingBox.AreOverlapping(GeometrySharp.Geometry.BoundingBox,GeometrySharp.Geometry.BoundingBox,System.Double)
  id: AreOverlapping(GeometrySharp.Geometry.BoundingBox,GeometrySharp.Geometry.BoundingBox,System.Double)
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: AreOverlapping(BoundingBox, BoundingBox, Double)
  nameWithType: BoundingBox.AreOverlapping(BoundingBox, BoundingBox, Double)
  fullName: GeometrySharp.Geometry.BoundingBox.AreOverlapping(GeometrySharp.Geometry.BoundingBox, GeometrySharp.Geometry.BoundingBox, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: AreOverlapping
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 114
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nDetermines if two BoundingBoxes overlapping.\n"
  example: []
  syntax:
    content: public static bool AreOverlapping(BoundingBox bBox1, BoundingBox bBox2, double tol)
    parameters:
    - id: bBox1
      type: GeometrySharp.Geometry.BoundingBox
      description: First BoundingBox
    - id: bBox2
      type: GeometrySharp.Geometry.BoundingBox
      description: Second BoundingBox
    - id: tol
      type: System.Double
      description: Tolerance
    return:
      type: System.Boolean
      description: Return true if the BoundingBoxes are overlapping.
    content.vb: Public Shared Function AreOverlapping(bBox1 As BoundingBox, bBox2 As BoundingBox, tol As Double) As Boolean
  overload: GeometrySharp.Geometry.BoundingBox.AreOverlapping*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.BoundingBox.Contains(GeometrySharp.Geometry.Vector3,System.Boolean)
  commentId: M:GeometrySharp.Geometry.BoundingBox.Contains(GeometrySharp.Geometry.Vector3,System.Boolean)
  id: Contains(GeometrySharp.Geometry.Vector3,System.Boolean)
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: Contains(Vector3, Boolean)
  nameWithType: BoundingBox.Contains(Vector3, Boolean)
  fullName: GeometrySharp.Geometry.BoundingBox.Contains(GeometrySharp.Geometry.Vector3, System.Boolean)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Contains
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 143
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nTests a point for BoundingBox inclusion.\n"
  example: []
  syntax:
    content: public bool Contains(Vector3 pt, bool strict)
    parameters:
    - id: pt
      type: GeometrySharp.Geometry.Vector3
      description: Vector3 to test
    - id: strict
      type: System.Boolean
      description: "\nIf true, the point needs to be fully on the inside of the BoundingBox. I.e. coincident points will\nbe considered &apos;outside&apos;.\n"
    return:
      type: System.Boolean
      description: Return true if the point is contained in the BoundingBox.
    content.vb: Public Function Contains(pt As Vector3, strict As Boolean) As Boolean
  overload: GeometrySharp.Geometry.BoundingBox.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.BoundingBox.Intersect(GeometrySharp.Geometry.BoundingBox)
  commentId: M:GeometrySharp.Geometry.BoundingBox.Intersect(GeometrySharp.Geometry.BoundingBox)
  id: Intersect(GeometrySharp.Geometry.BoundingBox)
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: Intersect(BoundingBox)
  nameWithType: BoundingBox.Intersect(BoundingBox)
  fullName: GeometrySharp.Geometry.BoundingBox.Intersect(GeometrySharp.Geometry.BoundingBox)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Intersect
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 169
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nComputes the intersection of two bounding boxes.\nIf one of the two boundary is not valid, or the two BoundingBoxes do not intersect return an unset bounding box.\n"
  example: []
  syntax:
    content: public BoundingBox Intersect(BoundingBox other)
    parameters:
    - id: other
      type: GeometrySharp.Geometry.BoundingBox
      description: BoundingBox to intersect with
    return:
      type: GeometrySharp.Geometry.BoundingBox
      description: Return the BoundingBox intersection between the two BoundingBox.
    content.vb: Public Function Intersect(other As BoundingBox) As BoundingBox
  overload: GeometrySharp.Geometry.BoundingBox.Intersect*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.BoundingBox.Intersect(GeometrySharp.Geometry.BoundingBox,GeometrySharp.Geometry.BoundingBox)
  commentId: M:GeometrySharp.Geometry.BoundingBox.Intersect(GeometrySharp.Geometry.BoundingBox,GeometrySharp.Geometry.BoundingBox)
  id: Intersect(GeometrySharp.Geometry.BoundingBox,GeometrySharp.Geometry.BoundingBox)
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: Intersect(BoundingBox, BoundingBox)
  nameWithType: BoundingBox.Intersect(BoundingBox, BoundingBox)
  fullName: GeometrySharp.Geometry.BoundingBox.Intersect(GeometrySharp.Geometry.BoundingBox, GeometrySharp.Geometry.BoundingBox)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Intersect
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 181
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nComputes the intersection of two bounding boxes.\nIf one of the two boundary is not valid, or the two BoundingBoxes do not intersect return an unset bounding box.\n"
  example: []
  syntax:
    content: public static BoundingBox Intersect(BoundingBox bBox1, BoundingBox bBox2)
    parameters:
    - id: bBox1
      type: GeometrySharp.Geometry.BoundingBox
      description: First BoundingBox
    - id: bBox2
      type: GeometrySharp.Geometry.BoundingBox
      description: Second BoundingBox
    return:
      type: GeometrySharp.Geometry.BoundingBox
      description: Return the BoundingBox intersection between the two BoundingBox.
    content.vb: Public Shared Function Intersect(bBox1 As BoundingBox, bBox2 As BoundingBox) As BoundingBox
  overload: GeometrySharp.Geometry.BoundingBox.Intersect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.BoundingBox.Union(GeometrySharp.Geometry.BoundingBox)
  commentId: M:GeometrySharp.Geometry.BoundingBox.Union(GeometrySharp.Geometry.BoundingBox)
  id: Union(GeometrySharp.Geometry.BoundingBox)
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: Union(BoundingBox)
  nameWithType: BoundingBox.Union(BoundingBox)
  fullName: GeometrySharp.Geometry.BoundingBox.Union(GeometrySharp.Geometry.BoundingBox)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Union
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 204
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCompute the boolean union of this with another BoundingBox\n"
  example: []
  syntax:
    content: public BoundingBox Union(BoundingBox other)
    parameters:
    - id: other
      type: GeometrySharp.Geometry.BoundingBox
      description: BoundingBox to union with
    return:
      type: GeometrySharp.Geometry.BoundingBox
      description: Return the BoundingBox union between the two BoundingBox
    content.vb: Public Function Union(other As BoundingBox) As BoundingBox
  overload: GeometrySharp.Geometry.BoundingBox.Union*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.BoundingBox.Union(GeometrySharp.Geometry.BoundingBox,GeometrySharp.Geometry.BoundingBox)
  commentId: M:GeometrySharp.Geometry.BoundingBox.Union(GeometrySharp.Geometry.BoundingBox,GeometrySharp.Geometry.BoundingBox)
  id: Union(GeometrySharp.Geometry.BoundingBox,GeometrySharp.Geometry.BoundingBox)
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: Union(BoundingBox, BoundingBox)
  nameWithType: BoundingBox.Union(BoundingBox, BoundingBox)
  fullName: GeometrySharp.Geometry.BoundingBox.Union(GeometrySharp.Geometry.BoundingBox, GeometrySharp.Geometry.BoundingBox)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Union
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 215
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCompute the boolean union between two BoundingBoxes.\n"
  example: []
  syntax:
    content: public static BoundingBox Union(BoundingBox bBox1, BoundingBox bBox2)
    parameters:
    - id: bBox1
      type: GeometrySharp.Geometry.BoundingBox
      description: First BoundingBox
    - id: bBox2
      type: GeometrySharp.Geometry.BoundingBox
      description: Second BoundingBox
    return:
      type: GeometrySharp.Geometry.BoundingBox
      description: Return the BoundingBox union between the two BoundingBox
    content.vb: Public Shared Function Union(bBox1 As BoundingBox, bBox2 As BoundingBox) As BoundingBox
  overload: GeometrySharp.Geometry.BoundingBox.Union*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Geometry.BoundingBox.MakeItValid
  commentId: M:GeometrySharp.Geometry.BoundingBox.MakeItValid
  id: MakeItValid
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: MakeItValid()
  nameWithType: BoundingBox.MakeItValid()
  fullName: GeometrySharp.Geometry.BoundingBox.MakeItValid()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: MakeItValid
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 238
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nEnsures that the box is defined in an increasing fashion.\nIf the Min or Max points are unset, this function will return a BoundingBox unset.\n"
  example: []
  syntax:
    content: public BoundingBox MakeItValid()
    return:
      type: GeometrySharp.Geometry.BoundingBox
      description: A BoundingBox made valid.
    content.vb: Public Function MakeItValid As BoundingBox
  overload: GeometrySharp.Geometry.BoundingBox.MakeItValid*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.BoundingBox.ToString
  commentId: M:GeometrySharp.Geometry.BoundingBox.ToString
  id: ToString
  parent: GeometrySharp.Geometry.BoundingBox
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BoundingBox.ToString()
  fullName: GeometrySharp.Geometry.BoundingBox.ToString()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/BoundingBox.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ToString
    path: ../GeometrySharp/Geometry/BoundingBox.cs
    startLine: 261
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nConstructs the string representation of this aligned bounding box.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: GeometrySharp.Geometry.BoundingBox.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: GeometrySharp.Geometry
  commentId: N:GeometrySharp.Geometry
  name: GeometrySharp.Geometry
  nameWithType: GeometrySharp.Geometry
  fullName: GeometrySharp.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GeometrySharp.Geometry.BoundingBox.#ctor*
  commentId: Overload:GeometrySharp.Geometry.BoundingBox.#ctor
  name: BoundingBox
  nameWithType: BoundingBox.BoundingBox
  fullName: GeometrySharp.Geometry.BoundingBox.BoundingBox
- uid: GeometrySharp.Geometry.Vector3
  commentId: T:GeometrySharp.Geometry.Vector3
  parent: GeometrySharp.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: GeometrySharp.Geometry.Vector3
- uid: System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3}
  commentId: T:System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Vector3>
  nameWithType: IList<Vector3>
  fullName: System.Collections.Generic.IList<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: IList(Of Vector3)
  fullName.vb: System.Collections.Generic.IList(Of GeometrySharp.Geometry.Vector3)
  name.vb: IList(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: GeometrySharp.Geometry.BoundingBox.Min*
  commentId: Overload:GeometrySharp.Geometry.BoundingBox.Min
  name: Min
  nameWithType: BoundingBox.Min
  fullName: GeometrySharp.Geometry.BoundingBox.Min
- uid: GeometrySharp.Geometry.BoundingBox.Max*
  commentId: Overload:GeometrySharp.Geometry.BoundingBox.Max
  name: Max
  nameWithType: BoundingBox.Max
  fullName: GeometrySharp.Geometry.BoundingBox.Max
- uid: GeometrySharp.Geometry.BoundingBox.Unset*
  commentId: Overload:GeometrySharp.Geometry.BoundingBox.Unset
  name: Unset
  nameWithType: BoundingBox.Unset
  fullName: GeometrySharp.Geometry.BoundingBox.Unset
- uid: GeometrySharp.Geometry.BoundingBox
  commentId: T:GeometrySharp.Geometry.BoundingBox
  parent: GeometrySharp.Geometry
  name: BoundingBox
  nameWithType: BoundingBox
  fullName: GeometrySharp.Geometry.BoundingBox
- uid: GeometrySharp.Geometry.BoundingBox.IsValid*
  commentId: Overload:GeometrySharp.Geometry.BoundingBox.IsValid
  name: IsValid
  nameWithType: BoundingBox.IsValid
  fullName: GeometrySharp.Geometry.BoundingBox.IsValid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: GeometrySharp.Geometry.BoundingBox.GetAxisLength*
  commentId: Overload:GeometrySharp.Geometry.BoundingBox.GetAxisLength
  name: GetAxisLength
  nameWithType: BoundingBox.GetAxisLength
  fullName: GeometrySharp.Geometry.BoundingBox.GetAxisLength
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: GeometrySharp.Geometry.BoundingBox.GetLongestAxis*
  commentId: Overload:GeometrySharp.Geometry.BoundingBox.GetLongestAxis
  name: GetLongestAxis
  nameWithType: BoundingBox.GetLongestAxis
  fullName: GeometrySharp.Geometry.BoundingBox.GetLongestAxis
- uid: GeometrySharp.Geometry.BoundingBox.AreOverlapping*
  commentId: Overload:GeometrySharp.Geometry.BoundingBox.AreOverlapping
  name: AreOverlapping
  nameWithType: BoundingBox.AreOverlapping
  fullName: GeometrySharp.Geometry.BoundingBox.AreOverlapping
- uid: GeometrySharp.Geometry.BoundingBox.Contains*
  commentId: Overload:GeometrySharp.Geometry.BoundingBox.Contains
  name: Contains
  nameWithType: BoundingBox.Contains
  fullName: GeometrySharp.Geometry.BoundingBox.Contains
- uid: GeometrySharp.Geometry.BoundingBox.Intersect*
  commentId: Overload:GeometrySharp.Geometry.BoundingBox.Intersect
  name: Intersect
  nameWithType: BoundingBox.Intersect
  fullName: GeometrySharp.Geometry.BoundingBox.Intersect
- uid: GeometrySharp.Geometry.BoundingBox.Union*
  commentId: Overload:GeometrySharp.Geometry.BoundingBox.Union
  name: Union
  nameWithType: BoundingBox.Union
  fullName: GeometrySharp.Geometry.BoundingBox.Union
- uid: GeometrySharp.Geometry.BoundingBox.MakeItValid*
  commentId: Overload:GeometrySharp.Geometry.BoundingBox.MakeItValid
  name: MakeItValid
  nameWithType: BoundingBox.MakeItValid
  fullName: GeometrySharp.Geometry.BoundingBox.MakeItValid
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.BoundingBox.ToString*
  commentId: Overload:GeometrySharp.Geometry.BoundingBox.ToString
  name: ToString
  nameWithType: BoundingBox.ToString
  fullName: GeometrySharp.Geometry.BoundingBox.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
