### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Operation.Intersect
  commentId: T:GeometrySharp.Operation.Intersect
  id: Intersect
  parent: GeometrySharp.Operation
  children:
  - GeometrySharp.Operation.Intersect.CurveCurve(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.NurbsCurve,System.Double)
  - GeometrySharp.Operation.Intersect.CurveLine(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.Line)
  - GeometrySharp.Operation.Intersect.CurvePlane(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.Plane,System.Double)
  - GeometrySharp.Operation.Intersect.CurveSelf(GeometrySharp.Geometry.NurbsCurve,System.Double)
  - GeometrySharp.Operation.Intersect.LineCircle(GeometrySharp.Geometry.Circle,GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Vector3[]@)
  - GeometrySharp.Operation.Intersect.LineLine(GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Vector3@,GeometrySharp.Geometry.Vector3@,System.Double@,System.Double@)
  - GeometrySharp.Operation.Intersect.LinePlane(GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Vector3@,System.Double@)
  - GeometrySharp.Operation.Intersect.PlaneCircle(GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Circle,GeometrySharp.Geometry.Vector3[]@)
  - GeometrySharp.Operation.Intersect.PlanePlane(GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Line@)
  - GeometrySharp.Operation.Intersect.PolylinePlane(GeometrySharp.Geometry.Polyline,GeometrySharp.Geometry.Plane)
  langs:
  - csharp
  - vb
  name: Intersect
  nameWithType: Intersect
  fullName: GeometrySharp.Operation.Intersect
  type: Class
  source:
    remote:
      path: GeometrySharp/Operation/Intersect.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Intersect
    path: ../GeometrySharp/Operation/Intersect.cs
    startLine: 15
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nIntersection provides various tools for all kinds of intersection\n"
  example: []
  syntax:
    content: public class Intersect
    content.vb: Public Class Intersect
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Operation.Intersect.PlanePlane(GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Line@)
  commentId: M:GeometrySharp.Operation.Intersect.PlanePlane(GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Line@)
  id: PlanePlane(GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Line@)
  parent: GeometrySharp.Operation.Intersect
  langs:
  - csharp
  - vb
  name: PlanePlane(Plane, Plane, out Line)
  nameWithType: Intersect.PlanePlane(Plane, Plane, out Line)
  fullName: GeometrySharp.Operation.Intersect.PlanePlane(GeometrySharp.Geometry.Plane, GeometrySharp.Geometry.Plane, out GeometrySharp.Geometry.Line)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Intersect.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: PlanePlane
    path: ../GeometrySharp/Operation/Intersect.cs
    startLine: 31
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nSolves the intersection between two planes.\nThis method returns true if intersection is found, false if the\nplanes are parallel.\n"
  example: []
  syntax:
    content: public static bool PlanePlane(Plane p1, Plane p2, out Line line)
    parameters:
    - id: p1
      type: GeometrySharp.Geometry.Plane
      description: The first plane.
    - id: p2
      type: GeometrySharp.Geometry.Plane
      description: The second plane.
    - id: line
      type: GeometrySharp.Geometry.Line
      description: The intersection as <xref href="GeometrySharp.Geometry.Line" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: True if the intersection success.
    content.vb: Public Shared Function PlanePlane(p1 As Plane, p2 As Plane, ByRef line As Line) As Boolean
  overload: GeometrySharp.Operation.Intersect.PlanePlane*
  nameWithType.vb: Intersect.PlanePlane(Plane, Plane, ByRef Line)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Operation.Intersect.PlanePlane(GeometrySharp.Geometry.Plane, GeometrySharp.Geometry.Plane, ByRef GeometrySharp.Geometry.Line)
  name.vb: PlanePlane(Plane, Plane, ByRef Line)
- uid: GeometrySharp.Operation.Intersect.LinePlane(GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Vector3@,System.Double@)
  commentId: M:GeometrySharp.Operation.Intersect.LinePlane(GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Vector3@,System.Double@)
  id: LinePlane(GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Vector3@,System.Double@)
  parent: GeometrySharp.Operation.Intersect
  langs:
  - csharp
  - vb
  name: LinePlane(Line, Plane, out Vector3, out Double)
  nameWithType: Intersect.LinePlane(Line, Plane, out Vector3, out Double)
  fullName: GeometrySharp.Operation.Intersect.LinePlane(GeometrySharp.Geometry.Line, GeometrySharp.Geometry.Plane, out GeometrySharp.Geometry.Vector3, out System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Intersect.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: LinePlane
    path: ../GeometrySharp/Operation/Intersect.cs
    startLine: 122
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nFinds the unique point intersection of a line and a plane.\nThis method returns true if intersection return the unique point, it returns\nfalse if the segment is parallel to the plane or lies in plane.\nhttp://geomalgorithms.com/a05-_intersect-1.html\n"
  example: []
  syntax:
    content: public static bool LinePlane(Line line, Plane plane, out Vector3 pt, out double t)
    parameters:
    - id: line
      type: GeometrySharp.Geometry.Line
      description: The segment to intersect. Assumed as infinite.
    - id: plane
      type: GeometrySharp.Geometry.Plane
      description: The plane has to be intersected.
    - id: pt
      type: GeometrySharp.Geometry.Vector3
      description: The point representing the unique intersection.
    - id: t
      type: System.Double
      description: The parameter on the line between 0.0 to 1.0
    return:
      type: System.Boolean
      description: True if the intersection success.
    content.vb: Public Shared Function LinePlane(line As Line, plane As Plane, ByRef pt As Vector3, ByRef t As Double) As Boolean
  overload: GeometrySharp.Operation.Intersect.LinePlane*
  nameWithType.vb: Intersect.LinePlane(Line, Plane, ByRef Vector3, ByRef Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Operation.Intersect.LinePlane(GeometrySharp.Geometry.Line, GeometrySharp.Geometry.Plane, ByRef GeometrySharp.Geometry.Vector3, ByRef System.Double)
  name.vb: LinePlane(Line, Plane, ByRef Vector3, ByRef Double)
- uid: GeometrySharp.Operation.Intersect.LineLine(GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Vector3@,GeometrySharp.Geometry.Vector3@,System.Double@,System.Double@)
  commentId: M:GeometrySharp.Operation.Intersect.LineLine(GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Vector3@,GeometrySharp.Geometry.Vector3@,System.Double@,System.Double@)
  id: LineLine(GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Vector3@,GeometrySharp.Geometry.Vector3@,System.Double@,System.Double@)
  parent: GeometrySharp.Operation.Intersect
  langs:
  - csharp
  - vb
  name: LineLine(Line, Line, out Vector3, out Vector3, out Double, out Double)
  nameWithType: Intersect.LineLine(Line, Line, out Vector3, out Vector3, out Double, out Double)
  fullName: GeometrySharp.Operation.Intersect.LineLine(GeometrySharp.Geometry.Line, GeometrySharp.Geometry.Line, out GeometrySharp.Geometry.Vector3, out GeometrySharp.Geometry.Vector3, out System.Double, out System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Intersect.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: LineLine
    path: ../GeometrySharp/Operation/Intersect.cs
    startLine: 159
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nSolves the intersection between two lines, assumed as infinite.\nReturns as outputs two points describing the minimum distance between the two lines.\nReturns false if the segments are parallel.\nhttp://geomalgorithms.com/a07-_distance.html\n"
  example: []
  syntax:
    content: public static bool LineLine(Line ln0, Line ln1, out Vector3 pt0, out Vector3 pt1, out double t0, out double t1)
    parameters:
    - id: ln0
      type: GeometrySharp.Geometry.Line
      description: The first line.
    - id: ln1
      type: GeometrySharp.Geometry.Line
      description: The second line.
    - id: pt0
      type: GeometrySharp.Geometry.Vector3
      description: The output point of the first line.
    - id: pt1
      type: GeometrySharp.Geometry.Vector3
      description: The output point of the second line.
    - id: t0
      type: System.Double
      description: The parameter on the first line between 0.0 to 1.0
    - id: t1
      type: System.Double
      description: The parameter on the second line between 0.0 to 1.0
    return:
      type: System.Boolean
      description: True if the intersection succeed.
    content.vb: Public Shared Function LineLine(ln0 As Line, ln1 As Line, ByRef pt0 As Vector3, ByRef pt1 As Vector3, ByRef t0 As Double, ByRef t1 As Double) As Boolean
  overload: GeometrySharp.Operation.Intersect.LineLine*
  nameWithType.vb: Intersect.LineLine(Line, Line, ByRef Vector3, ByRef Vector3, ByRef Double, ByRef Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Operation.Intersect.LineLine(GeometrySharp.Geometry.Line, GeometrySharp.Geometry.Line, ByRef GeometrySharp.Geometry.Vector3, ByRef GeometrySharp.Geometry.Vector3, ByRef System.Double, ByRef System.Double)
  name.vb: LineLine(Line, Line, ByRef Vector3, ByRef Vector3, ByRef Double, ByRef Double)
- uid: GeometrySharp.Operation.Intersect.PolylinePlane(GeometrySharp.Geometry.Polyline,GeometrySharp.Geometry.Plane)
  commentId: M:GeometrySharp.Operation.Intersect.PolylinePlane(GeometrySharp.Geometry.Polyline,GeometrySharp.Geometry.Plane)
  id: PolylinePlane(GeometrySharp.Geometry.Polyline,GeometrySharp.Geometry.Plane)
  parent: GeometrySharp.Operation.Intersect
  langs:
  - csharp
  - vb
  name: PolylinePlane(Polyline, Plane)
  nameWithType: Intersect.PolylinePlane(Polyline, Plane)
  fullName: GeometrySharp.Operation.Intersect.PolylinePlane(GeometrySharp.Geometry.Polyline, GeometrySharp.Geometry.Plane)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Intersect.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: PolylinePlane
    path: ../GeometrySharp/Operation/Intersect.cs
    startLine: 201
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nComputes the intersection between a polyline and a plane.\nUnder the hood, is intersecting each segment with the plane and storing the intersection point into a collection.\nIf no intersections are found a empty collection is returned.\n"
  example: []
  syntax:
    content: public static List<Vector3> PolylinePlane(Polyline poly, Plane pl)
    parameters:
    - id: poly
      type: GeometrySharp.Geometry.Polyline
      description: The polyline to intersect with.
    - id: pl
      type: GeometrySharp.Geometry.Plane
      description: The section plane.
    return:
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
      description: A collection of the unique intersection points.
    content.vb: Public Shared Function PolylinePlane(poly As Polyline, pl As Plane) As List(Of Vector3)
  overload: GeometrySharp.Operation.Intersect.PolylinePlane*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Intersect.LineCircle(GeometrySharp.Geometry.Circle,GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Vector3[]@)
  commentId: M:GeometrySharp.Operation.Intersect.LineCircle(GeometrySharp.Geometry.Circle,GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Vector3[]@)
  id: LineCircle(GeometrySharp.Geometry.Circle,GeometrySharp.Geometry.Line,GeometrySharp.Geometry.Vector3[]@)
  parent: GeometrySharp.Operation.Intersect
  langs:
  - csharp
  - vb
  name: LineCircle(Circle, Line, out Vector3[])
  nameWithType: Intersect.LineCircle(Circle, Line, out Vector3[])
  fullName: GeometrySharp.Operation.Intersect.LineCircle(GeometrySharp.Geometry.Circle, GeometrySharp.Geometry.Line, out GeometrySharp.Geometry.Vector3[])
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Intersect.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: LineCircle
    path: ../GeometrySharp/Operation/Intersect.cs
    startLine: 232
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nComputes the intersection between a circle and a line.\nIf the intersection is computed the result points can be 1 or 2 depending on whether the line touches the circle tangentially or cuts through it.\nThe intersection result false if the line misses the circle entirely.\nhttp://csharphelper.com/blog/2014/09/determine-where-a-line-intersects-a-circle-in-c/\n"
  example: []
  syntax:
    content: public static bool LineCircle(Circle cl, Line ln, out Vector3[] pts)
    parameters:
    - id: cl
      type: GeometrySharp.Geometry.Circle
      description: The circle for intersection.
    - id: ln
      type: GeometrySharp.Geometry.Line
      description: The line for intersection.
    - id: pts
      type: GeometrySharp.Geometry.Vector3[]
      description: Output the intersection points.
    return:
      type: System.Boolean
      description: True if intersection is computed.
    content.vb: Public Shared Function LineCircle(cl As Circle, ln As Line, ByRef pts As Vector3()) As Boolean
  overload: GeometrySharp.Operation.Intersect.LineCircle*
  nameWithType.vb: Intersect.LineCircle(Circle, Line, ByRef Vector3())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Operation.Intersect.LineCircle(GeometrySharp.Geometry.Circle, GeometrySharp.Geometry.Line, ByRef GeometrySharp.Geometry.Vector3())
  name.vb: LineCircle(Circle, Line, ByRef Vector3())
- uid: GeometrySharp.Operation.Intersect.PlaneCircle(GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Circle,GeometrySharp.Geometry.Vector3[]@)
  commentId: M:GeometrySharp.Operation.Intersect.PlaneCircle(GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Circle,GeometrySharp.Geometry.Vector3[]@)
  id: PlaneCircle(GeometrySharp.Geometry.Plane,GeometrySharp.Geometry.Circle,GeometrySharp.Geometry.Vector3[]@)
  parent: GeometrySharp.Operation.Intersect
  langs:
  - csharp
  - vb
  name: PlaneCircle(Plane, Circle, out Vector3[])
  nameWithType: Intersect.PlaneCircle(Plane, Circle, out Vector3[])
  fullName: GeometrySharp.Operation.Intersect.PlaneCircle(GeometrySharp.Geometry.Plane, GeometrySharp.Geometry.Circle, out GeometrySharp.Geometry.Vector3[])
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Intersect.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: PlaneCircle
    path: ../GeometrySharp/Operation/Intersect.cs
    startLine: 278
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nComputes the intersection between a plane and a circle.\nIf the intersection is computed the result points can be 1 or 2 depending on whether the plane touches the circle tangentially or cuts through it.\nThe intersection result false if the plane is parallel to the circle or misses the circle entirely.\n"
  example: []
  syntax:
    content: public static bool PlaneCircle(Plane pl, Circle cl, out Vector3[] pts)
    parameters:
    - id: pl
      type: GeometrySharp.Geometry.Plane
      description: The plane for intersection.
    - id: cl
      type: GeometrySharp.Geometry.Circle
      description: The circle for intersection.
    - id: pts
      type: GeometrySharp.Geometry.Vector3[]
      description: Output the intersection points.
    return:
      type: System.Boolean
      description: True if intersection is computed.
    content.vb: Public Shared Function PlaneCircle(pl As Plane, cl As Circle, ByRef pts As Vector3()) As Boolean
  overload: GeometrySharp.Operation.Intersect.PlaneCircle*
  nameWithType.vb: Intersect.PlaneCircle(Plane, Circle, ByRef Vector3())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Operation.Intersect.PlaneCircle(GeometrySharp.Geometry.Plane, GeometrySharp.Geometry.Circle, ByRef GeometrySharp.Geometry.Vector3())
  name.vb: PlaneCircle(Plane, Circle, ByRef Vector3())
- uid: GeometrySharp.Operation.Intersect.CurveLine(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.Line)
  commentId: M:GeometrySharp.Operation.Intersect.CurveLine(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.Line)
  id: CurveLine(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.Line)
  parent: GeometrySharp.Operation.Intersect
  langs:
  - csharp
  - vb
  name: CurveLine(NurbsCurve, Line)
  nameWithType: Intersect.CurveLine(NurbsCurve, Line)
  fullName: GeometrySharp.Operation.Intersect.CurveLine(GeometrySharp.Geometry.NurbsCurve, GeometrySharp.Geometry.Line)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Intersect.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: CurveLine
    path: ../GeometrySharp/Operation/Intersect.cs
    startLine: 309
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nComputes the intersection between a curve and a line.\n"
  example: []
  syntax:
    content: public static List<CurvesIntersectionResult> CurveLine(NurbsCurve crv, Line l)
    parameters:
    - id: crv
      type: GeometrySharp.Geometry.NurbsCurve
      description: The curve to intersect.
    - id: l
      type: GeometrySharp.Geometry.Line
      description: The line to intersect with.
    return:
      type: System.Collections.Generic.List{GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult}
      description: A collection of <xref href="GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function CurveLine(crv As NurbsCurve, l As Line) As List(Of CurvesIntersectionResult)
  overload: GeometrySharp.Operation.Intersect.CurveLine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Intersect.CurveCurve(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.NurbsCurve,System.Double)
  commentId: M:GeometrySharp.Operation.Intersect.CurveCurve(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.NurbsCurve,System.Double)
  id: CurveCurve(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.NurbsCurve,System.Double)
  parent: GeometrySharp.Operation.Intersect
  langs:
  - csharp
  - vb
  name: CurveCurve(NurbsCurve, NurbsCurve, Double)
  nameWithType: Intersect.CurveCurve(NurbsCurve, NurbsCurve, Double)
  fullName: GeometrySharp.Operation.Intersect.CurveCurve(GeometrySharp.Geometry.NurbsCurve, GeometrySharp.Geometry.NurbsCurve, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Intersect.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: CurveCurve
    path: ../GeometrySharp/Operation/Intersect.cs
    startLine: 321
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nComputes the intersection between two curves.\n"
  example: []
  syntax:
    content: public static List<CurvesIntersectionResult> CurveCurve(NurbsCurve crv1, NurbsCurve crv2, double tolerance = 1E-06)
    parameters:
    - id: crv1
      type: GeometrySharp.Geometry.NurbsCurve
      description: First curve to intersect.
    - id: crv2
      type: GeometrySharp.Geometry.NurbsCurve
      description: Second curve to intersect.
    - id: tolerance
      type: System.Double
      description: Tolerance set per default at 1e-6.
    return:
      type: System.Collections.Generic.List{GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult}
      description: If intersection found a collection of <xref href="GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult" data-throw-if-not-resolved="false"></xref> otherwise the result will be empty.
    content.vb: Public Shared Function CurveCurve(crv1 As NurbsCurve, crv2 As NurbsCurve, tolerance As Double = 1E-06) As List(Of CurvesIntersectionResult)
  overload: GeometrySharp.Operation.Intersect.CurveCurve*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Intersect.CurvePlane(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.Plane,System.Double)
  commentId: M:GeometrySharp.Operation.Intersect.CurvePlane(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.Plane,System.Double)
  id: CurvePlane(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.Plane,System.Double)
  parent: GeometrySharp.Operation.Intersect
  langs:
  - csharp
  - vb
  name: CurvePlane(NurbsCurve, Plane, Double)
  nameWithType: Intersect.CurvePlane(NurbsCurve, Plane, Double)
  fullName: GeometrySharp.Operation.Intersect.CurvePlane(GeometrySharp.Geometry.NurbsCurve, GeometrySharp.Geometry.Plane, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Intersect.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: CurvePlane
    path: ../GeometrySharp/Operation/Intersect.cs
    startLine: 340
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nComputes the intersection between a curve and a plane.\nhttps://www.parametriczoo.com/index.php/2020/03/31/plane-and-curve-intersection/\n"
  example: []
  syntax:
    content: public static List<CurvePlaneIntersectionResult> CurvePlane(NurbsCurve crv, Plane pl, double tolerance = 1E-06)
    parameters:
    - id: crv
      type: GeometrySharp.Geometry.NurbsCurve
      description: The curve to intersect.
    - id: pl
      type: GeometrySharp.Geometry.Plane
      description: The plane to intersect with the curve.
    - id: tolerance
      type: System.Double
      description: Tolerance set per default at 1e-6.
    return:
      type: System.Collections.Generic.List{GeometrySharp.Core.IntersectionResults.CurvePlaneIntersectionResult}
      description: If intersection found a collection of <xref href="GeometrySharp.Core.IntersectionResults.CurvePlaneIntersectionResult" data-throw-if-not-resolved="false"></xref> otherwise the result will be empty.
    content.vb: Public Shared Function CurvePlane(crv As NurbsCurve, pl As Plane, tolerance As Double = 1E-06) As List(Of CurvePlaneIntersectionResult)
  overload: GeometrySharp.Operation.Intersect.CurvePlane*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Intersect.CurveSelf(GeometrySharp.Geometry.NurbsCurve,System.Double)
  commentId: M:GeometrySharp.Operation.Intersect.CurveSelf(GeometrySharp.Geometry.NurbsCurve,System.Double)
  id: CurveSelf(GeometrySharp.Geometry.NurbsCurve,System.Double)
  parent: GeometrySharp.Operation.Intersect
  langs:
  - csharp
  - vb
  name: CurveSelf(NurbsCurve, Double)
  nameWithType: Intersect.CurveSelf(NurbsCurve, Double)
  fullName: GeometrySharp.Operation.Intersect.CurveSelf(GeometrySharp.Geometry.NurbsCurve, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Intersect.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: CurveSelf
    path: ../GeometrySharp/Operation/Intersect.cs
    startLine: 355
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nComputes the self intersections of a curve.\n"
  example: []
  syntax:
    content: public static List<CurvesIntersectionResult> CurveSelf(NurbsCurve crv, double tolerance = 1E-06)
    parameters:
    - id: crv
      type: GeometrySharp.Geometry.NurbsCurve
      description: The curve for self-intersections.
    - id: tolerance
      type: System.Double
      description: Tolerance set per default at 1e-6.
    return:
      type: System.Collections.Generic.List{GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult}
      description: If intersection found a collection of <xref href="GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult" data-throw-if-not-resolved="false"></xref> otherwise the result will be empty.
    content.vb: Public Shared Function CurveSelf(crv As NurbsCurve, tolerance As Double = 1E-06) As List(Of CurvesIntersectionResult)
  overload: GeometrySharp.Operation.Intersect.CurveSelf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: GeometrySharp.Operation
  commentId: N:GeometrySharp.Operation
  name: GeometrySharp.Operation
  nameWithType: GeometrySharp.Operation
  fullName: GeometrySharp.Operation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GeometrySharp.Geometry.Line
  commentId: T:GeometrySharp.Geometry.Line
  parent: GeometrySharp.Geometry
  name: Line
  nameWithType: Line
  fullName: GeometrySharp.Geometry.Line
- uid: GeometrySharp.Operation.Intersect.PlanePlane*
  commentId: Overload:GeometrySharp.Operation.Intersect.PlanePlane
  name: PlanePlane
  nameWithType: Intersect.PlanePlane
  fullName: GeometrySharp.Operation.Intersect.PlanePlane
- uid: GeometrySharp.Geometry.Plane
  commentId: T:GeometrySharp.Geometry.Plane
  parent: GeometrySharp.Geometry
  name: Plane
  nameWithType: Plane
  fullName: GeometrySharp.Geometry.Plane
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: GeometrySharp.Geometry
  commentId: N:GeometrySharp.Geometry
  name: GeometrySharp.Geometry
  nameWithType: GeometrySharp.Geometry
  fullName: GeometrySharp.Geometry
- uid: GeometrySharp.Operation.Intersect.LinePlane*
  commentId: Overload:GeometrySharp.Operation.Intersect.LinePlane
  name: LinePlane
  nameWithType: Intersect.LinePlane
  fullName: GeometrySharp.Operation.Intersect.LinePlane
- uid: GeometrySharp.Geometry.Vector3
  commentId: T:GeometrySharp.Geometry.Vector3
  parent: GeometrySharp.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: GeometrySharp.Geometry.Vector3
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: GeometrySharp.Operation.Intersect.LineLine*
  commentId: Overload:GeometrySharp.Operation.Intersect.LineLine
  name: LineLine
  nameWithType: Intersect.LineLine
  fullName: GeometrySharp.Operation.Intersect.LineLine
- uid: GeometrySharp.Operation.Intersect.PolylinePlane*
  commentId: Overload:GeometrySharp.Operation.Intersect.PolylinePlane
  name: PolylinePlane
  nameWithType: Intersect.PolylinePlane
  fullName: GeometrySharp.Operation.Intersect.PolylinePlane
- uid: GeometrySharp.Geometry.Polyline
  commentId: T:GeometrySharp.Geometry.Polyline
  parent: GeometrySharp.Geometry
  name: Polyline
  nameWithType: Polyline
  fullName: GeometrySharp.Geometry.Polyline
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  commentId: T:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector3>
  nameWithType: List<Vector3>
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: List(Of Vector3)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3)
  name.vb: List(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: GeometrySharp.Operation.Intersect.LineCircle*
  commentId: Overload:GeometrySharp.Operation.Intersect.LineCircle
  name: LineCircle
  nameWithType: Intersect.LineCircle
  fullName: GeometrySharp.Operation.Intersect.LineCircle
- uid: GeometrySharp.Geometry.Circle
  commentId: T:GeometrySharp.Geometry.Circle
  parent: GeometrySharp.Geometry
  name: Circle
  nameWithType: Circle
  fullName: GeometrySharp.Geometry.Circle
- uid: GeometrySharp.Geometry.Vector3[]
  isExternal: true
  name: Vector3[]
  nameWithType: Vector3[]
  fullName: GeometrySharp.Geometry.Vector3[]
  nameWithType.vb: Vector3()
  fullName.vb: GeometrySharp.Geometry.Vector3()
  name.vb: Vector3()
  spec.csharp:
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: GeometrySharp.Operation.Intersect.PlaneCircle*
  commentId: Overload:GeometrySharp.Operation.Intersect.PlaneCircle
  name: PlaneCircle
  nameWithType: Intersect.PlaneCircle
  fullName: GeometrySharp.Operation.Intersect.PlaneCircle
- uid: GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult
  commentId: T:GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult
  name: CurvesIntersectionResult
  nameWithType: CurvesIntersectionResult
  fullName: GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult
- uid: GeometrySharp.Operation.Intersect.CurveLine*
  commentId: Overload:GeometrySharp.Operation.Intersect.CurveLine
  name: CurveLine
  nameWithType: Intersect.CurveLine
  fullName: GeometrySharp.Operation.Intersect.CurveLine
- uid: GeometrySharp.Geometry.NurbsCurve
  commentId: T:GeometrySharp.Geometry.NurbsCurve
  parent: GeometrySharp.Geometry
  name: NurbsCurve
  nameWithType: NurbsCurve
  fullName: GeometrySharp.Geometry.NurbsCurve
- uid: System.Collections.Generic.List{GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult}
  commentId: T:System.Collections.Generic.List{GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<CurvesIntersectionResult>
  nameWithType: List<CurvesIntersectionResult>
  fullName: System.Collections.Generic.List<GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult>
  nameWithType.vb: List(Of CurvesIntersectionResult)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult)
  name.vb: List(Of CurvesIntersectionResult)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult
    name: CurvesIntersectionResult
    nameWithType: CurvesIntersectionResult
    fullName: GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult
    name: CurvesIntersectionResult
    nameWithType: CurvesIntersectionResult
    fullName: GeometrySharp.Core.IntersectionResults.CurvesIntersectionResult
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Operation.Intersect.CurveCurve*
  commentId: Overload:GeometrySharp.Operation.Intersect.CurveCurve
  name: CurveCurve
  nameWithType: Intersect.CurveCurve
  fullName: GeometrySharp.Operation.Intersect.CurveCurve
- uid: GeometrySharp.Core.IntersectionResults.CurvePlaneIntersectionResult
  commentId: T:GeometrySharp.Core.IntersectionResults.CurvePlaneIntersectionResult
  name: CurvePlaneIntersectionResult
  nameWithType: CurvePlaneIntersectionResult
  fullName: GeometrySharp.Core.IntersectionResults.CurvePlaneIntersectionResult
- uid: GeometrySharp.Operation.Intersect.CurvePlane*
  commentId: Overload:GeometrySharp.Operation.Intersect.CurvePlane
  name: CurvePlane
  nameWithType: Intersect.CurvePlane
  fullName: GeometrySharp.Operation.Intersect.CurvePlane
- uid: System.Collections.Generic.List{GeometrySharp.Core.IntersectionResults.CurvePlaneIntersectionResult}
  commentId: T:System.Collections.Generic.List{GeometrySharp.Core.IntersectionResults.CurvePlaneIntersectionResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<CurvePlaneIntersectionResult>
  nameWithType: List<CurvePlaneIntersectionResult>
  fullName: System.Collections.Generic.List<GeometrySharp.Core.IntersectionResults.CurvePlaneIntersectionResult>
  nameWithType.vb: List(Of CurvePlaneIntersectionResult)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Core.IntersectionResults.CurvePlaneIntersectionResult)
  name.vb: List(Of CurvePlaneIntersectionResult)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Core.IntersectionResults.CurvePlaneIntersectionResult
    name: CurvePlaneIntersectionResult
    nameWithType: CurvePlaneIntersectionResult
    fullName: GeometrySharp.Core.IntersectionResults.CurvePlaneIntersectionResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Core.IntersectionResults.CurvePlaneIntersectionResult
    name: CurvePlaneIntersectionResult
    nameWithType: CurvePlaneIntersectionResult
    fullName: GeometrySharp.Core.IntersectionResults.CurvePlaneIntersectionResult
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Operation.Intersect.CurveSelf*
  commentId: Overload:GeometrySharp.Operation.Intersect.CurveSelf
  name: CurveSelf
  nameWithType: Intersect.CurveSelf
  fullName: GeometrySharp.Operation.Intersect.CurveSelf
