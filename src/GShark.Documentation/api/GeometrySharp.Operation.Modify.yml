### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Operation.Modify
  commentId: T:GeometrySharp.Operation.Modify
  id: Modify
  parent: GeometrySharp.Operation
  children:
  - GeometrySharp.Operation.Modify.CurveKnotRefine(GeometrySharp.Geometry.NurbsCurve,System.Collections.Generic.List{System.Double})
  - GeometrySharp.Operation.Modify.DecomposeCurveIntoBeziers(GeometrySharp.Geometry.NurbsCurve)
  - GeometrySharp.Operation.Modify.RationalCurveTransform(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Core.Matrix)
  - GeometrySharp.Operation.Modify.ReverseCurve(GeometrySharp.Geometry.NurbsCurve)
  - GeometrySharp.Operation.Modify.SurfaceKnotRefine(GeometrySharp.Geometry.NurbsSurface,GeometrySharp.Core.Knot,System.Boolean)
  langs:
  - csharp
  - vb
  name: Modify
  nameWithType: Modify
  fullName: GeometrySharp.Operation.Modify
  type: Class
  source:
    remote:
      path: GeometrySharp/Operation/Modify.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Modify
    path: ../GeometrySharp/Operation/Modify.cs
    startLine: 14
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  syntax:
    content: public class Modify
    content.vb: Public Class Modify
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Operation.Modify.CurveKnotRefine(GeometrySharp.Geometry.NurbsCurve,System.Collections.Generic.List{System.Double})
  commentId: M:GeometrySharp.Operation.Modify.CurveKnotRefine(GeometrySharp.Geometry.NurbsCurve,System.Collections.Generic.List{System.Double})
  id: CurveKnotRefine(GeometrySharp.Geometry.NurbsCurve,System.Collections.Generic.List{System.Double})
  parent: GeometrySharp.Operation.Modify
  langs:
  - csharp
  - vb
  name: CurveKnotRefine(NurbsCurve, List<Double>)
  nameWithType: Modify.CurveKnotRefine(NurbsCurve, List<Double>)
  fullName: GeometrySharp.Operation.Modify.CurveKnotRefine(GeometrySharp.Geometry.NurbsCurve, System.Collections.Generic.List<System.Double>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Modify.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: CurveKnotRefine
    path: ../GeometrySharp/Operation/Modify.cs
    startLine: 23
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  syntax:
    content: public static NurbsCurve CurveKnotRefine(NurbsCurve curve, List<double> knotsToInsert)
    parameters:
    - id: curve
      type: GeometrySharp.Geometry.NurbsCurve
    - id: knotsToInsert
      type: System.Collections.Generic.List{System.Double}
    return:
      type: GeometrySharp.Geometry.NurbsCurve
    content.vb: Public Shared Function CurveKnotRefine(curve As NurbsCurve, knotsToInsert As List(Of Double)) As NurbsCurve
  overload: GeometrySharp.Operation.Modify.CurveKnotRefine*
  nameWithType.vb: Modify.CurveKnotRefine(NurbsCurve, List(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Operation.Modify.CurveKnotRefine(GeometrySharp.Geometry.NurbsCurve, System.Collections.Generic.List(Of System.Double))
  name.vb: CurveKnotRefine(NurbsCurve, List(Of Double))
- uid: GeometrySharp.Operation.Modify.DecomposeCurveIntoBeziers(GeometrySharp.Geometry.NurbsCurve)
  commentId: M:GeometrySharp.Operation.Modify.DecomposeCurveIntoBeziers(GeometrySharp.Geometry.NurbsCurve)
  id: DecomposeCurveIntoBeziers(GeometrySharp.Geometry.NurbsCurve)
  parent: GeometrySharp.Operation.Modify
  langs:
  - csharp
  - vb
  name: DecomposeCurveIntoBeziers(NurbsCurve)
  nameWithType: Modify.DecomposeCurveIntoBeziers(NurbsCurve)
  fullName: GeometrySharp.Operation.Modify.DecomposeCurveIntoBeziers(GeometrySharp.Geometry.NurbsCurve)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Modify.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: DecomposeCurveIntoBeziers
    path: ../GeometrySharp/Operation/Modify.cs
    startLine: 98
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  syntax:
    content: public static List<NurbsCurve> DecomposeCurveIntoBeziers(NurbsCurve curve)
    parameters:
    - id: curve
      type: GeometrySharp.Geometry.NurbsCurve
    return:
      type: System.Collections.Generic.List{GeometrySharp.Geometry.NurbsCurve}
    content.vb: Public Shared Function DecomposeCurveIntoBeziers(curve As NurbsCurve) As List(Of NurbsCurve)
  overload: GeometrySharp.Operation.Modify.DecomposeCurveIntoBeziers*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Modify.RationalCurveTransform(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Core.Matrix)
  commentId: M:GeometrySharp.Operation.Modify.RationalCurveTransform(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Core.Matrix)
  id: RationalCurveTransform(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Core.Matrix)
  parent: GeometrySharp.Operation.Modify
  langs:
  - csharp
  - vb
  name: RationalCurveTransform(NurbsCurve, Matrix)
  nameWithType: Modify.RationalCurveTransform(NurbsCurve, Matrix)
  fullName: GeometrySharp.Operation.Modify.RationalCurveTransform(GeometrySharp.Geometry.NurbsCurve, GeometrySharp.Core.Matrix)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Modify.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: RationalCurveTransform
    path: ../GeometrySharp/Operation/Modify.cs
    startLine: 145
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nTransform a NurbsCurve using a matrix.\n"
  example: []
  syntax:
    content: public static NurbsCurve RationalCurveTransform(NurbsCurve curve, Matrix mat)
    parameters:
    - id: curve
      type: GeometrySharp.Geometry.NurbsCurve
      description: The curve to transform.
    - id: mat
      type: GeometrySharp.Core.Matrix
      description: The matrix to use for the transform - the dimensions should be the dimension of the curve + 1 in both directions.
    return:
      type: GeometrySharp.Geometry.NurbsCurve
      description: A new NurbsCurve after transformation.
    content.vb: Public Shared Function RationalCurveTransform(curve As NurbsCurve, mat As Matrix) As NurbsCurve
  overload: GeometrySharp.Operation.Modify.RationalCurveTransform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Modify.ReverseCurve(GeometrySharp.Geometry.NurbsCurve)
  commentId: M:GeometrySharp.Operation.Modify.ReverseCurve(GeometrySharp.Geometry.NurbsCurve)
  id: ReverseCurve(GeometrySharp.Geometry.NurbsCurve)
  parent: GeometrySharp.Operation.Modify
  langs:
  - csharp
  - vb
  name: ReverseCurve(NurbsCurve)
  nameWithType: Modify.ReverseCurve(NurbsCurve)
  fullName: GeometrySharp.Operation.Modify.ReverseCurve(GeometrySharp.Geometry.NurbsCurve)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Modify.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ReverseCurve
    path: ../GeometrySharp/Operation/Modify.cs
    startLine: 163
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nReverses the parametrization of a NurbsCurve. The domain is unaffected.\n"
  example: []
  syntax:
    content: public static NurbsCurve ReverseCurve(NurbsCurve curve)
    parameters:
    - id: curve
      type: GeometrySharp.Geometry.NurbsCurve
      description: The NurbsCurve has to be reversed.
    return:
      type: GeometrySharp.Geometry.NurbsCurve
      description: A NurbsCurve with a reversed parametrization.
    content.vb: Public Shared Function ReverseCurve(curve As NurbsCurve) As NurbsCurve
  overload: GeometrySharp.Operation.Modify.ReverseCurve*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Modify.SurfaceKnotRefine(GeometrySharp.Geometry.NurbsSurface,GeometrySharp.Core.Knot,System.Boolean)
  commentId: M:GeometrySharp.Operation.Modify.SurfaceKnotRefine(GeometrySharp.Geometry.NurbsSurface,GeometrySharp.Core.Knot,System.Boolean)
  id: SurfaceKnotRefine(GeometrySharp.Geometry.NurbsSurface,GeometrySharp.Core.Knot,System.Boolean)
  parent: GeometrySharp.Operation.Modify
  langs:
  - csharp
  - vb
  name: SurfaceKnotRefine(NurbsSurface, Knot, Boolean)
  nameWithType: Modify.SurfaceKnotRefine(NurbsSurface, Knot, Boolean)
  fullName: GeometrySharp.Operation.Modify.SurfaceKnotRefine(GeometrySharp.Geometry.NurbsSurface, GeometrySharp.Core.Knot, System.Boolean)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Modify.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: SurfaceKnotRefine
    path: ../GeometrySharp/Operation/Modify.cs
    startLine: 183
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nPerform knot refinement on a NURBS surface by inserting knots at various parameters\n"
  example: []
  syntax:
    content: public static NurbsSurface SurfaceKnotRefine(NurbsSurface nurbsSurface, Knot knotsToInsert, bool useU = true)
    parameters:
    - id: nurbsSurface
      type: GeometrySharp.Geometry.NurbsSurface
      description: The surface to insert the knots into
    - id: knotsToInsert
      type: GeometrySharp.Core.Knot
    - id: useU
      type: System.Boolean
      description: Whether to insert in the U direction or V direction of the surface. U is default
    return:
      type: GeometrySharp.Geometry.NurbsSurface
      description: ''
    content.vb: Public Shared Function SurfaceKnotRefine(nurbsSurface As NurbsSurface, knotsToInsert As Knot, useU As Boolean = True) As NurbsSurface
  overload: GeometrySharp.Operation.Modify.SurfaceKnotRefine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: GeometrySharp.Operation
  commentId: N:GeometrySharp.Operation
  name: GeometrySharp.Operation
  nameWithType: GeometrySharp.Operation
  fullName: GeometrySharp.Operation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GeometrySharp.Operation.Modify.CurveKnotRefine*
  commentId: Overload:GeometrySharp.Operation.Modify.CurveKnotRefine
  name: CurveKnotRefine
  nameWithType: Modify.CurveKnotRefine
  fullName: GeometrySharp.Operation.Modify.CurveKnotRefine
- uid: GeometrySharp.Geometry.NurbsCurve
  commentId: T:GeometrySharp.Geometry.NurbsCurve
  parent: GeometrySharp.Geometry
  name: NurbsCurve
  nameWithType: NurbsCurve
  fullName: GeometrySharp.Geometry.NurbsCurve
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double>
  nameWithType: List<Double>
  fullName: System.Collections.Generic.List<System.Double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry
  commentId: N:GeometrySharp.Geometry
  name: GeometrySharp.Geometry
  nameWithType: GeometrySharp.Geometry
  fullName: GeometrySharp.Geometry
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: GeometrySharp.Operation.Modify.DecomposeCurveIntoBeziers*
  commentId: Overload:GeometrySharp.Operation.Modify.DecomposeCurveIntoBeziers
  name: DecomposeCurveIntoBeziers
  nameWithType: Modify.DecomposeCurveIntoBeziers
  fullName: GeometrySharp.Operation.Modify.DecomposeCurveIntoBeziers
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.NurbsCurve}
  commentId: T:System.Collections.Generic.List{GeometrySharp.Geometry.NurbsCurve}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<NurbsCurve>
  nameWithType: List<NurbsCurve>
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.NurbsCurve>
  nameWithType.vb: List(Of NurbsCurve)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.NurbsCurve)
  name.vb: List(Of NurbsCurve)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.NurbsCurve
    name: NurbsCurve
    nameWithType: NurbsCurve
    fullName: GeometrySharp.Geometry.NurbsCurve
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.NurbsCurve
    name: NurbsCurve
    nameWithType: NurbsCurve
    fullName: GeometrySharp.Geometry.NurbsCurve
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Operation.Modify.RationalCurveTransform*
  commentId: Overload:GeometrySharp.Operation.Modify.RationalCurveTransform
  name: RationalCurveTransform
  nameWithType: Modify.RationalCurveTransform
  fullName: GeometrySharp.Operation.Modify.RationalCurveTransform
- uid: GeometrySharp.Core.Matrix
  commentId: T:GeometrySharp.Core.Matrix
  parent: GeometrySharp.Core
  name: Matrix
  nameWithType: Matrix
  fullName: GeometrySharp.Core.Matrix
- uid: GeometrySharp.Core
  commentId: N:GeometrySharp.Core
  name: GeometrySharp.Core
  nameWithType: GeometrySharp.Core
  fullName: GeometrySharp.Core
- uid: GeometrySharp.Operation.Modify.ReverseCurve*
  commentId: Overload:GeometrySharp.Operation.Modify.ReverseCurve
  name: ReverseCurve
  nameWithType: Modify.ReverseCurve
  fullName: GeometrySharp.Operation.Modify.ReverseCurve
- uid: GeometrySharp.Operation.Modify.SurfaceKnotRefine*
  commentId: Overload:GeometrySharp.Operation.Modify.SurfaceKnotRefine
  name: SurfaceKnotRefine
  nameWithType: Modify.SurfaceKnotRefine
  fullName: GeometrySharp.Operation.Modify.SurfaceKnotRefine
- uid: GeometrySharp.Geometry.NurbsSurface
  commentId: T:GeometrySharp.Geometry.NurbsSurface
  parent: GeometrySharp.Geometry
  name: NurbsSurface
  nameWithType: NurbsSurface
  fullName: GeometrySharp.Geometry.NurbsSurface
- uid: GeometrySharp.Core.Knot
  commentId: T:GeometrySharp.Core.Knot
  parent: GeometrySharp.Core
  name: Knot
  nameWithType: Knot
  fullName: GeometrySharp.Core.Knot
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
