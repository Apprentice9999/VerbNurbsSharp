### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Operation.Tessellation
  commentId: T:GeometrySharp.Operation.Tessellation
  id: Tessellation
  parent: GeometrySharp.Operation
  children:
  - GeometrySharp.Operation.Tessellation.AdaptiveSample(GeometrySharp.Geometry.NurbsCurve,System.Double)
  - GeometrySharp.Operation.Tessellation.AdaptiveSampleRange(GeometrySharp.Geometry.NurbsCurve,System.Double,System.Double,System.Double)
  - GeometrySharp.Operation.Tessellation.RegularSample(GeometrySharp.Geometry.NurbsCurve,System.Int32)
  langs:
  - csharp
  - vb
  name: Tessellation
  nameWithType: Tessellation
  fullName: GeometrySharp.Operation.Tessellation
  type: Class
  source:
    remote:
      path: GeometrySharp/Operation/Tessellation.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Tessellation
    path: ../GeometrySharp/Operation/Tessellation.cs
    startLine: 17
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nTessellation contains static, immutable algorithms for tessellation of NURBS curves and sufaces. Tessellation is the decomposition\nof the analytical NURBS representation into discrete meshes or polylines that are useful for drawing.\nSome of these algorithms are &quot;adaptive&quot; - using certain heuristics to sample geometry where such samples make sense - while\nothers are &quot;regular&quot; in that they sample regularly throughout a parametric domain.There are tradeoffs here.While\nadaptive algorithms can sometimes yield &quot;better&quot; results that are smaller or more economical, this can sometimes come at\nincreased computational cost.For example, it is sometimes necessarily to compute higher order derivatives in order to\nobtain these more economical results.Your usage of these algorithms should consider these tradeoffs.\n"
  example: []
  syntax:
    content: public class Tessellation
    content.vb: Public Class Tessellation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Operation.Tessellation.RegularSample(GeometrySharp.Geometry.NurbsCurve,System.Int32)
  commentId: M:GeometrySharp.Operation.Tessellation.RegularSample(GeometrySharp.Geometry.NurbsCurve,System.Int32)
  id: RegularSample(GeometrySharp.Geometry.NurbsCurve,System.Int32)
  parent: GeometrySharp.Operation.Tessellation
  langs:
  - csharp
  - vb
  name: RegularSample(NurbsCurve, Int32)
  nameWithType: Tessellation.RegularSample(NurbsCurve, Int32)
  fullName: GeometrySharp.Operation.Tessellation.RegularSample(GeometrySharp.Geometry.NurbsCurve, System.Int32)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Tessellation.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: RegularSample
    path: ../GeometrySharp/Operation/Tessellation.cs
    startLine: 25
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nSample a NURBS curve at equally spaced parametric intervals.\n"
  example: []
  syntax:
    content: public static (List<double> tvalues, List<Vector3> pts) RegularSample(NurbsCurve curve, int numSamples)
    parameters:
    - id: curve
      type: GeometrySharp.Geometry.NurbsCurve
      description: NurbsCurve object.
    - id: numSamples
      type: System.Int32
      description: Number of samples.
    return:
      type: System.ValueTuple{System.Collections.Generic.List{System.Double},System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
      description: Return a tuple with the set of points and the t parameter where the point was evaluated.
    content.vb: Public Shared Function RegularSample(curve As NurbsCurve, numSamples As Integer) As(tvalues As List(Of Double), pts As List(Of Vector3))
  overload: GeometrySharp.Operation.Tessellation.RegularSample*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Tessellation.AdaptiveSample(GeometrySharp.Geometry.NurbsCurve,System.Double)
  commentId: M:GeometrySharp.Operation.Tessellation.AdaptiveSample(GeometrySharp.Geometry.NurbsCurve,System.Double)
  id: AdaptiveSample(GeometrySharp.Geometry.NurbsCurve,System.Double)
  parent: GeometrySharp.Operation.Tessellation
  langs:
  - csharp
  - vb
  name: AdaptiveSample(NurbsCurve, Double)
  nameWithType: Tessellation.AdaptiveSample(NurbsCurve, Double)
  fullName: GeometrySharp.Operation.Tessellation.AdaptiveSample(GeometrySharp.Geometry.NurbsCurve, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Tessellation.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: AdaptiveSample
    path: ../GeometrySharp/Operation/Tessellation.cs
    startLine: 56
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nSample a curve in an adaptive way.\nCorresponds to this algorithm http://ariel.chronotext.org/dd/defigueiredo93adaptive.pdf\n"
  example: []
  syntax:
    content: public static (List<double> tValues, List<Vector3> pts) AdaptiveSample(NurbsCurve curve, double tolerance)
    parameters:
    - id: curve
      type: GeometrySharp.Geometry.NurbsCurve
      description: NurbsCurve object.
    - id: tolerance
      type: System.Double
      description: Tolerance for the adaptive scheme.
    return:
      type: System.ValueTuple{System.Collections.Generic.List{System.Double},System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
      description: Return a tuple with the set of points and the t parameter where the point was evaluated.
    content.vb: Public Shared Function AdaptiveSample(curve As NurbsCurve, tolerance As Double) As(tValues As List(Of Double), pts As List(Of Vector3))
  overload: GeometrySharp.Operation.Tessellation.AdaptiveSample*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Tessellation.AdaptiveSampleRange(GeometrySharp.Geometry.NurbsCurve,System.Double,System.Double,System.Double)
  commentId: M:GeometrySharp.Operation.Tessellation.AdaptiveSampleRange(GeometrySharp.Geometry.NurbsCurve,System.Double,System.Double,System.Double)
  id: AdaptiveSampleRange(GeometrySharp.Geometry.NurbsCurve,System.Double,System.Double,System.Double)
  parent: GeometrySharp.Operation.Tessellation
  langs:
  - csharp
  - vb
  name: AdaptiveSampleRange(NurbsCurve, Double, Double, Double)
  nameWithType: Tessellation.AdaptiveSampleRange(NurbsCurve, Double, Double, Double)
  fullName: GeometrySharp.Operation.Tessellation.AdaptiveSampleRange(GeometrySharp.Geometry.NurbsCurve, System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Tessellation.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: AdaptiveSampleRange
    path: ../GeometrySharp/Operation/Tessellation.cs
    startLine: 86
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  syntax:
    content: public static (List<double> tValues, List<Vector3> pts) AdaptiveSampleRange(NurbsCurve curve, double start, double end, double tolerance)
    parameters:
    - id: curve
      type: GeometrySharp.Geometry.NurbsCurve
    - id: start
      type: System.Double
    - id: end
      type: System.Double
    - id: tolerance
      type: System.Double
    return:
      type: System.ValueTuple{System.Collections.Generic.List{System.Double},System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
    content.vb: Public Shared Function AdaptiveSampleRange(curve As NurbsCurve, start As Double, end As Double, tolerance As Double) As(tValues As List(Of Double), pts As List(Of Vector3))
  overload: GeometrySharp.Operation.Tessellation.AdaptiveSampleRange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: GeometrySharp.Operation
  commentId: N:GeometrySharp.Operation
  name: GeometrySharp.Operation
  nameWithType: GeometrySharp.Operation
  fullName: GeometrySharp.Operation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GeometrySharp.Operation.Tessellation.RegularSample*
  commentId: Overload:GeometrySharp.Operation.Tessellation.RegularSample
  name: RegularSample
  nameWithType: Tessellation.RegularSample
  fullName: GeometrySharp.Operation.Tessellation.RegularSample
- uid: GeometrySharp.Geometry.NurbsCurve
  commentId: T:GeometrySharp.Geometry.NurbsCurve
  parent: GeometrySharp.Geometry
  name: NurbsCurve
  nameWithType: NurbsCurve
  fullName: GeometrySharp.Geometry.NurbsCurve
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueTuple{System.Collections.Generic.List{System.Double},System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
  commentId: T:System.ValueTuple{System.Collections.Generic.List{System.Double},System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}}
  parent: System
  isExternal: true
  name: ValueTuple<List<Double>, List<Vector3>>
  nameWithType: ValueTuple<List<Double>, List<Vector3>>
  fullName: System.ValueTuple<System.Collections.Generic.List<System.Double>, System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>>
  nameWithType.vb: ValueTuple(Of List(Of Double), List(Of Vector3))
  fullName.vb: System.ValueTuple(Of System.Collections.Generic.List(Of System.Double), System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3))
  name.vb: ValueTuple(Of List(Of Double), List(Of Vector3))
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry
  commentId: N:GeometrySharp.Geometry
  name: GeometrySharp.Geometry
  nameWithType: GeometrySharp.Geometry
  fullName: GeometrySharp.Geometry
- uid: GeometrySharp.Operation.Tessellation.AdaptiveSample*
  commentId: Overload:GeometrySharp.Operation.Tessellation.AdaptiveSample
  name: AdaptiveSample
  nameWithType: Tessellation.AdaptiveSample
  fullName: GeometrySharp.Operation.Tessellation.AdaptiveSample
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: GeometrySharp.Operation.Tessellation.AdaptiveSampleRange*
  commentId: Overload:GeometrySharp.Operation.Tessellation.AdaptiveSampleRange
  name: AdaptiveSampleRange
  nameWithType: Tessellation.AdaptiveSampleRange
  fullName: GeometrySharp.Operation.Tessellation.AdaptiveSampleRange
