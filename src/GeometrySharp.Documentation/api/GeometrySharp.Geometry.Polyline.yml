### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Geometry.Polyline
  commentId: T:GeometrySharp.Geometry.Polyline
  id: Polyline
  parent: GeometrySharp.Geometry
  children:
  - GeometrySharp.Geometry.Polyline.#ctor
  - GeometrySharp.Geometry.Polyline.#ctor(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  - GeometrySharp.Geometry.Polyline.BoundingBox
  - GeometrySharp.Geometry.Polyline.CleanVerticesForShortLength(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  - GeometrySharp.Geometry.Polyline.ClosestPt(GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Geometry.Polyline.Length
  - GeometrySharp.Geometry.Polyline.PointAt(System.Double,GeometrySharp.Geometry.Vector3@)
  - GeometrySharp.Geometry.Polyline.Reverse
  - GeometrySharp.Geometry.Polyline.Segments
  - GeometrySharp.Geometry.Polyline.ToNurbsCurve
  - GeometrySharp.Geometry.Polyline.ToString
  - GeometrySharp.Geometry.Polyline.Transform(GeometrySharp.Core.Transform)
  langs:
  - csharp
  - vb
  name: Polyline
  nameWithType: Polyline
  fullName: GeometrySharp.Geometry.Polyline
  type: Class
  source:
    remote:
      path: GeometrySharp/Geometry/Polyline.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Polyline
    path: ../GeometrySharp/Geometry/Polyline.cs
    startLine: 11
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nA simple data structure representing a polyline.\nPolylineData is useful, for example, as the result of a curve tessellation.\n"
  example: []
  syntax:
    content: 'public class Polyline : List<Vector3>, IList<Vector3>, ICollection<Vector3>, IReadOnlyList<Vector3>, IReadOnlyCollection<Vector3>, IEnumerable<Vector3>, IList, ICollection, IEnumerable'
    content.vb: >-
      Public Class Polyline

          Inherits List(Of Vector3)

          Implements IList(Of Vector3), ICollection(Of Vector3), IReadOnlyList(Of Vector3), IReadOnlyCollection(Of Vector3), IEnumerable(Of Vector3), IList, ICollection, IEnumerable
  inheritance:
  - System.Object
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  derivedClasses:
  - GeometrySharp.Geometry.Polygon
  implements:
  - System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3}
  - System.Collections.Generic.ICollection{GeometrySharp.Geometry.Vector3}
  - System.Collections.Generic.IReadOnlyList{GeometrySharp.Geometry.Vector3}
  - System.Collections.Generic.IReadOnlyCollection{GeometrySharp.Geometry.Vector3}
  - System.Collections.Generic.IEnumerable{GeometrySharp.Geometry.Vector3}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#get_Item(System.Int32)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#set_Item(System.Int32,System.Object)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Add(GeometrySharp.Geometry.Vector3)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.AddRange(System.Collections.Generic.IEnumerable{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.AsReadOnly
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.BinarySearch(System.Int32,System.Int32,GeometrySharp.Geometry.Vector3,System.Collections.Generic.IComparer{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.BinarySearch(GeometrySharp.Geometry.Vector3)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.BinarySearch(GeometrySharp.Geometry.Vector3,System.Collections.Generic.IComparer{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Clear
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Contains(GeometrySharp.Geometry.Vector3)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.ConvertAll``1(System.Converter{GeometrySharp.Geometry.Vector3,{TOutput}})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.CopyTo(System.Int32,GeometrySharp.Geometry.Vector3[],System.Int32,System.Int32)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.CopyTo(GeometrySharp.Geometry.Vector3[])
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.CopyTo(GeometrySharp.Geometry.Vector3[],System.Int32)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Exists(System.Predicate{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Find(System.Predicate{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindAll(System.Predicate{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindIndex(System.Int32,System.Int32,System.Predicate{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindIndex(System.Int32,System.Predicate{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindIndex(System.Predicate{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindLast(System.Predicate{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindLastIndex(System.Int32,System.Int32,System.Predicate{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindLastIndex(System.Int32,System.Predicate{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindLastIndex(System.Predicate{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.ForEach(System.Action{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.GetEnumerator
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.IndexOf(GeometrySharp.Geometry.Vector3)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.IndexOf(GeometrySharp.Geometry.Vector3,System.Int32)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.IndexOf(GeometrySharp.Geometry.Vector3,System.Int32,System.Int32)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Insert(System.Int32,GeometrySharp.Geometry.Vector3)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.LastIndexOf(GeometrySharp.Geometry.Vector3)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.LastIndexOf(GeometrySharp.Geometry.Vector3,System.Int32)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.LastIndexOf(GeometrySharp.Geometry.Vector3,System.Int32,System.Int32)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Remove(GeometrySharp.Geometry.Vector3)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.RemoveAll(System.Predicate{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.RemoveAt(System.Int32)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Sort
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Sort(System.Collections.Generic.IComparer{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Sort(System.Comparison{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Remove(System.Object)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.ToArray
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.TrimExcess
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.TrueForAll(System.Predicate{GeometrySharp.Geometry.Vector3})
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Capacity
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Count
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Item(System.Int32)
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Item(System.Int32)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Collections.Generic.IEnumerable{GeometrySharp.Geometry.Vector3}.GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Func{GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Boolean})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Geometry.Polyline.#ctor
  commentId: M:GeometrySharp.Geometry.Polyline.#ctor
  id: '#ctor'
  parent: GeometrySharp.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Polyline()
  nameWithType: Polyline.Polyline()
  fullName: GeometrySharp.Geometry.Polyline.Polyline()
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/Polyline.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/Polyline.cs
    startLine: 16
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nInitializes a new empty polyline.\n"
  example: []
  syntax:
    content: public Polyline()
    content.vb: Public Sub New
  overload: GeometrySharp.Geometry.Polyline.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Polyline.#ctor(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  commentId: M:GeometrySharp.Geometry.Polyline.#ctor(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  id: '#ctor(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})'
  parent: GeometrySharp.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Polyline(IList<Vector3>)
  nameWithType: Polyline.Polyline(IList<Vector3>)
  fullName: GeometrySharp.Geometry.Polyline.Polyline(System.Collections.Generic.IList<GeometrySharp.Geometry.Vector3>)
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Geometry/Polyline.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Geometry/Polyline.cs
    startLine: 24
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nInitializes a new polyline from a collection of points.\n"
  example: []
  syntax:
    content: public Polyline(IList<Vector3> vertices)
    parameters:
    - id: vertices
      type: System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3}
      description: Points used to create the polyline.
    content.vb: Public Sub New(vertices As IList(Of Vector3))
  overload: GeometrySharp.Geometry.Polyline.#ctor*
  nameWithType.vb: Polyline.Polyline(IList(Of Vector3))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GeometrySharp.Geometry.Polyline.Polyline(System.Collections.Generic.IList(Of GeometrySharp.Geometry.Vector3))
  name.vb: Polyline(IList(Of Vector3))
- uid: GeometrySharp.Geometry.Polyline.Length
  commentId: M:GeometrySharp.Geometry.Polyline.Length
  id: Length
  parent: GeometrySharp.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: Polyline.Length()
  fullName: GeometrySharp.Geometry.Polyline.Length()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Polyline.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Length
    path: ../GeometrySharp/Geometry/Polyline.cs
    startLine: 38
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCalculate the length of the polyline.\n"
  example: []
  syntax:
    content: public double Length()
    return:
      type: System.Double
      description: The total length of the polyline.
    content.vb: Public Function Length As Double
  overload: GeometrySharp.Geometry.Polyline.Length*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Polyline.Segments
  commentId: M:GeometrySharp.Geometry.Polyline.Segments
  id: Segments
  parent: GeometrySharp.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Segments()
  nameWithType: Polyline.Segments()
  fullName: GeometrySharp.Geometry.Polyline.Segments()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Polyline.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Segments
    path: ../GeometrySharp/Geometry/Polyline.cs
    startLine: 54
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nConstructs a collections of lines, which make the polyline.\n"
  example: []
  syntax:
    content: public Line[] Segments()
    return:
      type: GeometrySharp.Geometry.Line[]
      description: A collection of lines.
    content.vb: Public Function Segments As Line()
  overload: GeometrySharp.Geometry.Polyline.Segments*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Polyline.ClosestPt(GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Geometry.Polyline.ClosestPt(GeometrySharp.Geometry.Vector3)
  id: ClosestPt(GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: ClosestPt(Vector3)
  nameWithType: Polyline.ClosestPt(Vector3)
  fullName: GeometrySharp.Geometry.Polyline.ClosestPt(GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Polyline.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ClosestPt
    path: ../GeometrySharp/Geometry/Polyline.cs
    startLine: 72
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGets the point which is the closest point to the given point.\n"
  example: []
  syntax:
    content: public Vector3 ClosestPt(Vector3 pt)
    parameters:
    - id: pt
      type: GeometrySharp.Geometry.Vector3
      description: Point to test.
    return:
      type: GeometrySharp.Geometry.Vector3
      description: The point closest to the given point.
    content.vb: Public Function ClosestPt(pt As Vector3) As Vector3
  overload: GeometrySharp.Geometry.Polyline.ClosestPt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Polyline.BoundingBox
  commentId: P:GeometrySharp.Geometry.Polyline.BoundingBox
  id: BoundingBox
  parent: GeometrySharp.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: BoundingBox
  nameWithType: Polyline.BoundingBox
  fullName: GeometrySharp.Geometry.Polyline.BoundingBox
  type: Property
  source:
    remote:
      path: GeometrySharp/Geometry/Polyline.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: BoundingBox
    path: ../GeometrySharp/Geometry/Polyline.cs
    startLine: 128
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCalculates the bounding box of the list of points.\n"
  example: []
  syntax:
    content: public BoundingBox BoundingBox { get; }
    parameters: []
    return:
      type: GeometrySharp.Geometry.BoundingBox
      description: The bounding box.
    content.vb: Public ReadOnly Property BoundingBox As BoundingBox
  overload: GeometrySharp.Geometry.Polyline.BoundingBox*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: GeometrySharp.Geometry.Polyline.Reverse
  commentId: M:GeometrySharp.Geometry.Polyline.Reverse
  id: Reverse
  parent: GeometrySharp.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Reverse()
  nameWithType: Polyline.Reverse()
  fullName: GeometrySharp.Geometry.Polyline.Reverse()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Polyline.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Reverse
    path: ../GeometrySharp/Geometry/Polyline.cs
    startLine: 160
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nReverses the order of the polyline.\n"
  example: []
  syntax:
    content: public Polyline Reverse()
    return:
      type: GeometrySharp.Geometry.Polyline
      description: A polyline reversed.
    content.vb: Public Function Reverse As Polyline
  overload: GeometrySharp.Geometry.Polyline.Reverse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Polyline.PointAt(System.Double,GeometrySharp.Geometry.Vector3@)
  commentId: M:GeometrySharp.Geometry.Polyline.PointAt(System.Double,GeometrySharp.Geometry.Vector3@)
  id: PointAt(System.Double,GeometrySharp.Geometry.Vector3@)
  parent: GeometrySharp.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: PointAt(Double, out Vector3)
  nameWithType: Polyline.PointAt(Double, out Vector3)
  fullName: GeometrySharp.Geometry.Polyline.PointAt(System.Double, out GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Polyline.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: PointAt
    path: ../GeometrySharp/Geometry/Polyline.cs
    startLine: 173
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nGet the point on the polyline at the give parameter.\nThe parameter must be between 0.0 and 1.0.\n"
  example: []
  syntax:
    content: public Vector3 PointAt(double t, out Vector3 tangent)
    parameters:
    - id: t
      type: System.Double
      description: Parameter to evaluate at.
    - id: tangent
      type: GeometrySharp.Geometry.Vector3
    return:
      type: GeometrySharp.Geometry.Vector3
      description: The point on the polyline at t.
    content.vb: Public Function PointAt(t As Double, ByRef tangent As Vector3) As Vector3
  overload: GeometrySharp.Geometry.Polyline.PointAt*
  nameWithType.vb: Polyline.PointAt(Double, ByRef Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GeometrySharp.Geometry.Polyline.PointAt(System.Double, ByRef GeometrySharp.Geometry.Vector3)
  name.vb: PointAt(Double, ByRef Vector3)
- uid: GeometrySharp.Geometry.Polyline.Transform(GeometrySharp.Core.Transform)
  commentId: M:GeometrySharp.Geometry.Polyline.Transform(GeometrySharp.Core.Transform)
  id: Transform(GeometrySharp.Core.Transform)
  parent: GeometrySharp.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Transform(Transform)
  nameWithType: Polyline.Transform(Transform)
  fullName: GeometrySharp.Geometry.Polyline.Transform(GeometrySharp.Core.Transform)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Polyline.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Transform
    path: ../GeometrySharp/Geometry/Polyline.cs
    startLine: 208
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nApplies a transformation to all the points.\n"
  example: []
  syntax:
    content: public Polyline Transform(Transform transform)
    parameters:
    - id: transform
      type: GeometrySharp.Core.Transform
      description: Transformation matrix to apply.
    return:
      type: GeometrySharp.Geometry.Polyline
      description: A polyline transformed.
    content.vb: Public Function Transform(transform As Transform) As Polyline
  overload: GeometrySharp.Geometry.Polyline.Transform*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Polyline.ToNurbsCurve
  commentId: M:GeometrySharp.Geometry.Polyline.ToNurbsCurve
  id: ToNurbsCurve
  parent: GeometrySharp.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: ToNurbsCurve()
  nameWithType: Polyline.ToNurbsCurve()
  fullName: GeometrySharp.Geometry.Polyline.ToNurbsCurve()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Polyline.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ToNurbsCurve
    path: ../GeometrySharp/Geometry/Polyline.cs
    startLine: 219
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nConstructs a nurbs curve representation of this polyline.\n"
  example: []
  syntax:
    content: public NurbsCurve ToNurbsCurve()
    return:
      type: GeometrySharp.Geometry.NurbsCurve
      description: A Nurbs curve shaped like this polyline.
    content.vb: Public Function ToNurbsCurve As NurbsCurve
  overload: GeometrySharp.Geometry.Polyline.ToNurbsCurve*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Geometry.Polyline.CleanVerticesForShortLength(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  commentId: M:GeometrySharp.Geometry.Polyline.CleanVerticesForShortLength(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  id: CleanVerticesForShortLength(System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3})
  parent: GeometrySharp.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: CleanVerticesForShortLength(IList<Vector3>)
  nameWithType: Polyline.CleanVerticesForShortLength(IList<Vector3>)
  fullName: GeometrySharp.Geometry.Polyline.CleanVerticesForShortLength(System.Collections.Generic.IList<GeometrySharp.Geometry.Vector3>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Polyline.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: CleanVerticesForShortLength
    path: ../GeometrySharp/Geometry/Polyline.cs
    startLine: 244
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nCompute the segments length and removes the segments which are shorter than a tolerance.\n"
  example: []
  syntax:
    content: protected static IList<Vector3> CleanVerticesForShortLength(IList<Vector3> vertices)
    parameters:
    - id: vertices
      type: System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3}
      description: Points used to create the polyline.
    return:
      type: System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3}
      description: A cleaned collections of points if necessary otherwise the same collection of points.
    content.vb: Protected Shared Function CleanVerticesForShortLength(vertices As IList(Of Vector3)) As IList(Of Vector3)
  overload: GeometrySharp.Geometry.Polyline.CleanVerticesForShortLength*
  nameWithType.vb: Polyline.CleanVerticesForShortLength(IList(Of Vector3))
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
  fullName.vb: GeometrySharp.Geometry.Polyline.CleanVerticesForShortLength(System.Collections.Generic.IList(Of GeometrySharp.Geometry.Vector3))
  name.vb: CleanVerticesForShortLength(IList(Of Vector3))
- uid: GeometrySharp.Geometry.Polyline.ToString
  commentId: M:GeometrySharp.Geometry.Polyline.ToString
  id: ToString
  parent: GeometrySharp.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Polyline.ToString()
  fullName: GeometrySharp.Geometry.Polyline.ToString()
  type: Method
  source:
    remote:
      path: GeometrySharp/Geometry/Polyline.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ToString
    path: ../GeometrySharp/Geometry/Polyline.cs
    startLine: 287
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Geometry
  summary: "\nConstructs the string representation of the polyline.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A text string.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: GeometrySharp.Geometry.Polyline.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: GeometrySharp.Geometry
  commentId: N:GeometrySharp.Geometry
  name: GeometrySharp.Geometry
  nameWithType: GeometrySharp.Geometry
  fullName: GeometrySharp.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  commentId: T:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector3>
  nameWithType: List<Vector3>
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: List(Of Vector3)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3)
  name.vb: List(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3}
  commentId: T:System.Collections.Generic.IList{GeometrySharp.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Vector3>
  nameWithType: IList<Vector3>
  fullName: System.Collections.Generic.IList<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: IList(Of Vector3)
  fullName.vb: System.Collections.Generic.IList(Of GeometrySharp.Geometry.Vector3)
  name.vb: IList(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{GeometrySharp.Geometry.Vector3}
  commentId: T:System.Collections.Generic.ICollection{GeometrySharp.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Vector3>
  nameWithType: ICollection<Vector3>
  fullName: System.Collections.Generic.ICollection<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: ICollection(Of Vector3)
  fullName.vb: System.Collections.Generic.ICollection(Of GeometrySharp.Geometry.Vector3)
  name.vb: ICollection(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{GeometrySharp.Geometry.Vector3}
  commentId: T:System.Collections.Generic.IReadOnlyList{GeometrySharp.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Vector3>
  nameWithType: IReadOnlyList<Vector3>
  fullName: System.Collections.Generic.IReadOnlyList<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: IReadOnlyList(Of Vector3)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of GeometrySharp.Geometry.Vector3)
  name.vb: IReadOnlyList(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{GeometrySharp.Geometry.Vector3}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{GeometrySharp.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<Vector3>
  nameWithType: IReadOnlyCollection<Vector3>
  fullName: System.Collections.Generic.IReadOnlyCollection<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: IReadOnlyCollection(Of Vector3)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of GeometrySharp.Geometry.Vector3)
  name.vb: IReadOnlyCollection(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{GeometrySharp.Geometry.Vector3}
  commentId: T:System.Collections.Generic.IEnumerable{GeometrySharp.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Vector3>
  nameWithType: IEnumerable<Vector3>
  fullName: System.Collections.Generic.IEnumerable<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: IEnumerable(Of Vector3)
  fullName.vb: System.Collections.Generic.IEnumerable(Of GeometrySharp.Geometry.Vector3)
  name.vb: IEnumerable(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#get_Item(System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  name: IList.get_Item(Int32)
  nameWithType: List<Vector3>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of Vector3).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<Vector3>.IList.get_Item
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of Vector3).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#set_Item(System.Int32,System.Object)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  name: IList.set_Item(Int32, Object)
  nameWithType: List<Vector3>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of Vector3).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<Vector3>.IList.set_Item
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of Vector3).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Add(GeometrySharp.Geometry.Vector3)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Add(GeometrySharp.Geometry.Vector3)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Add(`0)
  name: Add(Vector3)
  nameWithType: List<Vector3>.Add(Vector3)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Add(GeometrySharp.Geometry.Vector3)
  nameWithType.vb: List(Of Vector3).Add(Vector3)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Add(GeometrySharp.Geometry.Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<Vector3>.Add
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of Vector3).Add
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.AddRange(System.Collections.Generic.IEnumerable{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.AddRange(System.Collections.Generic.IEnumerable{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  name: AddRange(IEnumerable<Vector3>)
  nameWithType: List<Vector3>.AddRange(IEnumerable<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.AddRange(System.Collections.Generic.IEnumerable<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).AddRange(IEnumerable(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).AddRange(System.Collections.Generic.IEnumerable(Of GeometrySharp.Geometry.Vector3))
  name.vb: AddRange(IEnumerable(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<Vector3>.AddRange
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of Vector3).AddRange
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.AsReadOnly
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.AsReadOnly
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.AsReadOnly
  name: AsReadOnly()
  nameWithType: List<Vector3>.AsReadOnly()
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.AsReadOnly()
  nameWithType.vb: List(Of Vector3).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<Vector3>.AsReadOnly
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of Vector3).AsReadOnly
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.BinarySearch(System.Int32,System.Int32,GeometrySharp.Geometry.Vector3,System.Collections.Generic.IComparer{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.BinarySearch(System.Int32,System.Int32,GeometrySharp.Geometry.Vector3,System.Collections.Generic.IComparer{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(Int32, Int32, Vector3, IComparer<Vector3>)
  nameWithType: List<Vector3>.BinarySearch(Int32, Int32, Vector3, IComparer<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.BinarySearch(System.Int32, System.Int32, GeometrySharp.Geometry.Vector3, System.Collections.Generic.IComparer<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).BinarySearch(Int32, Int32, Vector3, IComparer(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).BinarySearch(System.Int32, System.Int32, GeometrySharp.Geometry.Vector3, System.Collections.Generic.IComparer(Of GeometrySharp.Geometry.Vector3))
  name.vb: BinarySearch(Int32, Int32, Vector3, IComparer(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<Vector3>.BinarySearch
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of Vector3).BinarySearch
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.BinarySearch(GeometrySharp.Geometry.Vector3)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.BinarySearch(GeometrySharp.Geometry.Vector3)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.BinarySearch(`0)
  name: BinarySearch(Vector3)
  nameWithType: List<Vector3>.BinarySearch(Vector3)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.BinarySearch(GeometrySharp.Geometry.Vector3)
  nameWithType.vb: List(Of Vector3).BinarySearch(Vector3)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).BinarySearch(GeometrySharp.Geometry.Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<Vector3>.BinarySearch
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of Vector3).BinarySearch
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.BinarySearch(GeometrySharp.Geometry.Vector3,System.Collections.Generic.IComparer{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.BinarySearch(GeometrySharp.Geometry.Vector3,System.Collections.Generic.IComparer{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(Vector3, IComparer<Vector3>)
  nameWithType: List<Vector3>.BinarySearch(Vector3, IComparer<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.BinarySearch(GeometrySharp.Geometry.Vector3, System.Collections.Generic.IComparer<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).BinarySearch(Vector3, IComparer(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).BinarySearch(GeometrySharp.Geometry.Vector3, System.Collections.Generic.IComparer(Of GeometrySharp.Geometry.Vector3))
  name.vb: BinarySearch(Vector3, IComparer(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<Vector3>.BinarySearch
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of Vector3).BinarySearch
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Clear
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Clear
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Clear
  name: Clear()
  nameWithType: List<Vector3>.Clear()
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Clear()
  nameWithType.vb: List(Of Vector3).Clear()
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<Vector3>.Clear
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of Vector3).Clear
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Contains(GeometrySharp.Geometry.Vector3)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Contains(GeometrySharp.Geometry.Vector3)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Contains(`0)
  name: Contains(Vector3)
  nameWithType: List<Vector3>.Contains(Vector3)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Contains(GeometrySharp.Geometry.Vector3)
  nameWithType.vb: List(Of Vector3).Contains(Vector3)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Contains(GeometrySharp.Geometry.Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<Vector3>.Contains
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of Vector3).Contains
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.ConvertAll``1(System.Converter{GeometrySharp.Geometry.Vector3,{TOutput}})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.ConvertAll``1(System.Converter{GeometrySharp.Geometry.Vector3,``0})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  name: ConvertAll<TOutput>(Converter<Vector3, TOutput>)
  nameWithType: List<Vector3>.ConvertAll<TOutput>(Converter<Vector3, TOutput>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.ConvertAll<TOutput>(System.Converter<GeometrySharp.Geometry.Vector3, TOutput>)
  nameWithType.vb: List(Of Vector3).ConvertAll(Of TOutput)(Converter(Of Vector3, TOutput))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).ConvertAll(Of TOutput)(System.Converter(Of GeometrySharp.Geometry.Vector3, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of Vector3, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<Vector3>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of Vector3).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.CopyTo(System.Int32,GeometrySharp.Geometry.Vector3[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.CopyTo(System.Int32,GeometrySharp.Geometry.Vector3[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  name: CopyTo(Int32, Vector3[], Int32, Int32)
  nameWithType: List<Vector3>.CopyTo(Int32, Vector3[], Int32, Int32)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.CopyTo(System.Int32, GeometrySharp.Geometry.Vector3[], System.Int32, System.Int32)
  nameWithType.vb: List(Of Vector3).CopyTo(Int32, Vector3(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).CopyTo(System.Int32, GeometrySharp.Geometry.Vector3(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, Vector3(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<Vector3>.CopyTo
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of Vector3).CopyTo
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.CopyTo(GeometrySharp.Geometry.Vector3[])
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.CopyTo(GeometrySharp.Geometry.Vector3[])
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.CopyTo(`0[])
  name: CopyTo(Vector3[])
  nameWithType: List<Vector3>.CopyTo(Vector3[])
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.CopyTo(GeometrySharp.Geometry.Vector3[])
  nameWithType.vb: List(Of Vector3).CopyTo(Vector3())
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).CopyTo(GeometrySharp.Geometry.Vector3())
  name.vb: CopyTo(Vector3())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<Vector3>.CopyTo
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of Vector3).CopyTo
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.CopyTo(GeometrySharp.Geometry.Vector3[],System.Int32)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.CopyTo(GeometrySharp.Geometry.Vector3[],System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  name: CopyTo(Vector3[], Int32)
  nameWithType: List<Vector3>.CopyTo(Vector3[], Int32)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.CopyTo(GeometrySharp.Geometry.Vector3[], System.Int32)
  nameWithType.vb: List(Of Vector3).CopyTo(Vector3(), Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).CopyTo(GeometrySharp.Geometry.Vector3(), System.Int32)
  name.vb: CopyTo(Vector3(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<Vector3>.CopyTo
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of Vector3).CopyTo
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Exists(System.Predicate{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Exists(System.Predicate{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  name: Exists(Predicate<Vector3>)
  nameWithType: List<Vector3>.Exists(Predicate<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Exists(System.Predicate<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).Exists(Predicate(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Exists(System.Predicate(Of GeometrySharp.Geometry.Vector3))
  name.vb: Exists(Predicate(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<Vector3>.Exists
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of Vector3).Exists
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Find(System.Predicate{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Find(System.Predicate{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  name: Find(Predicate<Vector3>)
  nameWithType: List<Vector3>.Find(Predicate<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Find(System.Predicate<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).Find(Predicate(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Find(System.Predicate(Of GeometrySharp.Geometry.Vector3))
  name.vb: Find(Predicate(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<Vector3>.Find
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of Vector3).Find
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindAll(System.Predicate{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindAll(System.Predicate{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  name: FindAll(Predicate<Vector3>)
  nameWithType: List<Vector3>.FindAll(Predicate<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindAll(System.Predicate<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).FindAll(Predicate(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindAll(System.Predicate(Of GeometrySharp.Geometry.Vector3))
  name.vb: FindAll(Predicate(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<Vector3>.FindAll
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of Vector3).FindAll
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindIndex(System.Int32,System.Int32,System.Predicate{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindIndex(System.Int32,System.Int32,System.Predicate{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Int32, Predicate<Vector3>)
  nameWithType: List<Vector3>.FindIndex(Int32, Int32, Predicate<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindIndex(System.Int32, System.Int32, System.Predicate<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).FindIndex(Int32, Int32, Predicate(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindIndex(System.Int32, System.Int32, System.Predicate(Of GeometrySharp.Geometry.Vector3))
  name.vb: FindIndex(Int32, Int32, Predicate(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<Vector3>.FindIndex
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of Vector3).FindIndex
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindIndex(System.Int32,System.Predicate{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindIndex(System.Int32,System.Predicate{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Predicate<Vector3>)
  nameWithType: List<Vector3>.FindIndex(Int32, Predicate<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindIndex(System.Int32, System.Predicate<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).FindIndex(Int32, Predicate(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindIndex(System.Int32, System.Predicate(Of GeometrySharp.Geometry.Vector3))
  name.vb: FindIndex(Int32, Predicate(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<Vector3>.FindIndex
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of Vector3).FindIndex
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindIndex(System.Predicate{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindIndex(System.Predicate{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  name: FindIndex(Predicate<Vector3>)
  nameWithType: List<Vector3>.FindIndex(Predicate<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindIndex(System.Predicate<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).FindIndex(Predicate(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindIndex(System.Predicate(Of GeometrySharp.Geometry.Vector3))
  name.vb: FindIndex(Predicate(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<Vector3>.FindIndex
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of Vector3).FindIndex
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindLast(System.Predicate{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindLast(System.Predicate{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  name: FindLast(Predicate<Vector3>)
  nameWithType: List<Vector3>.FindLast(Predicate<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindLast(System.Predicate<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).FindLast(Predicate(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindLast(System.Predicate(Of GeometrySharp.Geometry.Vector3))
  name.vb: FindLast(Predicate(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<Vector3>.FindLast
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of Vector3).FindLast
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindLastIndex(System.Int32,System.Int32,System.Predicate{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindLastIndex(System.Int32,System.Int32,System.Predicate{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Int32, Predicate<Vector3>)
  nameWithType: List<Vector3>.FindLastIndex(Int32, Int32, Predicate<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindLastIndex(System.Int32, System.Int32, System.Predicate<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).FindLastIndex(Int32, Int32, Predicate(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of GeometrySharp.Geometry.Vector3))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<Vector3>.FindLastIndex
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of Vector3).FindLastIndex
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindLastIndex(System.Int32,System.Predicate{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindLastIndex(System.Int32,System.Predicate{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Predicate<Vector3>)
  nameWithType: List<Vector3>.FindLastIndex(Int32, Predicate<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindLastIndex(System.Int32, System.Predicate<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).FindLastIndex(Int32, Predicate(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindLastIndex(System.Int32, System.Predicate(Of GeometrySharp.Geometry.Vector3))
  name.vb: FindLastIndex(Int32, Predicate(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<Vector3>.FindLastIndex
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of Vector3).FindLastIndex
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindLastIndex(System.Predicate{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.FindLastIndex(System.Predicate{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  name: FindLastIndex(Predicate<Vector3>)
  nameWithType: List<Vector3>.FindLastIndex(Predicate<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindLastIndex(System.Predicate<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).FindLastIndex(Predicate(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindLastIndex(System.Predicate(Of GeometrySharp.Geometry.Vector3))
  name.vb: FindLastIndex(Predicate(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<Vector3>.FindLastIndex
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of Vector3).FindLastIndex
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.ForEach(System.Action{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.ForEach(System.Action{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  name: ForEach(Action<Vector3>)
  nameWithType: List<Vector3>.ForEach(Action<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.ForEach(System.Action<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).ForEach(Action(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).ForEach(System.Action(Of GeometrySharp.Geometry.Vector3))
  name.vb: ForEach(Action(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<Vector3>.ForEach
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of Vector3).ForEach
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.GetEnumerator
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.GetEnumerator
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: List<Vector3>.GetEnumerator()
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.GetEnumerator()
  nameWithType.vb: List(Of Vector3).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<Vector3>.GetEnumerator
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of Vector3).GetEnumerator
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  name: GetRange(Int32, Int32)
  nameWithType: List<Vector3>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of Vector3).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<Vector3>.GetRange
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of Vector3).GetRange
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.IndexOf(GeometrySharp.Geometry.Vector3)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.IndexOf(GeometrySharp.Geometry.Vector3)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.IndexOf(`0)
  name: IndexOf(Vector3)
  nameWithType: List<Vector3>.IndexOf(Vector3)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.IndexOf(GeometrySharp.Geometry.Vector3)
  nameWithType.vb: List(Of Vector3).IndexOf(Vector3)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).IndexOf(GeometrySharp.Geometry.Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<Vector3>.IndexOf
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of Vector3).IndexOf
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.IndexOf(GeometrySharp.Geometry.Vector3,System.Int32)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.IndexOf(GeometrySharp.Geometry.Vector3,System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  name: IndexOf(Vector3, Int32)
  nameWithType: List<Vector3>.IndexOf(Vector3, Int32)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.IndexOf(GeometrySharp.Geometry.Vector3, System.Int32)
  nameWithType.vb: List(Of Vector3).IndexOf(Vector3, Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).IndexOf(GeometrySharp.Geometry.Vector3, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<Vector3>.IndexOf
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of Vector3).IndexOf
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.IndexOf(GeometrySharp.Geometry.Vector3,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.IndexOf(GeometrySharp.Geometry.Vector3,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  name: IndexOf(Vector3, Int32, Int32)
  nameWithType: List<Vector3>.IndexOf(Vector3, Int32, Int32)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.IndexOf(GeometrySharp.Geometry.Vector3, System.Int32, System.Int32)
  nameWithType.vb: List(Of Vector3).IndexOf(Vector3, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).IndexOf(GeometrySharp.Geometry.Vector3, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<Vector3>.IndexOf
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of Vector3).IndexOf
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Insert(System.Int32,GeometrySharp.Geometry.Vector3)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Insert(System.Int32,GeometrySharp.Geometry.Vector3)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  name: Insert(Int32, Vector3)
  nameWithType: List<Vector3>.Insert(Int32, Vector3)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Insert(System.Int32, GeometrySharp.Geometry.Vector3)
  nameWithType.vb: List(Of Vector3).Insert(Int32, Vector3)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Insert(System.Int32, GeometrySharp.Geometry.Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<Vector3>.Insert
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of Vector3).Insert
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  name: InsertRange(Int32, IEnumerable<Vector3>)
  nameWithType: List<Vector3>.InsertRange(Int32, IEnumerable<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).InsertRange(Int32, IEnumerable(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of GeometrySharp.Geometry.Vector3))
  name.vb: InsertRange(Int32, IEnumerable(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<Vector3>.InsertRange
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of Vector3).InsertRange
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.LastIndexOf(GeometrySharp.Geometry.Vector3)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.LastIndexOf(GeometrySharp.Geometry.Vector3)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0)
  name: LastIndexOf(Vector3)
  nameWithType: List<Vector3>.LastIndexOf(Vector3)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.LastIndexOf(GeometrySharp.Geometry.Vector3)
  nameWithType.vb: List(Of Vector3).LastIndexOf(Vector3)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).LastIndexOf(GeometrySharp.Geometry.Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<Vector3>.LastIndexOf
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of Vector3).LastIndexOf
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.LastIndexOf(GeometrySharp.Geometry.Vector3,System.Int32)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.LastIndexOf(GeometrySharp.Geometry.Vector3,System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  name: LastIndexOf(Vector3, Int32)
  nameWithType: List<Vector3>.LastIndexOf(Vector3, Int32)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.LastIndexOf(GeometrySharp.Geometry.Vector3, System.Int32)
  nameWithType.vb: List(Of Vector3).LastIndexOf(Vector3, Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).LastIndexOf(GeometrySharp.Geometry.Vector3, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<Vector3>.LastIndexOf
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of Vector3).LastIndexOf
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.LastIndexOf(GeometrySharp.Geometry.Vector3,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.LastIndexOf(GeometrySharp.Geometry.Vector3,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  name: LastIndexOf(Vector3, Int32, Int32)
  nameWithType: List<Vector3>.LastIndexOf(Vector3, Int32, Int32)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.LastIndexOf(GeometrySharp.Geometry.Vector3, System.Int32, System.Int32)
  nameWithType.vb: List(Of Vector3).LastIndexOf(Vector3, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).LastIndexOf(GeometrySharp.Geometry.Vector3, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<Vector3>.LastIndexOf
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of Vector3).LastIndexOf
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Remove(GeometrySharp.Geometry.Vector3)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Remove(GeometrySharp.Geometry.Vector3)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Remove(`0)
  name: Remove(Vector3)
  nameWithType: List<Vector3>.Remove(Vector3)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Remove(GeometrySharp.Geometry.Vector3)
  nameWithType.vb: List(Of Vector3).Remove(Vector3)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Remove(GeometrySharp.Geometry.Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<Vector3>.Remove
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of Vector3).Remove
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.RemoveAll(System.Predicate{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.RemoveAll(System.Predicate{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  name: RemoveAll(Predicate<Vector3>)
  nameWithType: List<Vector3>.RemoveAll(Predicate<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.RemoveAll(System.Predicate<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).RemoveAll(Predicate(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).RemoveAll(System.Predicate(Of GeometrySharp.Geometry.Vector3))
  name.vb: RemoveAll(Predicate(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<Vector3>.RemoveAll
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of Vector3).RemoveAll
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: List<Vector3>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of Vector3).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<Vector3>.RemoveAt
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of Vector3).RemoveAt
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  name: RemoveRange(Int32, Int32)
  nameWithType: List<Vector3>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of Vector3).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<Vector3>.RemoveRange
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of Vector3).RemoveRange
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  name: Reverse(Int32, Int32)
  nameWithType: List<Vector3>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of Vector3).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<Vector3>.Reverse
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of Vector3).Reverse
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Sort
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Sort
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Sort
  name: Sort()
  nameWithType: List<Vector3>.Sort()
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Sort()
  nameWithType.vb: List(Of Vector3).Sort()
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<Vector3>.Sort
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of Vector3).Sort
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Sort(System.Collections.Generic.IComparer{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Sort(System.Collections.Generic.IComparer{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  name: Sort(IComparer<Vector3>)
  nameWithType: List<Vector3>.Sort(IComparer<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Sort(System.Collections.Generic.IComparer<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).Sort(IComparer(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Sort(System.Collections.Generic.IComparer(Of GeometrySharp.Geometry.Vector3))
  name.vb: Sort(IComparer(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<Vector3>.Sort
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of Vector3).Sort
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Sort(System.Comparison{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Sort(System.Comparison{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  name: Sort(Comparison<Vector3>)
  nameWithType: List<Vector3>.Sort(Comparison<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Sort(System.Comparison<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).Sort(Comparison(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Sort(System.Comparison(Of GeometrySharp.Geometry.Vector3))
  name.vb: Sort(Comparison(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<Vector3>.Sort
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of Vector3).Sort
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  name: Sort(Int32, Int32, IComparer<Vector3>)
  nameWithType: List<Vector3>.Sort(Int32, Int32, IComparer<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).Sort(Int32, Int32, IComparer(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of GeometrySharp.Geometry.Vector3))
  name.vb: Sort(Int32, Int32, IComparer(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<Vector3>.Sort
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of Vector3).Sort
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<Vector3>.GetEnumerator()
  nameWithType: List<Vector3>.IEnumerable<Vector3>.GetEnumerator()
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.Generic.IEnumerable<GeometrySharp.Geometry.Vector3>.GetEnumerator()
  nameWithType.vb: List(Of Vector3).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<Vector3>.GetEnumerator
    nameWithType: List<Vector3>.IEnumerable<Vector3>.GetEnumerator
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.Generic.IEnumerable<GeometrySharp.Geometry.Vector3>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of Vector3).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<Vector3>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of Vector3).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<Vector3>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of Vector3).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: List<Vector3>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of Vector3).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<Vector3>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of Vector3).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  name: IList.Add(Object)
  nameWithType: List<Vector3>.IList.Add(Object)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of Vector3).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<Vector3>.IList.Add
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of Vector3).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  name: IList.Contains(Object)
  nameWithType: List<Vector3>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of Vector3).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<Vector3>.IList.Contains
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of Vector3).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  name: IList.IndexOf(Object)
  nameWithType: List<Vector3>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of Vector3).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<Vector3>.IList.IndexOf
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of Vector3).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  name: IList.Insert(Int32, Object)
  nameWithType: List<Vector3>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of Vector3).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<Vector3>.IList.Insert
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of Vector3).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  name: IList.Remove(Object)
  nameWithType: List<Vector3>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of Vector3).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<Vector3>.IList.Remove
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of Vector3).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.ToArray
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.ToArray
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.ToArray
  name: ToArray()
  nameWithType: List<Vector3>.ToArray()
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.ToArray()
  nameWithType.vb: List(Of Vector3).ToArray()
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<Vector3>.ToArray
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of Vector3).ToArray
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.TrimExcess
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.TrimExcess
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.TrimExcess
  name: TrimExcess()
  nameWithType: List<Vector3>.TrimExcess()
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.TrimExcess()
  nameWithType.vb: List(Of Vector3).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<Vector3>.TrimExcess
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of Vector3).TrimExcess
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.TrueForAll(System.Predicate{GeometrySharp.Geometry.Vector3})
  commentId: M:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.TrueForAll(System.Predicate{GeometrySharp.Geometry.Vector3})
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  name: TrueForAll(Predicate<Vector3>)
  nameWithType: List<Vector3>.TrueForAll(Predicate<Vector3>)
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.TrueForAll(System.Predicate<GeometrySharp.Geometry.Vector3>)
  nameWithType.vb: List(Of Vector3).TrueForAll(Predicate(Of Vector3))
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).TrueForAll(System.Predicate(Of GeometrySharp.Geometry.Vector3))
  name.vb: TrueForAll(Predicate(Of Vector3))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<Vector3>.TrueForAll
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of Vector3).TrueForAll
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Capacity
  commentId: P:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Capacity
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Capacity
  name: Capacity
  nameWithType: List<Vector3>.Capacity
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Capacity
  nameWithType.vb: List(Of Vector3).Capacity
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Capacity
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Count
  commentId: P:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Count
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Count
  name: Count
  nameWithType: List<Vector3>.Count
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Count
  nameWithType.vb: List(Of Vector3).Count
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Count
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Item(System.Int32)
  commentId: P:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.Item(System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: List<Vector3>.Item[Int32]
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Item[System.Int32]
  nameWithType.vb: List(Of Vector3).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<Vector3>.Item
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of Vector3).Item
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<Vector3>.IsReadOnly
  nameWithType: List<Vector3>.ICollection<Vector3>.IsReadOnly
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.Generic.ICollection<GeometrySharp.Geometry.Vector3>.IsReadOnly
  nameWithType.vb: List(Of Vector3).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: List<Vector3>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of Vector3).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: List<Vector3>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of Vector3).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#IsFixedSize
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: List<Vector3>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of Vector3).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#IsReadOnly
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: List<Vector3>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of Vector3).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  name: IList.Item[Int32]
  nameWithType: List<Vector3>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of Vector3).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<Vector3>.IList.Item
    fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of Vector3).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{GeometrySharp.Geometry.Vector3}.GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Func{GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Boolean})
  commentId: M:GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  parent: GeometrySharp.ExtendedMethods.ExtendedEnumerable
  definition: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  name: Unique<Vector3>(Func<Vector3, Vector3, Boolean>)
  nameWithType: ExtendedEnumerable.Unique<Vector3>(Func<Vector3, Vector3, Boolean>)
  fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique<GeometrySharp.Geometry.Vector3>(System.Func<GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, System.Boolean>)
  nameWithType.vb: ExtendedEnumerable.Unique(Of Vector3)(Func(Of Vector3, Vector3, Boolean))
  fullName.vb: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique(Of GeometrySharp.Geometry.Vector3)(System.Func(Of GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, System.Boolean))
  name.vb: Unique(Of Vector3)(Func(Of Vector3, Vector3, Boolean))
  spec.csharp:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Func{``0,``0,System.Boolean})
    name: Unique<Vector3>
    nameWithType: ExtendedEnumerable.Unique<Vector3>
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique<GeometrySharp.Geometry.Vector3>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Func{``0,``0,System.Boolean})
    name: Unique(Of Vector3)
    nameWithType: ExtendedEnumerable.Unique(Of Vector3)
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique(Of GeometrySharp.Geometry.Vector3)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  isExternal: true
  name: IList.get_Item(Int32)
  nameWithType: List<T>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of T).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<T>.IList.get_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of T).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  isExternal: true
  name: IList.set_Item(Int32, Object)
  nameWithType: List<T>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<T>.IList.set_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of T).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Add(`0)
  commentId: M:System.Collections.Generic.List`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: List<T>.Add(T)
  fullName: System.Collections.Generic.List<T>.Add(T)
  nameWithType.vb: List(Of T).Add(T)
  fullName.vb: System.Collections.Generic.List(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<T>.Add
    fullName: System.Collections.Generic.List<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of T).Add
    fullName: System.Collections.Generic.List(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).AddRange(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<T>.AddRange
    fullName: System.Collections.Generic.List<T>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of T).AddRange
    fullName: System.Collections.Generic.List(Of T).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AsReadOnly
  commentId: M:System.Collections.Generic.List`1.AsReadOnly
  isExternal: true
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
  nameWithType.vb: List(Of T).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of T).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<T>.AsReadOnly
    fullName: System.Collections.Generic.List<T>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of T).AsReadOnly
    fullName: System.Collections.Generic.List(Of T).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(Int32, Int32, T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Int32, Int32, T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  isExternal: true
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
  nameWithType.vb: List(Of T).BinarySearch(T)
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Clear
  commentId: M:System.Collections.Generic.List`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
  nameWithType.vb: List(Of T).Clear()
  fullName.vb: System.Collections.Generic.List(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<T>.Clear
    fullName: System.Collections.Generic.List<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of T).Clear
    fullName: System.Collections.Generic.List(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Contains(`0)
  commentId: M:System.Collections.Generic.List`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
  nameWithType.vb: List(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.List(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<T>.Contains
    fullName: System.Collections.Generic.List<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of T).Contains
    fullName: System.Collections.Generic.List(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  commentId: M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  isExternal: true
  name: ConvertAll<TOutput>(Converter<T, TOutput>)
  nameWithType: List<T>.ConvertAll<TOutput>(Converter<T, TOutput>)
  fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>(System.Converter<T, TOutput>)
  nameWithType.vb: List(Of T).ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  fullName.vb: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)(System.Converter(Of T, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<T>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of T).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  isExternal: true
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
  nameWithType.vb: List(Of T).CopyTo(Int32, T(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, T(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  isExternal: true
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
  nameWithType.vb: List(Of T).CopyTo(T())
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T())
  name.vb: CopyTo(T())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: List<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: List(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  isExternal: true
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(System.Predicate<T>)
  nameWithType.vb: List(Of T).Exists(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Exists(System.Predicate(Of T))
  name.vb: Exists(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<T>.Exists
    fullName: System.Collections.Generic.List<T>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of T).Exists
    fullName: System.Collections.Generic.List(Of T).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  isExternal: true
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(System.Predicate<T>)
  nameWithType.vb: List(Of T).Find(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Find(System.Predicate(Of T))
  name.vb: Find(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<T>.Find
    fullName: System.Collections.Generic.List<T>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of T).Find
    fullName: System.Collections.Generic.List(Of T).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  isExternal: true
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindAll(System.Predicate(Of T))
  name.vb: FindAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<T>.FindAll
    fullName: System.Collections.Generic.List<T>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of T).FindAll
    fullName: System.Collections.Generic.List(Of T).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  isExternal: true
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Predicate(Of T))
  name.vb: FindIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  isExternal: true
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLast(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLast(System.Predicate(Of T))
  name.vb: FindLast(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<T>.FindLast
    fullName: System.Collections.Generic.List<T>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of T).FindLast
    fullName: System.Collections.Generic.List(Of T).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Predicate(Of T))
  name.vb: FindLastIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  isExternal: true
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(System.Action<T>)
  nameWithType.vb: List(Of T).ForEach(Action(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).ForEach(System.Action(Of T))
  name.vb: ForEach(Action(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<T>.ForEach
    fullName: System.Collections.Generic.List<T>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of T).ForEach
    fullName: System.Collections.Generic.List(Of T).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetEnumerator
  commentId: M:System.Collections.Generic.List`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
  nameWithType.vb: List(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of T).GetEnumerator
    fullName: System.Collections.Generic.List(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  isExternal: true
  name: GetRange(Int32, Int32)
  nameWithType: List<T>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<T>.GetRange
    fullName: System.Collections.Generic.List<T>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of T).GetRange
    fullName: System.Collections.Generic.List(Of T).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
  nameWithType.vb: List(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32)
  nameWithType: List<T>.IndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32, Int32)
  nameWithType: List<T>.IndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: List<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.List<T>.Insert(System.Int32, T)
  nameWithType.vb: List(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.List(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<T>.Insert
    fullName: System.Collections.Generic.List<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of T).Insert
    fullName: System.Collections.Generic.List(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).InsertRange(Int32, IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<T>.InsertRange
    fullName: System.Collections.Generic.List<T>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of T).InsertRange
    fullName: System.Collections.Generic.List(Of T).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  isExternal: true
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
  nameWithType.vb: List(Of T).LastIndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Remove(`0)
  commentId: M:System.Collections.Generic.List`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: List<T>.Remove(T)
  fullName: System.Collections.Generic.List<T>.Remove(T)
  nameWithType.vb: List(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.List(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<T>.Remove
    fullName: System.Collections.Generic.List<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of T).Remove
    fullName: System.Collections.Generic.List(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  isExternal: true
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).RemoveAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAll(System.Predicate(Of T))
  name.vb: RemoveAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<T>.RemoveAll
    fullName: System.Collections.Generic.List<T>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of T).RemoveAll
    fullName: System.Collections.Generic.List(Of T).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<T>.RemoveAt
    fullName: System.Collections.Generic.List<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of T).RemoveAt
    fullName: System.Collections.Generic.List(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  isExternal: true
  name: RemoveRange(Int32, Int32)
  nameWithType: List<T>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<T>.RemoveRange
    fullName: System.Collections.Generic.List<T>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of T).RemoveRange
    fullName: System.Collections.Generic.List(Of T).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  isExternal: true
  name: Reverse(Int32, Int32)
  nameWithType: List<T>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort
  commentId: M:System.Collections.Generic.List`1.Sort
  isExternal: true
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
  nameWithType.vb: List(Of T).Sort()
  fullName.vb: System.Collections.Generic.List(Of T).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  isExternal: true
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Comparison<T>)
  nameWithType.vb: List(Of T).Sort(Comparison(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(Int32, Int32, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Int32, Int32, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isExternal: true
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: List<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<T>.GetEnumerator
    nameWithType: List<T>.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<T>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<T>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of T).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: List<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<T>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  isExternal: true
  name: IList.Add(Object)
  nameWithType: List<T>.IList.Add(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<T>.IList.Add
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of T).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  isExternal: true
  name: IList.Contains(Object)
  nameWithType: List<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<T>.IList.Contains
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of T).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  isExternal: true
  name: IList.IndexOf(Object)
  nameWithType: List<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<T>.IList.IndexOf
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of T).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  isExternal: true
  name: IList.Insert(Int32, Object)
  nameWithType: List<T>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<T>.IList.Insert
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of T).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  isExternal: true
  name: IList.Remove(Object)
  nameWithType: List<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<T>.IList.Remove
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of T).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ToArray
  commentId: M:System.Collections.Generic.List`1.ToArray
  isExternal: true
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
  nameWithType.vb: List(Of T).ToArray()
  fullName.vb: System.Collections.Generic.List(Of T).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<T>.ToArray
    fullName: System.Collections.Generic.List<T>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of T).ToArray
    fullName: System.Collections.Generic.List(Of T).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrimExcess
  commentId: M:System.Collections.Generic.List`1.TrimExcess
  isExternal: true
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
  nameWithType.vb: List(Of T).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of T).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<T>.TrimExcess
    fullName: System.Collections.Generic.List<T>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of T).TrimExcess
    fullName: System.Collections.Generic.List(Of T).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  isExternal: true
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).TrueForAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).TrueForAll(System.Predicate(Of T))
  name.vb: TrueForAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<T>.TrueForAll
    fullName: System.Collections.Generic.List<T>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of T).TrueForAll
    fullName: System.Collections.Generic.List(Of T).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  isExternal: true
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  nameWithType.vb: List(Of T).Capacity
  fullName.vb: System.Collections.Generic.List(Of T).Capacity
- uid: System.Collections.Generic.List`1.Count
  commentId: P:System.Collections.Generic.List`1.Count
  isExternal: true
  name: Count
  nameWithType: List<T>.Count
  fullName: System.Collections.Generic.List<T>.Count
  nameWithType.vb: List(Of T).Count
  fullName.vb: System.Collections.Generic.List(Of T).Count
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: List<T>.Item[Int32]
  fullName: System.Collections.Generic.List<T>.Item[System.Int32]
  nameWithType.vb: List(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<T>.Item
    fullName: System.Collections.Generic.List<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of T).Item
    fullName: System.Collections.Generic.List(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  isExternal: true
  name: ICollection<T>.IsReadOnly
  nameWithType: List<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  isExternal: true
  name: ICollection.IsSynchronized
  nameWithType: List<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  isExternal: true
  name: ICollection.SyncRoot
  nameWithType: List<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  isExternal: true
  name: IList.IsFixedSize
  nameWithType: List<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  isExternal: true
  name: IList.IsReadOnly
  nameWithType: List<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  isExternal: true
  name: IList.Item[Int32]
  nameWithType: List<T>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of T).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<T>.IList.Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of T).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  isExternal: true
  name: Unique<T>(IEnumerable<T>, Func<T, T, Boolean>)
  nameWithType: ExtendedEnumerable.Unique<T>(IEnumerable<T>, Func<T, T, Boolean>)
  fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, System.Boolean>)
  nameWithType.vb: ExtendedEnumerable.Unique(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  fullName.vb: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, System.Boolean))
  name.vb: Unique(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  spec.csharp:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: Unique<T>
    nameWithType: ExtendedEnumerable.Unique<T>
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: Unique(Of T)
    nameWithType: ExtendedEnumerable.Unique(Of T)
    fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable.Unique(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.ExtendedMethods.ExtendedEnumerable
  commentId: T:GeometrySharp.ExtendedMethods.ExtendedEnumerable
  parent: GeometrySharp.ExtendedMethods
  name: ExtendedEnumerable
  nameWithType: ExtendedEnumerable
  fullName: GeometrySharp.ExtendedMethods.ExtendedEnumerable
- uid: GeometrySharp.ExtendedMethods
  commentId: N:GeometrySharp.ExtendedMethods
  name: GeometrySharp.ExtendedMethods
  nameWithType: GeometrySharp.ExtendedMethods
  fullName: GeometrySharp.ExtendedMethods
- uid: GeometrySharp.Geometry.Polyline.#ctor*
  commentId: Overload:GeometrySharp.Geometry.Polyline.#ctor
  name: Polyline
  nameWithType: Polyline.Polyline
  fullName: GeometrySharp.Geometry.Polyline.Polyline
- uid: GeometrySharp.Geometry.Polyline.Length*
  commentId: Overload:GeometrySharp.Geometry.Polyline.Length
  name: Length
  nameWithType: Polyline.Length
  fullName: GeometrySharp.Geometry.Polyline.Length
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: GeometrySharp.Geometry.Polyline.Segments*
  commentId: Overload:GeometrySharp.Geometry.Polyline.Segments
  name: Segments
  nameWithType: Polyline.Segments
  fullName: GeometrySharp.Geometry.Polyline.Segments
- uid: GeometrySharp.Geometry.Line[]
  isExternal: true
  name: Line[]
  nameWithType: Line[]
  fullName: GeometrySharp.Geometry.Line[]
  nameWithType.vb: Line()
  fullName.vb: GeometrySharp.Geometry.Line()
  name.vb: Line()
  spec.csharp:
  - uid: GeometrySharp.Geometry.Line
    name: Line
    nameWithType: Line
    fullName: GeometrySharp.Geometry.Line
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: GeometrySharp.Geometry.Line
    name: Line
    nameWithType: Line
    fullName: GeometrySharp.Geometry.Line
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: GeometrySharp.Geometry.Polyline.ClosestPt*
  commentId: Overload:GeometrySharp.Geometry.Polyline.ClosestPt
  name: ClosestPt
  nameWithType: Polyline.ClosestPt
  fullName: GeometrySharp.Geometry.Polyline.ClosestPt
- uid: GeometrySharp.Geometry.Vector3
  commentId: T:GeometrySharp.Geometry.Vector3
  parent: GeometrySharp.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: GeometrySharp.Geometry.Vector3
- uid: GeometrySharp.Geometry.Polyline.BoundingBox*
  commentId: Overload:GeometrySharp.Geometry.Polyline.BoundingBox
  name: BoundingBox
  nameWithType: Polyline.BoundingBox
  fullName: GeometrySharp.Geometry.Polyline.BoundingBox
- uid: GeometrySharp.Geometry.BoundingBox
  commentId: T:GeometrySharp.Geometry.BoundingBox
  parent: GeometrySharp.Geometry
  name: BoundingBox
  nameWithType: BoundingBox
  fullName: GeometrySharp.Geometry.BoundingBox
- uid: GeometrySharp.Geometry.Polyline.Reverse*
  commentId: Overload:GeometrySharp.Geometry.Polyline.Reverse
  name: Reverse
  nameWithType: Polyline.Reverse
  fullName: GeometrySharp.Geometry.Polyline.Reverse
- uid: GeometrySharp.Geometry.Polyline
  commentId: T:GeometrySharp.Geometry.Polyline
  parent: GeometrySharp.Geometry
  name: Polyline
  nameWithType: Polyline
  fullName: GeometrySharp.Geometry.Polyline
- uid: GeometrySharp.Geometry.Polyline.PointAt*
  commentId: Overload:GeometrySharp.Geometry.Polyline.PointAt
  name: PointAt
  nameWithType: Polyline.PointAt
  fullName: GeometrySharp.Geometry.Polyline.PointAt
- uid: GeometrySharp.Geometry.Polyline.Transform*
  commentId: Overload:GeometrySharp.Geometry.Polyline.Transform
  name: Transform
  nameWithType: Polyline.Transform
  fullName: GeometrySharp.Geometry.Polyline.Transform
- uid: GeometrySharp.Core.Transform
  commentId: T:GeometrySharp.Core.Transform
  parent: GeometrySharp.Core
  name: Transform
  nameWithType: Transform
  fullName: GeometrySharp.Core.Transform
- uid: GeometrySharp.Core
  commentId: N:GeometrySharp.Core
  name: GeometrySharp.Core
  nameWithType: GeometrySharp.Core
  fullName: GeometrySharp.Core
- uid: GeometrySharp.Geometry.Polyline.ToNurbsCurve*
  commentId: Overload:GeometrySharp.Geometry.Polyline.ToNurbsCurve
  name: ToNurbsCurve
  nameWithType: Polyline.ToNurbsCurve
  fullName: GeometrySharp.Geometry.Polyline.ToNurbsCurve
- uid: GeometrySharp.Geometry.NurbsCurve
  commentId: T:GeometrySharp.Geometry.NurbsCurve
  parent: GeometrySharp.Geometry
  name: NurbsCurve
  nameWithType: NurbsCurve
  fullName: GeometrySharp.Geometry.NurbsCurve
- uid: GeometrySharp.Geometry.Polyline.CleanVerticesForShortLength*
  commentId: Overload:GeometrySharp.Geometry.Polyline.CleanVerticesForShortLength
  name: CleanVerticesForShortLength
  nameWithType: Polyline.CleanVerticesForShortLength
  fullName: GeometrySharp.Geometry.Polyline.CleanVerticesForShortLength
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.Polyline.ToString*
  commentId: Overload:GeometrySharp.Geometry.Polyline.ToString
  name: ToString
  nameWithType: Polyline.ToString
  fullName: GeometrySharp.Geometry.Polyline.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
