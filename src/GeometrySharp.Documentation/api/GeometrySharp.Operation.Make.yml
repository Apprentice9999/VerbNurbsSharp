### YamlMime:ManagedReference
items:
- uid: GeometrySharp.Operation.Make
  commentId: T:GeometrySharp.Operation.Make
  id: Make
  parent: GeometrySharp.Operation
  children:
  - GeometrySharp.Operation.Make.#ctor
  - GeometrySharp.Operation.Make.Arc(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double,System.Double)
  - GeometrySharp.Operation.Make.ConicalSurface(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  - GeometrySharp.Operation.Make.CylindricalSurface(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  - GeometrySharp.Operation.Make.EllipseArc(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  - GeometrySharp.Operation.Make.ExtrudedSurface(GeometrySharp.Geometry.Vector3,System.Double,GeometrySharp.Geometry.NurbsCurve)
  - GeometrySharp.Operation.Make.Polyline(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  - GeometrySharp.Operation.Make.RationalBezierCurve(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Collections.Generic.List{System.Double})
  - GeometrySharp.Operation.Make.RationalInterpCurve(System.Collections.Generic.List{System.Collections.Generic.List{System.Double}},System.Int32,System.Boolean,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  - GeometrySharp.Operation.Make.RevolvedSurface(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  - GeometrySharp.Operation.Make.SphericalSurface(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  langs:
  - csharp
  - vb
  name: Make
  nameWithType: Make
  fullName: GeometrySharp.Operation.Make
  type: Class
  source:
    remote:
      path: GeometrySharp/Operation/Make.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Make
    path: ../GeometrySharp/Operation/Make.cs
    startLine: 12
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  syntax:
    content: public class Make
    content.vb: Public Class Make
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GeometrySharp.Operation.Make.#ctor
  commentId: M:GeometrySharp.Operation.Make.#ctor
  id: '#ctor'
  parent: GeometrySharp.Operation.Make
  langs:
  - csharp
  - vb
  name: Make()
  nameWithType: Make.Make()
  fullName: GeometrySharp.Operation.Make.Make()
  type: Constructor
  source:
    remote:
      path: GeometrySharp/Operation/Make.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: .ctor
    path: ../GeometrySharp/Operation/Make.cs
    startLine: 14
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  syntax:
    content: public Make()
    content.vb: Public Sub New
  overload: GeometrySharp.Operation.Make.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GeometrySharp.Operation.Make.Polyline(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  commentId: M:GeometrySharp.Operation.Make.Polyline(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  id: Polyline(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3})
  parent: GeometrySharp.Operation.Make
  langs:
  - csharp
  - vb
  name: Polyline(List<Vector3>)
  nameWithType: Make.Polyline(List<Vector3>)
  fullName: GeometrySharp.Operation.Make.Polyline(System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Make.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Polyline
    path: ../GeometrySharp/Operation/Make.cs
    startLine: 19
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  syntax:
    content: public static NurbsCurve Polyline(List<Vector3> points)
    parameters:
    - id: points
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
    return:
      type: GeometrySharp.Geometry.NurbsCurve
    content.vb: Public Shared Function Polyline(points As List(Of Vector3)) As NurbsCurve
  overload: GeometrySharp.Operation.Make.Polyline*
  nameWithType.vb: Make.Polyline(List(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Operation.Make.Polyline(System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3))
  name.vb: Polyline(List(Of Vector3))
- uid: GeometrySharp.Operation.Make.RationalBezierCurve(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Collections.Generic.List{System.Double})
  commentId: M:GeometrySharp.Operation.Make.RationalBezierCurve(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Collections.Generic.List{System.Double})
  id: RationalBezierCurve(System.Collections.Generic.List{GeometrySharp.Geometry.Vector3},System.Collections.Generic.List{System.Double})
  parent: GeometrySharp.Operation.Make
  langs:
  - csharp
  - vb
  name: RationalBezierCurve(List<Vector3>, List<Double>)
  nameWithType: Make.RationalBezierCurve(List<Vector3>, List<Double>)
  fullName: GeometrySharp.Operation.Make.RationalBezierCurve(System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>, System.Collections.Generic.List<System.Double>)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Make.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: RationalBezierCurve
    path: ../GeometrySharp/Operation/Make.cs
    startLine: 35
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  syntax:
    content: public static NurbsCurve RationalBezierCurve(List<Vector3> controlPoints, List<double> weights = null)
    parameters:
    - id: controlPoints
      type: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
    - id: weights
      type: System.Collections.Generic.List{System.Double}
    return:
      type: GeometrySharp.Geometry.NurbsCurve
    content.vb: Public Shared Function RationalBezierCurve(controlPoints As List(Of Vector3), weights As List(Of Double) = Nothing) As NurbsCurve
  overload: GeometrySharp.Operation.Make.RationalBezierCurve*
  nameWithType.vb: Make.RationalBezierCurve(List(Of Vector3), List(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Operation.Make.RationalBezierCurve(System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3), System.Collections.Generic.List(Of System.Double))
  name.vb: RationalBezierCurve(List(Of Vector3), List(Of Double))
- uid: GeometrySharp.Operation.Make.EllipseArc(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  commentId: M:GeometrySharp.Operation.Make.EllipseArc(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  id: EllipseArc(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  parent: GeometrySharp.Operation.Make
  langs:
  - csharp
  - vb
  name: EllipseArc(Vector3, Vector3, Vector3, Double, Double)
  nameWithType: Make.EllipseArc(Vector3, Vector3, Vector3, Double, Double)
  fullName: GeometrySharp.Operation.Make.EllipseArc(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Make.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: EllipseArc
    path: ../GeometrySharp/Operation/Make.cs
    startLine: 64
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nCreate the control points, weights, and knots of an elliptical arc\n"
  example: []
  syntax:
    content: public static NurbsCurve EllipseArc(Vector3 center, Vector3 xaxis, Vector3 yaxis, double startAngle, double endAngle)
    parameters:
    - id: center
      type: GeometrySharp.Geometry.Vector3
      description: the center
    - id: xaxis
      type: GeometrySharp.Geometry.Vector3
      description: the scaled x axis
    - id: yaxis
      type: GeometrySharp.Geometry.Vector3
      description: the scaled y axis
    - id: startAngle
      type: System.Double
      description: start angle of the ellipse arc, between 0 and 2pi, where 0 points at the xaxis
    - id: endAngle
      type: System.Double
      description: end angle of the arc, between 0 and 2pi, greater than the start angle
    return:
      type: GeometrySharp.Geometry.NurbsCurve
      description: a NurbsCurveData object representing a NURBS curve
    content.vb: Public Shared Function EllipseArc(center As Vector3, xaxis As Vector3, yaxis As Vector3, startAngle As Double, endAngle As Double) As NurbsCurve
  overload: GeometrySharp.Operation.Make.EllipseArc*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Make.Arc(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double,System.Double)
  commentId: M:GeometrySharp.Operation.Make.Arc(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double,System.Double)
  id: Arc(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double,System.Double)
  parent: GeometrySharp.Operation.Make
  langs:
  - csharp
  - vb
  name: Arc(Vector3, Vector3, Vector3, Double, Double, Double)
  nameWithType: Make.Arc(Vector3, Vector3, Vector3, Double, Double, Double)
  fullName: GeometrySharp.Operation.Make.Arc(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Make.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: Arc
    path: ../GeometrySharp/Operation/Make.cs
    startLine: 80
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  syntax:
    content: public static NurbsCurve Arc(Vector3 center, Vector3 xaxis, Vector3 yaxis, double radius, double startAngle, double endAngle)
    parameters:
    - id: center
      type: GeometrySharp.Geometry.Vector3
    - id: xaxis
      type: GeometrySharp.Geometry.Vector3
    - id: yaxis
      type: GeometrySharp.Geometry.Vector3
    - id: radius
      type: System.Double
    - id: startAngle
      type: System.Double
    - id: endAngle
      type: System.Double
    return:
      type: GeometrySharp.Geometry.NurbsCurve
    content.vb: Public Shared Function Arc(center As Vector3, xaxis As Vector3, yaxis As Vector3, radius As Double, startAngle As Double, endAngle As Double) As NurbsCurve
  overload: GeometrySharp.Operation.Make.Arc*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Make.ExtrudedSurface(GeometrySharp.Geometry.Vector3,System.Double,GeometrySharp.Geometry.NurbsCurve)
  commentId: M:GeometrySharp.Operation.Make.ExtrudedSurface(GeometrySharp.Geometry.Vector3,System.Double,GeometrySharp.Geometry.NurbsCurve)
  id: ExtrudedSurface(GeometrySharp.Geometry.Vector3,System.Double,GeometrySharp.Geometry.NurbsCurve)
  parent: GeometrySharp.Operation.Make
  langs:
  - csharp
  - vb
  name: ExtrudedSurface(Vector3, Double, NurbsCurve)
  nameWithType: Make.ExtrudedSurface(Vector3, Double, NurbsCurve)
  fullName: GeometrySharp.Operation.Make.ExtrudedSurface(GeometrySharp.Geometry.Vector3, System.Double, GeometrySharp.Geometry.NurbsCurve)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Make.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ExtrudedSurface
    path: ../GeometrySharp/Operation/Make.cs
    startLine: 92
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nCreate the control points, weights, and knots of an extruded surface\n"
  example: []
  syntax:
    content: public static NurbsSurface ExtrudedSurface(Vector3 axis, double length, NurbsCurve profile)
    parameters:
    - id: axis
      type: GeometrySharp.Geometry.Vector3
      description: axis of the extrusion
    - id: length
      type: System.Double
      description: length of the extrusion
    - id: profile
      type: GeometrySharp.Geometry.NurbsCurve
      description: a NurbsCurveData object representing a NURBS surface
    return:
      type: GeometrySharp.Geometry.NurbsSurface
      description: 'an object with the following properties: controlPoints, weights, knots, degree'
    content.vb: Public Shared Function ExtrudedSurface(axis As Vector3, length As Double, profile As NurbsCurve) As NurbsSurface
  overload: GeometrySharp.Operation.Make.ExtrudedSurface*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Make.CylindricalSurface(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  commentId: M:GeometrySharp.Operation.Make.CylindricalSurface(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  id: CylindricalSurface(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  parent: GeometrySharp.Operation.Make
  langs:
  - csharp
  - vb
  name: CylindricalSurface(Vector3, Vector3, Vector3, Double, Double)
  nameWithType: Make.CylindricalSurface(Vector3, Vector3, Vector3, Double, Double)
  fullName: GeometrySharp.Operation.Make.CylindricalSurface(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Make.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: CylindricalSurface
    path: ../GeometrySharp/Operation/Make.cs
    startLine: 106
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nCreate the control points, weights, and knots of a cylinder\n"
  example: []
  syntax:
    content: public static NurbsSurface CylindricalSurface(Vector3 axis, Vector3 xaxis, Vector3 basePt, double height, double radius)
    parameters:
    - id: axis
      type: GeometrySharp.Geometry.Vector3
      description: normalized axis of cylinder
    - id: xaxis
      type: GeometrySharp.Geometry.Vector3
      description: xaxis in plane of cylinder
    - id: basePt
      type: GeometrySharp.Geometry.Vector3
      description: position of base of cylinder
    - id: height
      type: System.Double
      description: height from base to top
    - id: radius
      type: System.Double
      description: radius of the cylinder
    return:
      type: GeometrySharp.Geometry.NurbsSurface
      description: 'an object with the following properties: controlPoints, weights, knotsU, knotsV, degreeU, degreeV'
    content.vb: Public Shared Function CylindricalSurface(axis As Vector3, xaxis As Vector3, basePt As Vector3, height As Double, radius As Double) As NurbsSurface
  overload: GeometrySharp.Operation.Make.CylindricalSurface*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Make.RevolvedSurface(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  commentId: M:GeometrySharp.Operation.Make.RevolvedSurface(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  id: RevolvedSurface(GeometrySharp.Geometry.NurbsCurve,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  parent: GeometrySharp.Operation.Make
  langs:
  - csharp
  - vb
  name: RevolvedSurface(NurbsCurve, Vector3, Vector3, Double)
  nameWithType: Make.RevolvedSurface(NurbsCurve, Vector3, Vector3, Double)
  fullName: GeometrySharp.Operation.Make.RevolvedSurface(GeometrySharp.Geometry.NurbsCurve, GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Make.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: RevolvedSurface
    path: ../GeometrySharp/Operation/Make.cs
    startLine: 118
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\n"
  example: []
  syntax:
    content: public static NurbsSurface RevolvedSurface(NurbsCurve profile, Vector3 center, Vector3 axis, double theta)
    parameters:
    - id: profile
      type: GeometrySharp.Geometry.NurbsCurve
      description: ''
    - id: center
      type: GeometrySharp.Geometry.Vector3
      description: ''
    - id: axis
      type: GeometrySharp.Geometry.Vector3
      description: ''
    - id: theta
      type: System.Double
      description: ''
    return:
      type: GeometrySharp.Geometry.NurbsSurface
      description: ''
    content.vb: Public Shared Function RevolvedSurface(profile As NurbsCurve, center As Vector3, axis As Vector3, theta As Double) As NurbsSurface
  overload: GeometrySharp.Operation.Make.RevolvedSurface*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Make.SphericalSurface(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  commentId: M:GeometrySharp.Operation.Make.SphericalSurface(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  id: SphericalSurface(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double)
  parent: GeometrySharp.Operation.Make
  langs:
  - csharp
  - vb
  name: SphericalSurface(Vector3, Vector3, Vector3, Double)
  nameWithType: Make.SphericalSurface(Vector3, Vector3, Vector3, Double)
  fullName: GeometrySharp.Operation.Make.SphericalSurface(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Make.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: SphericalSurface
    path: ../GeometrySharp/Operation/Make.cs
    startLine: 131
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nCreate the control points, weights, and knots of a sphere\n"
  example: []
  syntax:
    content: public static NurbsSurface SphericalSurface(Vector3 center, Vector3 axis, Vector3 xaxis, double radius)
    parameters:
    - id: center
      type: GeometrySharp.Geometry.Vector3
      description: the center of the sphere
    - id: axis
      type: GeometrySharp.Geometry.Vector3
      description: normalized axis of sphere
    - id: xaxis
      type: GeometrySharp.Geometry.Vector3
      description: vector perpendicular to axis of sphere, starting the rotation of the sphere
    - id: radius
      type: System.Double
      description: radius of the sphere
    return:
      type: GeometrySharp.Geometry.NurbsSurface
      description: 'an object with the following properties: controlPoints, weights, knotsU, knotsV, degreeU, degreeV'
    content.vb: Public Shared Function SphericalSurface(center As Vector3, axis As Vector3, xaxis As Vector3, radius As Double) As NurbsSurface
  overload: GeometrySharp.Operation.Make.SphericalSurface*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Make.ConicalSurface(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  commentId: M:GeometrySharp.Operation.Make.ConicalSurface(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  id: ConicalSurface(GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3,System.Double,System.Double)
  parent: GeometrySharp.Operation.Make
  langs:
  - csharp
  - vb
  name: ConicalSurface(Vector3, Vector3, Vector3, Double, Double)
  nameWithType: Make.ConicalSurface(Vector3, Vector3, Vector3, Double, Double)
  fullName: GeometrySharp.Operation.Make.ConicalSurface(GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Make.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: ConicalSurface
    path: ../GeometrySharp/Operation/Make.cs
    startLine: 145
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  summary: "\nCreate the control points, weights, and knots of a cone\n"
  example: []
  syntax:
    content: public static NurbsSurface ConicalSurface(Vector3 axis, Vector3 xaxis, Vector3 basePt, double height, double radius)
    parameters:
    - id: axis
      type: GeometrySharp.Geometry.Vector3
      description: normalized axis of cone
    - id: xaxis
      type: GeometrySharp.Geometry.Vector3
      description: ''
    - id: basePt
      type: GeometrySharp.Geometry.Vector3
      description: position of base of cone
    - id: height
      type: System.Double
      description: height from base to tip
    - id: radius
      type: System.Double
      description: radius at the base of the cone
    return:
      type: GeometrySharp.Geometry.NurbsSurface
      description: ''
    content.vb: Public Shared Function ConicalSurface(axis As Vector3, xaxis As Vector3, basePt As Vector3, height As Double, radius As Double) As NurbsSurface
  overload: GeometrySharp.Operation.Make.ConicalSurface*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: GeometrySharp.Operation.Make.RationalInterpCurve(System.Collections.Generic.List{System.Collections.Generic.List{System.Double}},System.Int32,System.Boolean,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  commentId: M:GeometrySharp.Operation.Make.RationalInterpCurve(System.Collections.Generic.List{System.Collections.Generic.List{System.Double}},System.Int32,System.Boolean,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  id: RationalInterpCurve(System.Collections.Generic.List{System.Collections.Generic.List{System.Double}},System.Int32,System.Boolean,GeometrySharp.Geometry.Vector3,GeometrySharp.Geometry.Vector3)
  parent: GeometrySharp.Operation.Make
  langs:
  - csharp
  - vb
  name: RationalInterpCurve(List<List<Double>>, Int32, Boolean, Vector3, Vector3)
  nameWithType: Make.RationalInterpCurve(List<List<Double>>, Int32, Boolean, Vector3, Vector3)
  fullName: GeometrySharp.Operation.Make.RationalInterpCurve(System.Collections.Generic.List<System.Collections.Generic.List<System.Double>>, System.Int32, System.Boolean, GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: GeometrySharp/Operation/Make.cs
      branch: dev/ceca/docfx
      repo: https://github.com/cesarecaoduro/GeometrySharp
    id: RationalInterpCurve
    path: ../GeometrySharp/Operation/Make.cs
    startLine: 150
  assemblies:
  - GeometrySharp
  namespace: GeometrySharp.Operation
  syntax:
    content: public static NurbsCurve RationalInterpCurve(List<List<double>> points, int degree, bool homogeneousPoints = false, Vector3 start_tangent = null, Vector3 end_tangent = null)
    parameters:
    - id: points
      type: System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}
    - id: degree
      type: System.Int32
    - id: homogeneousPoints
      type: System.Boolean
    - id: start_tangent
      type: GeometrySharp.Geometry.Vector3
    - id: end_tangent
      type: GeometrySharp.Geometry.Vector3
    return:
      type: GeometrySharp.Geometry.NurbsCurve
    content.vb: Public Shared Function RationalInterpCurve(points As List(Of List(Of Double)), degree As Integer, homogeneousPoints As Boolean = False, start_tangent As Vector3 = Nothing, end_tangent As Vector3 = Nothing) As NurbsCurve
  overload: GeometrySharp.Operation.Make.RationalInterpCurve*
  nameWithType.vb: Make.RationalInterpCurve(List(Of List(Of Double)), Int32, Boolean, Vector3, Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: GeometrySharp.Operation.Make.RationalInterpCurve(System.Collections.Generic.List(Of System.Collections.Generic.List(Of System.Double)), System.Int32, System.Boolean, GeometrySharp.Geometry.Vector3, GeometrySharp.Geometry.Vector3)
  name.vb: RationalInterpCurve(List(Of List(Of Double)), Int32, Boolean, Vector3, Vector3)
references:
- uid: GeometrySharp.Operation
  commentId: N:GeometrySharp.Operation
  name: GeometrySharp.Operation
  nameWithType: GeometrySharp.Operation
  fullName: GeometrySharp.Operation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GeometrySharp.Operation.Make.#ctor*
  commentId: Overload:GeometrySharp.Operation.Make.#ctor
  name: Make
  nameWithType: Make.Make
  fullName: GeometrySharp.Operation.Make.Make
- uid: GeometrySharp.Operation.Make.Polyline*
  commentId: Overload:GeometrySharp.Operation.Make.Polyline
  name: Polyline
  nameWithType: Make.Polyline
  fullName: GeometrySharp.Operation.Make.Polyline
- uid: System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  commentId: T:System.Collections.Generic.List{GeometrySharp.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Vector3>
  nameWithType: List<Vector3>
  fullName: System.Collections.Generic.List<GeometrySharp.Geometry.Vector3>
  nameWithType.vb: List(Of Vector3)
  fullName.vb: System.Collections.Generic.List(Of GeometrySharp.Geometry.Vector3)
  name.vb: List(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeometrySharp.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: GeometrySharp.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Geometry.NurbsCurve
  commentId: T:GeometrySharp.Geometry.NurbsCurve
  parent: GeometrySharp.Geometry
  name: NurbsCurve
  nameWithType: NurbsCurve
  fullName: GeometrySharp.Geometry.NurbsCurve
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: GeometrySharp.Geometry
  commentId: N:GeometrySharp.Geometry
  name: GeometrySharp.Geometry
  nameWithType: GeometrySharp.Geometry
  fullName: GeometrySharp.Geometry
- uid: GeometrySharp.Operation.Make.RationalBezierCurve*
  commentId: Overload:GeometrySharp.Operation.Make.RationalBezierCurve
  name: RationalBezierCurve
  nameWithType: Make.RationalBezierCurve
  fullName: GeometrySharp.Operation.Make.RationalBezierCurve
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double>
  nameWithType: List<Double>
  fullName: System.Collections.Generic.List<System.Double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GeometrySharp.Operation.Make.EllipseArc*
  commentId: Overload:GeometrySharp.Operation.Make.EllipseArc
  name: EllipseArc
  nameWithType: Make.EllipseArc
  fullName: GeometrySharp.Operation.Make.EllipseArc
- uid: GeometrySharp.Geometry.Vector3
  commentId: T:GeometrySharp.Geometry.Vector3
  parent: GeometrySharp.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: GeometrySharp.Geometry.Vector3
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: GeometrySharp.Operation.Make.Arc*
  commentId: Overload:GeometrySharp.Operation.Make.Arc
  name: Arc
  nameWithType: Make.Arc
  fullName: GeometrySharp.Operation.Make.Arc
- uid: GeometrySharp.Operation.Make.ExtrudedSurface*
  commentId: Overload:GeometrySharp.Operation.Make.ExtrudedSurface
  name: ExtrudedSurface
  nameWithType: Make.ExtrudedSurface
  fullName: GeometrySharp.Operation.Make.ExtrudedSurface
- uid: GeometrySharp.Geometry.NurbsSurface
  commentId: T:GeometrySharp.Geometry.NurbsSurface
  parent: GeometrySharp.Geometry
  name: NurbsSurface
  nameWithType: NurbsSurface
  fullName: GeometrySharp.Geometry.NurbsSurface
- uid: GeometrySharp.Operation.Make.CylindricalSurface*
  commentId: Overload:GeometrySharp.Operation.Make.CylindricalSurface
  name: CylindricalSurface
  nameWithType: Make.CylindricalSurface
  fullName: GeometrySharp.Operation.Make.CylindricalSurface
- uid: GeometrySharp.Operation.Make.RevolvedSurface*
  commentId: Overload:GeometrySharp.Operation.Make.RevolvedSurface
  name: RevolvedSurface
  nameWithType: Make.RevolvedSurface
  fullName: GeometrySharp.Operation.Make.RevolvedSurface
- uid: GeometrySharp.Operation.Make.SphericalSurface*
  commentId: Overload:GeometrySharp.Operation.Make.SphericalSurface
  name: SphericalSurface
  nameWithType: Make.SphericalSurface
  fullName: GeometrySharp.Operation.Make.SphericalSurface
- uid: GeometrySharp.Operation.Make.ConicalSurface*
  commentId: Overload:GeometrySharp.Operation.Make.ConicalSurface
  name: ConicalSurface
  nameWithType: Make.ConicalSurface
  fullName: GeometrySharp.Operation.Make.ConicalSurface
- uid: GeometrySharp.Operation.Make.RationalInterpCurve*
  commentId: Overload:GeometrySharp.Operation.Make.RationalInterpCurve
  name: RationalInterpCurve
  nameWithType: Make.RationalInterpCurve
  fullName: GeometrySharp.Operation.Make.RationalInterpCurve
- uid: System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<List<Double>>
  nameWithType: List<List<Double>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.List<System.Double>>
  nameWithType.vb: List(Of List(Of Double))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.List(Of System.Double))
  name.vb: List(Of List(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
